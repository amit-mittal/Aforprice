/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.genereated.pricealert;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PriceAlertService {

  public interface Iface {

    public boolean addPriceAlertThrift(PriceAlertThrift alert) throws PriceAlertException, org.apache.thrift.TException;

    public boolean updatePriceAlertThrift(PriceAlertThrift alert) throws PriceAlertException, org.apache.thrift.TException;

    public boolean removePriceAlertThrift(int alertId) throws PriceAlertException, org.apache.thrift.TException;

    public PriceAlertThrift getPriceAlertThrift(String emailId, int productId) throws PriceAlertException, org.apache.thrift.TException;

    public List<PriceAlertThrift> getPriceAlerts(String emailId) throws PriceAlertException, org.apache.thrift.TException;

    public boolean verifyPriceAlertThrift(int alertId) throws PriceAlertException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addPriceAlertThrift(PriceAlertThrift alert, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updatePriceAlertThrift(PriceAlertThrift alert, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removePriceAlertThrift(int alertId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPriceAlertThrift(String emailId, int productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPriceAlerts(String emailId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void verifyPriceAlertThrift(int alertId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean addPriceAlertThrift(PriceAlertThrift alert) throws PriceAlertException, org.apache.thrift.TException
    {
      send_addPriceAlertThrift(alert);
      return recv_addPriceAlertThrift();
    }

    public void send_addPriceAlertThrift(PriceAlertThrift alert) throws org.apache.thrift.TException
    {
      addPriceAlertThrift_args args = new addPriceAlertThrift_args();
      args.setAlert(alert);
      sendBase("addPriceAlertThrift", args);
    }

    public boolean recv_addPriceAlertThrift() throws PriceAlertException, org.apache.thrift.TException
    {
      addPriceAlertThrift_result result = new addPriceAlertThrift_result();
      receiveBase(result, "addPriceAlertThrift");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addPriceAlertThrift failed: unknown result");
    }

    public boolean updatePriceAlertThrift(PriceAlertThrift alert) throws PriceAlertException, org.apache.thrift.TException
    {
      send_updatePriceAlertThrift(alert);
      return recv_updatePriceAlertThrift();
    }

    public void send_updatePriceAlertThrift(PriceAlertThrift alert) throws org.apache.thrift.TException
    {
      updatePriceAlertThrift_args args = new updatePriceAlertThrift_args();
      args.setAlert(alert);
      sendBase("updatePriceAlertThrift", args);
    }

    public boolean recv_updatePriceAlertThrift() throws PriceAlertException, org.apache.thrift.TException
    {
      updatePriceAlertThrift_result result = new updatePriceAlertThrift_result();
      receiveBase(result, "updatePriceAlertThrift");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePriceAlertThrift failed: unknown result");
    }

    public boolean removePriceAlertThrift(int alertId) throws PriceAlertException, org.apache.thrift.TException
    {
      send_removePriceAlertThrift(alertId);
      return recv_removePriceAlertThrift();
    }

    public void send_removePriceAlertThrift(int alertId) throws org.apache.thrift.TException
    {
      removePriceAlertThrift_args args = new removePriceAlertThrift_args();
      args.setAlertId(alertId);
      sendBase("removePriceAlertThrift", args);
    }

    public boolean recv_removePriceAlertThrift() throws PriceAlertException, org.apache.thrift.TException
    {
      removePriceAlertThrift_result result = new removePriceAlertThrift_result();
      receiveBase(result, "removePriceAlertThrift");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removePriceAlertThrift failed: unknown result");
    }

    public PriceAlertThrift getPriceAlertThrift(String emailId, int productId) throws PriceAlertException, org.apache.thrift.TException
    {
      send_getPriceAlertThrift(emailId, productId);
      return recv_getPriceAlertThrift();
    }

    public void send_getPriceAlertThrift(String emailId, int productId) throws org.apache.thrift.TException
    {
      getPriceAlertThrift_args args = new getPriceAlertThrift_args();
      args.setEmailId(emailId);
      args.setProductId(productId);
      sendBase("getPriceAlertThrift", args);
    }

    public PriceAlertThrift recv_getPriceAlertThrift() throws PriceAlertException, org.apache.thrift.TException
    {
      getPriceAlertThrift_result result = new getPriceAlertThrift_result();
      receiveBase(result, "getPriceAlertThrift");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPriceAlertThrift failed: unknown result");
    }

    public List<PriceAlertThrift> getPriceAlerts(String emailId) throws PriceAlertException, org.apache.thrift.TException
    {
      send_getPriceAlerts(emailId);
      return recv_getPriceAlerts();
    }

    public void send_getPriceAlerts(String emailId) throws org.apache.thrift.TException
    {
      getPriceAlerts_args args = new getPriceAlerts_args();
      args.setEmailId(emailId);
      sendBase("getPriceAlerts", args);
    }

    public List<PriceAlertThrift> recv_getPriceAlerts() throws PriceAlertException, org.apache.thrift.TException
    {
      getPriceAlerts_result result = new getPriceAlerts_result();
      receiveBase(result, "getPriceAlerts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPriceAlerts failed: unknown result");
    }

    public boolean verifyPriceAlertThrift(int alertId) throws PriceAlertException, org.apache.thrift.TException
    {
      send_verifyPriceAlertThrift(alertId);
      return recv_verifyPriceAlertThrift();
    }

    public void send_verifyPriceAlertThrift(int alertId) throws org.apache.thrift.TException
    {
      verifyPriceAlertThrift_args args = new verifyPriceAlertThrift_args();
      args.setAlertId(alertId);
      sendBase("verifyPriceAlertThrift", args);
    }

    public boolean recv_verifyPriceAlertThrift() throws PriceAlertException, org.apache.thrift.TException
    {
      verifyPriceAlertThrift_result result = new verifyPriceAlertThrift_result();
      receiveBase(result, "verifyPriceAlertThrift");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyPriceAlertThrift failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addPriceAlertThrift(PriceAlertThrift alert, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPriceAlertThrift_call method_call = new addPriceAlertThrift_call(alert, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPriceAlertThrift_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PriceAlertThrift alert;
      public addPriceAlertThrift_call(PriceAlertThrift alert, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.alert = alert;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPriceAlertThrift", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPriceAlertThrift_args args = new addPriceAlertThrift_args();
        args.setAlert(alert);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws PriceAlertException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addPriceAlertThrift();
      }
    }

    public void updatePriceAlertThrift(PriceAlertThrift alert, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePriceAlertThrift_call method_call = new updatePriceAlertThrift_call(alert, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePriceAlertThrift_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PriceAlertThrift alert;
      public updatePriceAlertThrift_call(PriceAlertThrift alert, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.alert = alert;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePriceAlertThrift", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePriceAlertThrift_args args = new updatePriceAlertThrift_args();
        args.setAlert(alert);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws PriceAlertException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updatePriceAlertThrift();
      }
    }

    public void removePriceAlertThrift(int alertId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removePriceAlertThrift_call method_call = new removePriceAlertThrift_call(alertId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removePriceAlertThrift_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int alertId;
      public removePriceAlertThrift_call(int alertId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.alertId = alertId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removePriceAlertThrift", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removePriceAlertThrift_args args = new removePriceAlertThrift_args();
        args.setAlertId(alertId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws PriceAlertException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removePriceAlertThrift();
      }
    }

    public void getPriceAlertThrift(String emailId, int productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPriceAlertThrift_call method_call = new getPriceAlertThrift_call(emailId, productId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPriceAlertThrift_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String emailId;
      private int productId;
      public getPriceAlertThrift_call(String emailId, int productId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.emailId = emailId;
        this.productId = productId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPriceAlertThrift", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPriceAlertThrift_args args = new getPriceAlertThrift_args();
        args.setEmailId(emailId);
        args.setProductId(productId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PriceAlertThrift getResult() throws PriceAlertException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPriceAlertThrift();
      }
    }

    public void getPriceAlerts(String emailId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPriceAlerts_call method_call = new getPriceAlerts_call(emailId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPriceAlerts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String emailId;
      public getPriceAlerts_call(String emailId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.emailId = emailId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPriceAlerts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPriceAlerts_args args = new getPriceAlerts_args();
        args.setEmailId(emailId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<PriceAlertThrift> getResult() throws PriceAlertException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPriceAlerts();
      }
    }

    public void verifyPriceAlertThrift(int alertId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyPriceAlertThrift_call method_call = new verifyPriceAlertThrift_call(alertId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyPriceAlertThrift_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int alertId;
      public verifyPriceAlertThrift_call(int alertId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.alertId = alertId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyPriceAlertThrift", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyPriceAlertThrift_args args = new verifyPriceAlertThrift_args();
        args.setAlertId(alertId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws PriceAlertException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyPriceAlertThrift();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addPriceAlertThrift", new addPriceAlertThrift());
      processMap.put("updatePriceAlertThrift", new updatePriceAlertThrift());
      processMap.put("removePriceAlertThrift", new removePriceAlertThrift());
      processMap.put("getPriceAlertThrift", new getPriceAlertThrift());
      processMap.put("getPriceAlerts", new getPriceAlerts());
      processMap.put("verifyPriceAlertThrift", new verifyPriceAlertThrift());
      return processMap;
    }

    public static class addPriceAlertThrift<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPriceAlertThrift_args> {
      public addPriceAlertThrift() {
        super("addPriceAlertThrift");
      }

      public addPriceAlertThrift_args getEmptyArgsInstance() {
        return new addPriceAlertThrift_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addPriceAlertThrift_result getResult(I iface, addPriceAlertThrift_args args) throws org.apache.thrift.TException {
        addPriceAlertThrift_result result = new addPriceAlertThrift_result();
        try {
          result.success = iface.addPriceAlertThrift(args.alert);
          result.setSuccessIsSet(true);
        } catch (PriceAlertException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updatePriceAlertThrift<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePriceAlertThrift_args> {
      public updatePriceAlertThrift() {
        super("updatePriceAlertThrift");
      }

      public updatePriceAlertThrift_args getEmptyArgsInstance() {
        return new updatePriceAlertThrift_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updatePriceAlertThrift_result getResult(I iface, updatePriceAlertThrift_args args) throws org.apache.thrift.TException {
        updatePriceAlertThrift_result result = new updatePriceAlertThrift_result();
        try {
          result.success = iface.updatePriceAlertThrift(args.alert);
          result.setSuccessIsSet(true);
        } catch (PriceAlertException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class removePriceAlertThrift<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removePriceAlertThrift_args> {
      public removePriceAlertThrift() {
        super("removePriceAlertThrift");
      }

      public removePriceAlertThrift_args getEmptyArgsInstance() {
        return new removePriceAlertThrift_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removePriceAlertThrift_result getResult(I iface, removePriceAlertThrift_args args) throws org.apache.thrift.TException {
        removePriceAlertThrift_result result = new removePriceAlertThrift_result();
        try {
          result.success = iface.removePriceAlertThrift(args.alertId);
          result.setSuccessIsSet(true);
        } catch (PriceAlertException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getPriceAlertThrift<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPriceAlertThrift_args> {
      public getPriceAlertThrift() {
        super("getPriceAlertThrift");
      }

      public getPriceAlertThrift_args getEmptyArgsInstance() {
        return new getPriceAlertThrift_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPriceAlertThrift_result getResult(I iface, getPriceAlertThrift_args args) throws org.apache.thrift.TException {
        getPriceAlertThrift_result result = new getPriceAlertThrift_result();
        try {
          result.success = iface.getPriceAlertThrift(args.emailId, args.productId);
        } catch (PriceAlertException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getPriceAlerts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPriceAlerts_args> {
      public getPriceAlerts() {
        super("getPriceAlerts");
      }

      public getPriceAlerts_args getEmptyArgsInstance() {
        return new getPriceAlerts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPriceAlerts_result getResult(I iface, getPriceAlerts_args args) throws org.apache.thrift.TException {
        getPriceAlerts_result result = new getPriceAlerts_result();
        try {
          result.success = iface.getPriceAlerts(args.emailId);
        } catch (PriceAlertException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class verifyPriceAlertThrift<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyPriceAlertThrift_args> {
      public verifyPriceAlertThrift() {
        super("verifyPriceAlertThrift");
      }

      public verifyPriceAlertThrift_args getEmptyArgsInstance() {
        return new verifyPriceAlertThrift_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifyPriceAlertThrift_result getResult(I iface, verifyPriceAlertThrift_args args) throws org.apache.thrift.TException {
        verifyPriceAlertThrift_result result = new verifyPriceAlertThrift_result();
        try {
          result.success = iface.verifyPriceAlertThrift(args.alertId);
          result.setSuccessIsSet(true);
        } catch (PriceAlertException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addPriceAlertThrift", new addPriceAlertThrift());
      processMap.put("updatePriceAlertThrift", new updatePriceAlertThrift());
      processMap.put("removePriceAlertThrift", new removePriceAlertThrift());
      processMap.put("getPriceAlertThrift", new getPriceAlertThrift());
      processMap.put("getPriceAlerts", new getPriceAlerts());
      processMap.put("verifyPriceAlertThrift", new verifyPriceAlertThrift());
      return processMap;
    }

    public static class addPriceAlertThrift<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addPriceAlertThrift_args, Boolean> {
      public addPriceAlertThrift() {
        super("addPriceAlertThrift");
      }

      public addPriceAlertThrift_args getEmptyArgsInstance() {
        return new addPriceAlertThrift_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addPriceAlertThrift_result result = new addPriceAlertThrift_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addPriceAlertThrift_result result = new addPriceAlertThrift_result();
            if (e instanceof PriceAlertException) {
                        result.e = (PriceAlertException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addPriceAlertThrift_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addPriceAlertThrift(args.alert,resultHandler);
      }
    }

    public static class updatePriceAlertThrift<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updatePriceAlertThrift_args, Boolean> {
      public updatePriceAlertThrift() {
        super("updatePriceAlertThrift");
      }

      public updatePriceAlertThrift_args getEmptyArgsInstance() {
        return new updatePriceAlertThrift_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updatePriceAlertThrift_result result = new updatePriceAlertThrift_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updatePriceAlertThrift_result result = new updatePriceAlertThrift_result();
            if (e instanceof PriceAlertException) {
                        result.e = (PriceAlertException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updatePriceAlertThrift_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updatePriceAlertThrift(args.alert,resultHandler);
      }
    }

    public static class removePriceAlertThrift<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removePriceAlertThrift_args, Boolean> {
      public removePriceAlertThrift() {
        super("removePriceAlertThrift");
      }

      public removePriceAlertThrift_args getEmptyArgsInstance() {
        return new removePriceAlertThrift_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            removePriceAlertThrift_result result = new removePriceAlertThrift_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removePriceAlertThrift_result result = new removePriceAlertThrift_result();
            if (e instanceof PriceAlertException) {
                        result.e = (PriceAlertException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removePriceAlertThrift_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.removePriceAlertThrift(args.alertId,resultHandler);
      }
    }

    public static class getPriceAlertThrift<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPriceAlertThrift_args, PriceAlertThrift> {
      public getPriceAlertThrift() {
        super("getPriceAlertThrift");
      }

      public getPriceAlertThrift_args getEmptyArgsInstance() {
        return new getPriceAlertThrift_args();
      }

      public AsyncMethodCallback<PriceAlertThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PriceAlertThrift>() { 
          public void onComplete(PriceAlertThrift o) {
            getPriceAlertThrift_result result = new getPriceAlertThrift_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPriceAlertThrift_result result = new getPriceAlertThrift_result();
            if (e instanceof PriceAlertException) {
                        result.e = (PriceAlertException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPriceAlertThrift_args args, org.apache.thrift.async.AsyncMethodCallback<PriceAlertThrift> resultHandler) throws TException {
        iface.getPriceAlertThrift(args.emailId, args.productId,resultHandler);
      }
    }

    public static class getPriceAlerts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPriceAlerts_args, List<PriceAlertThrift>> {
      public getPriceAlerts() {
        super("getPriceAlerts");
      }

      public getPriceAlerts_args getEmptyArgsInstance() {
        return new getPriceAlerts_args();
      }

      public AsyncMethodCallback<List<PriceAlertThrift>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<PriceAlertThrift>>() { 
          public void onComplete(List<PriceAlertThrift> o) {
            getPriceAlerts_result result = new getPriceAlerts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPriceAlerts_result result = new getPriceAlerts_result();
            if (e instanceof PriceAlertException) {
                        result.e = (PriceAlertException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPriceAlerts_args args, org.apache.thrift.async.AsyncMethodCallback<List<PriceAlertThrift>> resultHandler) throws TException {
        iface.getPriceAlerts(args.emailId,resultHandler);
      }
    }

    public static class verifyPriceAlertThrift<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyPriceAlertThrift_args, Boolean> {
      public verifyPriceAlertThrift() {
        super("verifyPriceAlertThrift");
      }

      public verifyPriceAlertThrift_args getEmptyArgsInstance() {
        return new verifyPriceAlertThrift_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            verifyPriceAlertThrift_result result = new verifyPriceAlertThrift_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verifyPriceAlertThrift_result result = new verifyPriceAlertThrift_result();
            if (e instanceof PriceAlertException) {
                        result.e = (PriceAlertException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifyPriceAlertThrift_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.verifyPriceAlertThrift(args.alertId,resultHandler);
      }
    }

  }

  public static class addPriceAlertThrift_args implements org.apache.thrift.TBase<addPriceAlertThrift_args, addPriceAlertThrift_args._Fields>, java.io.Serializable, Cloneable, Comparable<addPriceAlertThrift_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPriceAlertThrift_args");

    private static final org.apache.thrift.protocol.TField ALERT_FIELD_DESC = new org.apache.thrift.protocol.TField("alert", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPriceAlertThrift_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPriceAlertThrift_argsTupleSchemeFactory());
    }

    public PriceAlertThrift alert; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ALERT((short)1, "alert");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ALERT
            return ALERT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ALERT, new org.apache.thrift.meta_data.FieldMetaData("alert", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PriceAlertThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPriceAlertThrift_args.class, metaDataMap);
    }

    public addPriceAlertThrift_args() {
    }

    public addPriceAlertThrift_args(
      PriceAlertThrift alert)
    {
      this();
      this.alert = alert;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPriceAlertThrift_args(addPriceAlertThrift_args other) {
      if (other.isSetAlert()) {
        this.alert = new PriceAlertThrift(other.alert);
      }
    }

    public addPriceAlertThrift_args deepCopy() {
      return new addPriceAlertThrift_args(this);
    }

    @Override
    public void clear() {
      this.alert = null;
    }

    public PriceAlertThrift getAlert() {
      return this.alert;
    }

    public addPriceAlertThrift_args setAlert(PriceAlertThrift alert) {
      this.alert = alert;
      return this;
    }

    public void unsetAlert() {
      this.alert = null;
    }

    /** Returns true if field alert is set (has been assigned a value) and false otherwise */
    public boolean isSetAlert() {
      return this.alert != null;
    }

    public void setAlertIsSet(boolean value) {
      if (!value) {
        this.alert = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ALERT:
        if (value == null) {
          unsetAlert();
        } else {
          setAlert((PriceAlertThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ALERT:
        return getAlert();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ALERT:
        return isSetAlert();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPriceAlertThrift_args)
        return this.equals((addPriceAlertThrift_args)that);
      return false;
    }

    public boolean equals(addPriceAlertThrift_args that) {
      if (that == null)
        return false;

      boolean this_present_alert = true && this.isSetAlert();
      boolean that_present_alert = true && that.isSetAlert();
      if (this_present_alert || that_present_alert) {
        if (!(this_present_alert && that_present_alert))
          return false;
        if (!this.alert.equals(that.alert))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addPriceAlertThrift_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAlert()).compareTo(other.isSetAlert());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlert()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alert, other.alert);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPriceAlertThrift_args(");
      boolean first = true;

      sb.append("alert:");
      if (this.alert == null) {
        sb.append("null");
      } else {
        sb.append(this.alert);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (alert != null) {
        alert.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPriceAlertThrift_argsStandardSchemeFactory implements SchemeFactory {
      public addPriceAlertThrift_argsStandardScheme getScheme() {
        return new addPriceAlertThrift_argsStandardScheme();
      }
    }

    private static class addPriceAlertThrift_argsStandardScheme extends StandardScheme<addPriceAlertThrift_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPriceAlertThrift_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ALERT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.alert = new PriceAlertThrift();
                struct.alert.read(iprot);
                struct.setAlertIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPriceAlertThrift_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.alert != null) {
          oprot.writeFieldBegin(ALERT_FIELD_DESC);
          struct.alert.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPriceAlertThrift_argsTupleSchemeFactory implements SchemeFactory {
      public addPriceAlertThrift_argsTupleScheme getScheme() {
        return new addPriceAlertThrift_argsTupleScheme();
      }
    }

    private static class addPriceAlertThrift_argsTupleScheme extends TupleScheme<addPriceAlertThrift_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPriceAlertThrift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAlert()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAlert()) {
          struct.alert.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPriceAlertThrift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.alert = new PriceAlertThrift();
          struct.alert.read(iprot);
          struct.setAlertIsSet(true);
        }
      }
    }

  }

  public static class addPriceAlertThrift_result implements org.apache.thrift.TBase<addPriceAlertThrift_result, addPriceAlertThrift_result._Fields>, java.io.Serializable, Cloneable, Comparable<addPriceAlertThrift_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPriceAlertThrift_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPriceAlertThrift_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPriceAlertThrift_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public PriceAlertException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPriceAlertThrift_result.class, metaDataMap);
    }

    public addPriceAlertThrift_result() {
    }

    public addPriceAlertThrift_result(
      boolean success,
      PriceAlertException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPriceAlertThrift_result(addPriceAlertThrift_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new PriceAlertException(other.e);
      }
    }

    public addPriceAlertThrift_result deepCopy() {
      return new addPriceAlertThrift_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addPriceAlertThrift_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public PriceAlertException getE() {
      return this.e;
    }

    public addPriceAlertThrift_result setE(PriceAlertException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((PriceAlertException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPriceAlertThrift_result)
        return this.equals((addPriceAlertThrift_result)that);
      return false;
    }

    public boolean equals(addPriceAlertThrift_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addPriceAlertThrift_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPriceAlertThrift_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPriceAlertThrift_resultStandardSchemeFactory implements SchemeFactory {
      public addPriceAlertThrift_resultStandardScheme getScheme() {
        return new addPriceAlertThrift_resultStandardScheme();
      }
    }

    private static class addPriceAlertThrift_resultStandardScheme extends StandardScheme<addPriceAlertThrift_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPriceAlertThrift_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new PriceAlertException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPriceAlertThrift_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPriceAlertThrift_resultTupleSchemeFactory implements SchemeFactory {
      public addPriceAlertThrift_resultTupleScheme getScheme() {
        return new addPriceAlertThrift_resultTupleScheme();
      }
    }

    private static class addPriceAlertThrift_resultTupleScheme extends TupleScheme<addPriceAlertThrift_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPriceAlertThrift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPriceAlertThrift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new PriceAlertException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updatePriceAlertThrift_args implements org.apache.thrift.TBase<updatePriceAlertThrift_args, updatePriceAlertThrift_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatePriceAlertThrift_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePriceAlertThrift_args");

    private static final org.apache.thrift.protocol.TField ALERT_FIELD_DESC = new org.apache.thrift.protocol.TField("alert", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePriceAlertThrift_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePriceAlertThrift_argsTupleSchemeFactory());
    }

    public PriceAlertThrift alert; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ALERT((short)1, "alert");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ALERT
            return ALERT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ALERT, new org.apache.thrift.meta_data.FieldMetaData("alert", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PriceAlertThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePriceAlertThrift_args.class, metaDataMap);
    }

    public updatePriceAlertThrift_args() {
    }

    public updatePriceAlertThrift_args(
      PriceAlertThrift alert)
    {
      this();
      this.alert = alert;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePriceAlertThrift_args(updatePriceAlertThrift_args other) {
      if (other.isSetAlert()) {
        this.alert = new PriceAlertThrift(other.alert);
      }
    }

    public updatePriceAlertThrift_args deepCopy() {
      return new updatePriceAlertThrift_args(this);
    }

    @Override
    public void clear() {
      this.alert = null;
    }

    public PriceAlertThrift getAlert() {
      return this.alert;
    }

    public updatePriceAlertThrift_args setAlert(PriceAlertThrift alert) {
      this.alert = alert;
      return this;
    }

    public void unsetAlert() {
      this.alert = null;
    }

    /** Returns true if field alert is set (has been assigned a value) and false otherwise */
    public boolean isSetAlert() {
      return this.alert != null;
    }

    public void setAlertIsSet(boolean value) {
      if (!value) {
        this.alert = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ALERT:
        if (value == null) {
          unsetAlert();
        } else {
          setAlert((PriceAlertThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ALERT:
        return getAlert();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ALERT:
        return isSetAlert();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePriceAlertThrift_args)
        return this.equals((updatePriceAlertThrift_args)that);
      return false;
    }

    public boolean equals(updatePriceAlertThrift_args that) {
      if (that == null)
        return false;

      boolean this_present_alert = true && this.isSetAlert();
      boolean that_present_alert = true && that.isSetAlert();
      if (this_present_alert || that_present_alert) {
        if (!(this_present_alert && that_present_alert))
          return false;
        if (!this.alert.equals(that.alert))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updatePriceAlertThrift_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAlert()).compareTo(other.isSetAlert());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlert()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alert, other.alert);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePriceAlertThrift_args(");
      boolean first = true;

      sb.append("alert:");
      if (this.alert == null) {
        sb.append("null");
      } else {
        sb.append(this.alert);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (alert != null) {
        alert.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePriceAlertThrift_argsStandardSchemeFactory implements SchemeFactory {
      public updatePriceAlertThrift_argsStandardScheme getScheme() {
        return new updatePriceAlertThrift_argsStandardScheme();
      }
    }

    private static class updatePriceAlertThrift_argsStandardScheme extends StandardScheme<updatePriceAlertThrift_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePriceAlertThrift_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ALERT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.alert = new PriceAlertThrift();
                struct.alert.read(iprot);
                struct.setAlertIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePriceAlertThrift_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.alert != null) {
          oprot.writeFieldBegin(ALERT_FIELD_DESC);
          struct.alert.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePriceAlertThrift_argsTupleSchemeFactory implements SchemeFactory {
      public updatePriceAlertThrift_argsTupleScheme getScheme() {
        return new updatePriceAlertThrift_argsTupleScheme();
      }
    }

    private static class updatePriceAlertThrift_argsTupleScheme extends TupleScheme<updatePriceAlertThrift_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePriceAlertThrift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAlert()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAlert()) {
          struct.alert.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePriceAlertThrift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.alert = new PriceAlertThrift();
          struct.alert.read(iprot);
          struct.setAlertIsSet(true);
        }
      }
    }

  }

  public static class updatePriceAlertThrift_result implements org.apache.thrift.TBase<updatePriceAlertThrift_result, updatePriceAlertThrift_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatePriceAlertThrift_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePriceAlertThrift_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePriceAlertThrift_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePriceAlertThrift_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public PriceAlertException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePriceAlertThrift_result.class, metaDataMap);
    }

    public updatePriceAlertThrift_result() {
    }

    public updatePriceAlertThrift_result(
      boolean success,
      PriceAlertException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePriceAlertThrift_result(updatePriceAlertThrift_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new PriceAlertException(other.e);
      }
    }

    public updatePriceAlertThrift_result deepCopy() {
      return new updatePriceAlertThrift_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updatePriceAlertThrift_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public PriceAlertException getE() {
      return this.e;
    }

    public updatePriceAlertThrift_result setE(PriceAlertException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((PriceAlertException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePriceAlertThrift_result)
        return this.equals((updatePriceAlertThrift_result)that);
      return false;
    }

    public boolean equals(updatePriceAlertThrift_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updatePriceAlertThrift_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePriceAlertThrift_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePriceAlertThrift_resultStandardSchemeFactory implements SchemeFactory {
      public updatePriceAlertThrift_resultStandardScheme getScheme() {
        return new updatePriceAlertThrift_resultStandardScheme();
      }
    }

    private static class updatePriceAlertThrift_resultStandardScheme extends StandardScheme<updatePriceAlertThrift_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePriceAlertThrift_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new PriceAlertException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePriceAlertThrift_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePriceAlertThrift_resultTupleSchemeFactory implements SchemeFactory {
      public updatePriceAlertThrift_resultTupleScheme getScheme() {
        return new updatePriceAlertThrift_resultTupleScheme();
      }
    }

    private static class updatePriceAlertThrift_resultTupleScheme extends TupleScheme<updatePriceAlertThrift_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePriceAlertThrift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePriceAlertThrift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new PriceAlertException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class removePriceAlertThrift_args implements org.apache.thrift.TBase<removePriceAlertThrift_args, removePriceAlertThrift_args._Fields>, java.io.Serializable, Cloneable, Comparable<removePriceAlertThrift_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removePriceAlertThrift_args");

    private static final org.apache.thrift.protocol.TField ALERT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("alertId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removePriceAlertThrift_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removePriceAlertThrift_argsTupleSchemeFactory());
    }

    public int alertId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ALERT_ID((short)1, "alertId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ALERT_ID
            return ALERT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ALERTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ALERT_ID, new org.apache.thrift.meta_data.FieldMetaData("alertId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removePriceAlertThrift_args.class, metaDataMap);
    }

    public removePriceAlertThrift_args() {
    }

    public removePriceAlertThrift_args(
      int alertId)
    {
      this();
      this.alertId = alertId;
      setAlertIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removePriceAlertThrift_args(removePriceAlertThrift_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.alertId = other.alertId;
    }

    public removePriceAlertThrift_args deepCopy() {
      return new removePriceAlertThrift_args(this);
    }

    @Override
    public void clear() {
      setAlertIdIsSet(false);
      this.alertId = 0;
    }

    public int getAlertId() {
      return this.alertId;
    }

    public removePriceAlertThrift_args setAlertId(int alertId) {
      this.alertId = alertId;
      setAlertIdIsSet(true);
      return this;
    }

    public void unsetAlertId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALERTID_ISSET_ID);
    }

    /** Returns true if field alertId is set (has been assigned a value) and false otherwise */
    public boolean isSetAlertId() {
      return EncodingUtils.testBit(__isset_bitfield, __ALERTID_ISSET_ID);
    }

    public void setAlertIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALERTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ALERT_ID:
        if (value == null) {
          unsetAlertId();
        } else {
          setAlertId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ALERT_ID:
        return Integer.valueOf(getAlertId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ALERT_ID:
        return isSetAlertId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removePriceAlertThrift_args)
        return this.equals((removePriceAlertThrift_args)that);
      return false;
    }

    public boolean equals(removePriceAlertThrift_args that) {
      if (that == null)
        return false;

      boolean this_present_alertId = true;
      boolean that_present_alertId = true;
      if (this_present_alertId || that_present_alertId) {
        if (!(this_present_alertId && that_present_alertId))
          return false;
        if (this.alertId != that.alertId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removePriceAlertThrift_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAlertId()).compareTo(other.isSetAlertId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlertId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alertId, other.alertId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removePriceAlertThrift_args(");
      boolean first = true;

      sb.append("alertId:");
      sb.append(this.alertId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removePriceAlertThrift_argsStandardSchemeFactory implements SchemeFactory {
      public removePriceAlertThrift_argsStandardScheme getScheme() {
        return new removePriceAlertThrift_argsStandardScheme();
      }
    }

    private static class removePriceAlertThrift_argsStandardScheme extends StandardScheme<removePriceAlertThrift_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removePriceAlertThrift_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ALERT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.alertId = iprot.readI32();
                struct.setAlertIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removePriceAlertThrift_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ALERT_ID_FIELD_DESC);
        oprot.writeI32(struct.alertId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removePriceAlertThrift_argsTupleSchemeFactory implements SchemeFactory {
      public removePriceAlertThrift_argsTupleScheme getScheme() {
        return new removePriceAlertThrift_argsTupleScheme();
      }
    }

    private static class removePriceAlertThrift_argsTupleScheme extends TupleScheme<removePriceAlertThrift_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removePriceAlertThrift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAlertId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAlertId()) {
          oprot.writeI32(struct.alertId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removePriceAlertThrift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.alertId = iprot.readI32();
          struct.setAlertIdIsSet(true);
        }
      }
    }

  }

  public static class removePriceAlertThrift_result implements org.apache.thrift.TBase<removePriceAlertThrift_result, removePriceAlertThrift_result._Fields>, java.io.Serializable, Cloneable, Comparable<removePriceAlertThrift_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removePriceAlertThrift_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removePriceAlertThrift_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removePriceAlertThrift_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public PriceAlertException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removePriceAlertThrift_result.class, metaDataMap);
    }

    public removePriceAlertThrift_result() {
    }

    public removePriceAlertThrift_result(
      boolean success,
      PriceAlertException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removePriceAlertThrift_result(removePriceAlertThrift_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new PriceAlertException(other.e);
      }
    }

    public removePriceAlertThrift_result deepCopy() {
      return new removePriceAlertThrift_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public removePriceAlertThrift_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public PriceAlertException getE() {
      return this.e;
    }

    public removePriceAlertThrift_result setE(PriceAlertException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((PriceAlertException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removePriceAlertThrift_result)
        return this.equals((removePriceAlertThrift_result)that);
      return false;
    }

    public boolean equals(removePriceAlertThrift_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removePriceAlertThrift_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removePriceAlertThrift_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removePriceAlertThrift_resultStandardSchemeFactory implements SchemeFactory {
      public removePriceAlertThrift_resultStandardScheme getScheme() {
        return new removePriceAlertThrift_resultStandardScheme();
      }
    }

    private static class removePriceAlertThrift_resultStandardScheme extends StandardScheme<removePriceAlertThrift_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removePriceAlertThrift_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new PriceAlertException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removePriceAlertThrift_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removePriceAlertThrift_resultTupleSchemeFactory implements SchemeFactory {
      public removePriceAlertThrift_resultTupleScheme getScheme() {
        return new removePriceAlertThrift_resultTupleScheme();
      }
    }

    private static class removePriceAlertThrift_resultTupleScheme extends TupleScheme<removePriceAlertThrift_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removePriceAlertThrift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removePriceAlertThrift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new PriceAlertException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getPriceAlertThrift_args implements org.apache.thrift.TBase<getPriceAlertThrift_args, getPriceAlertThrift_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPriceAlertThrift_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPriceAlertThrift_args");

    private static final org.apache.thrift.protocol.TField EMAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("emailId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPriceAlertThrift_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPriceAlertThrift_argsTupleSchemeFactory());
    }

    public String emailId; // required
    public int productId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMAIL_ID((short)1, "emailId"),
      PRODUCT_ID((short)2, "productId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL_ID
            return EMAIL_ID;
          case 2: // PRODUCT_ID
            return PRODUCT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRODUCTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("emailId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPriceAlertThrift_args.class, metaDataMap);
    }

    public getPriceAlertThrift_args() {
    }

    public getPriceAlertThrift_args(
      String emailId,
      int productId)
    {
      this();
      this.emailId = emailId;
      this.productId = productId;
      setProductIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPriceAlertThrift_args(getPriceAlertThrift_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEmailId()) {
        this.emailId = other.emailId;
      }
      this.productId = other.productId;
    }

    public getPriceAlertThrift_args deepCopy() {
      return new getPriceAlertThrift_args(this);
    }

    @Override
    public void clear() {
      this.emailId = null;
      setProductIdIsSet(false);
      this.productId = 0;
    }

    public String getEmailId() {
      return this.emailId;
    }

    public getPriceAlertThrift_args setEmailId(String emailId) {
      this.emailId = emailId;
      return this;
    }

    public void unsetEmailId() {
      this.emailId = null;
    }

    /** Returns true if field emailId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmailId() {
      return this.emailId != null;
    }

    public void setEmailIdIsSet(boolean value) {
      if (!value) {
        this.emailId = null;
      }
    }

    public int getProductId() {
      return this.productId;
    }

    public getPriceAlertThrift_args setProductId(int productId) {
      this.productId = productId;
      setProductIdIsSet(true);
      return this;
    }

    public void unsetProductId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
    }

    public void setProductIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAIL_ID:
        if (value == null) {
          unsetEmailId();
        } else {
          setEmailId((String)value);
        }
        break;

      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL_ID:
        return getEmailId();

      case PRODUCT_ID:
        return Integer.valueOf(getProductId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAIL_ID:
        return isSetEmailId();
      case PRODUCT_ID:
        return isSetProductId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPriceAlertThrift_args)
        return this.equals((getPriceAlertThrift_args)that);
      return false;
    }

    public boolean equals(getPriceAlertThrift_args that) {
      if (that == null)
        return false;

      boolean this_present_emailId = true && this.isSetEmailId();
      boolean that_present_emailId = true && that.isSetEmailId();
      if (this_present_emailId || that_present_emailId) {
        if (!(this_present_emailId && that_present_emailId))
          return false;
        if (!this.emailId.equals(that.emailId))
          return false;
      }

      boolean this_present_productId = true;
      boolean that_present_productId = true;
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (this.productId != that.productId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPriceAlertThrift_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEmailId()).compareTo(other.isSetEmailId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmailId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailId, other.emailId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPriceAlertThrift_args(");
      boolean first = true;

      sb.append("emailId:");
      if (this.emailId == null) {
        sb.append("null");
      } else {
        sb.append(this.emailId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productId:");
      sb.append(this.productId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPriceAlertThrift_argsStandardSchemeFactory implements SchemeFactory {
      public getPriceAlertThrift_argsStandardScheme getScheme() {
        return new getPriceAlertThrift_argsStandardScheme();
      }
    }

    private static class getPriceAlertThrift_argsStandardScheme extends StandardScheme<getPriceAlertThrift_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPriceAlertThrift_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMAIL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.emailId = iprot.readString();
                struct.setEmailIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.productId = iprot.readI32();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPriceAlertThrift_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.emailId != null) {
          oprot.writeFieldBegin(EMAIL_ID_FIELD_DESC);
          oprot.writeString(struct.emailId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeI32(struct.productId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPriceAlertThrift_argsTupleSchemeFactory implements SchemeFactory {
      public getPriceAlertThrift_argsTupleScheme getScheme() {
        return new getPriceAlertThrift_argsTupleScheme();
      }
    }

    private static class getPriceAlertThrift_argsTupleScheme extends TupleScheme<getPriceAlertThrift_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPriceAlertThrift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmailId()) {
          optionals.set(0);
        }
        if (struct.isSetProductId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEmailId()) {
          oprot.writeString(struct.emailId);
        }
        if (struct.isSetProductId()) {
          oprot.writeI32(struct.productId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPriceAlertThrift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.emailId = iprot.readString();
          struct.setEmailIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productId = iprot.readI32();
          struct.setProductIdIsSet(true);
        }
      }
    }

  }

  public static class getPriceAlertThrift_result implements org.apache.thrift.TBase<getPriceAlertThrift_result, getPriceAlertThrift_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPriceAlertThrift_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPriceAlertThrift_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPriceAlertThrift_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPriceAlertThrift_resultTupleSchemeFactory());
    }

    public PriceAlertThrift success; // required
    public PriceAlertException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PriceAlertThrift.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPriceAlertThrift_result.class, metaDataMap);
    }

    public getPriceAlertThrift_result() {
    }

    public getPriceAlertThrift_result(
      PriceAlertThrift success,
      PriceAlertException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPriceAlertThrift_result(getPriceAlertThrift_result other) {
      if (other.isSetSuccess()) {
        this.success = new PriceAlertThrift(other.success);
      }
      if (other.isSetE()) {
        this.e = new PriceAlertException(other.e);
      }
    }

    public getPriceAlertThrift_result deepCopy() {
      return new getPriceAlertThrift_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public PriceAlertThrift getSuccess() {
      return this.success;
    }

    public getPriceAlertThrift_result setSuccess(PriceAlertThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public PriceAlertException getE() {
      return this.e;
    }

    public getPriceAlertThrift_result setE(PriceAlertException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PriceAlertThrift)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((PriceAlertException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPriceAlertThrift_result)
        return this.equals((getPriceAlertThrift_result)that);
      return false;
    }

    public boolean equals(getPriceAlertThrift_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPriceAlertThrift_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPriceAlertThrift_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPriceAlertThrift_resultStandardSchemeFactory implements SchemeFactory {
      public getPriceAlertThrift_resultStandardScheme getScheme() {
        return new getPriceAlertThrift_resultStandardScheme();
      }
    }

    private static class getPriceAlertThrift_resultStandardScheme extends StandardScheme<getPriceAlertThrift_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPriceAlertThrift_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PriceAlertThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new PriceAlertException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPriceAlertThrift_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPriceAlertThrift_resultTupleSchemeFactory implements SchemeFactory {
      public getPriceAlertThrift_resultTupleScheme getScheme() {
        return new getPriceAlertThrift_resultTupleScheme();
      }
    }

    private static class getPriceAlertThrift_resultTupleScheme extends TupleScheme<getPriceAlertThrift_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPriceAlertThrift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPriceAlertThrift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PriceAlertThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new PriceAlertException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getPriceAlerts_args implements org.apache.thrift.TBase<getPriceAlerts_args, getPriceAlerts_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPriceAlerts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPriceAlerts_args");

    private static final org.apache.thrift.protocol.TField EMAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("emailId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPriceAlerts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPriceAlerts_argsTupleSchemeFactory());
    }

    public String emailId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMAIL_ID((short)1, "emailId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL_ID
            return EMAIL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("emailId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPriceAlerts_args.class, metaDataMap);
    }

    public getPriceAlerts_args() {
    }

    public getPriceAlerts_args(
      String emailId)
    {
      this();
      this.emailId = emailId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPriceAlerts_args(getPriceAlerts_args other) {
      if (other.isSetEmailId()) {
        this.emailId = other.emailId;
      }
    }

    public getPriceAlerts_args deepCopy() {
      return new getPriceAlerts_args(this);
    }

    @Override
    public void clear() {
      this.emailId = null;
    }

    public String getEmailId() {
      return this.emailId;
    }

    public getPriceAlerts_args setEmailId(String emailId) {
      this.emailId = emailId;
      return this;
    }

    public void unsetEmailId() {
      this.emailId = null;
    }

    /** Returns true if field emailId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmailId() {
      return this.emailId != null;
    }

    public void setEmailIdIsSet(boolean value) {
      if (!value) {
        this.emailId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAIL_ID:
        if (value == null) {
          unsetEmailId();
        } else {
          setEmailId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL_ID:
        return getEmailId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAIL_ID:
        return isSetEmailId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPriceAlerts_args)
        return this.equals((getPriceAlerts_args)that);
      return false;
    }

    public boolean equals(getPriceAlerts_args that) {
      if (that == null)
        return false;

      boolean this_present_emailId = true && this.isSetEmailId();
      boolean that_present_emailId = true && that.isSetEmailId();
      if (this_present_emailId || that_present_emailId) {
        if (!(this_present_emailId && that_present_emailId))
          return false;
        if (!this.emailId.equals(that.emailId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPriceAlerts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEmailId()).compareTo(other.isSetEmailId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmailId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailId, other.emailId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPriceAlerts_args(");
      boolean first = true;

      sb.append("emailId:");
      if (this.emailId == null) {
        sb.append("null");
      } else {
        sb.append(this.emailId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPriceAlerts_argsStandardSchemeFactory implements SchemeFactory {
      public getPriceAlerts_argsStandardScheme getScheme() {
        return new getPriceAlerts_argsStandardScheme();
      }
    }

    private static class getPriceAlerts_argsStandardScheme extends StandardScheme<getPriceAlerts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPriceAlerts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMAIL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.emailId = iprot.readString();
                struct.setEmailIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPriceAlerts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.emailId != null) {
          oprot.writeFieldBegin(EMAIL_ID_FIELD_DESC);
          oprot.writeString(struct.emailId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPriceAlerts_argsTupleSchemeFactory implements SchemeFactory {
      public getPriceAlerts_argsTupleScheme getScheme() {
        return new getPriceAlerts_argsTupleScheme();
      }
    }

    private static class getPriceAlerts_argsTupleScheme extends TupleScheme<getPriceAlerts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPriceAlerts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmailId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmailId()) {
          oprot.writeString(struct.emailId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPriceAlerts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.emailId = iprot.readString();
          struct.setEmailIdIsSet(true);
        }
      }
    }

  }

  public static class getPriceAlerts_result implements org.apache.thrift.TBase<getPriceAlerts_result, getPriceAlerts_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPriceAlerts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPriceAlerts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPriceAlerts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPriceAlerts_resultTupleSchemeFactory());
    }

    public List<PriceAlertThrift> success; // required
    public PriceAlertException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PriceAlertThrift.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPriceAlerts_result.class, metaDataMap);
    }

    public getPriceAlerts_result() {
    }

    public getPriceAlerts_result(
      List<PriceAlertThrift> success,
      PriceAlertException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPriceAlerts_result(getPriceAlerts_result other) {
      if (other.isSetSuccess()) {
        List<PriceAlertThrift> __this__success = new ArrayList<PriceAlertThrift>(other.success.size());
        for (PriceAlertThrift other_element : other.success) {
          __this__success.add(new PriceAlertThrift(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new PriceAlertException(other.e);
      }
    }

    public getPriceAlerts_result deepCopy() {
      return new getPriceAlerts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<PriceAlertThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PriceAlertThrift elem) {
      if (this.success == null) {
        this.success = new ArrayList<PriceAlertThrift>();
      }
      this.success.add(elem);
    }

    public List<PriceAlertThrift> getSuccess() {
      return this.success;
    }

    public getPriceAlerts_result setSuccess(List<PriceAlertThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public PriceAlertException getE() {
      return this.e;
    }

    public getPriceAlerts_result setE(PriceAlertException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<PriceAlertThrift>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((PriceAlertException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPriceAlerts_result)
        return this.equals((getPriceAlerts_result)that);
      return false;
    }

    public boolean equals(getPriceAlerts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPriceAlerts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPriceAlerts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPriceAlerts_resultStandardSchemeFactory implements SchemeFactory {
      public getPriceAlerts_resultStandardScheme getScheme() {
        return new getPriceAlerts_resultStandardScheme();
      }
    }

    private static class getPriceAlerts_resultStandardScheme extends StandardScheme<getPriceAlerts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPriceAlerts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<PriceAlertThrift>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    PriceAlertThrift _elem2;
                    _elem2 = new PriceAlertThrift();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new PriceAlertException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPriceAlerts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (PriceAlertThrift _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPriceAlerts_resultTupleSchemeFactory implements SchemeFactory {
      public getPriceAlerts_resultTupleScheme getScheme() {
        return new getPriceAlerts_resultTupleScheme();
      }
    }

    private static class getPriceAlerts_resultTupleScheme extends TupleScheme<getPriceAlerts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPriceAlerts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PriceAlertThrift _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPriceAlerts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<PriceAlertThrift>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              PriceAlertThrift _elem7;
              _elem7 = new PriceAlertThrift();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new PriceAlertException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class verifyPriceAlertThrift_args implements org.apache.thrift.TBase<verifyPriceAlertThrift_args, verifyPriceAlertThrift_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyPriceAlertThrift_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyPriceAlertThrift_args");

    private static final org.apache.thrift.protocol.TField ALERT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("alertId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyPriceAlertThrift_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyPriceAlertThrift_argsTupleSchemeFactory());
    }

    public int alertId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ALERT_ID((short)1, "alertId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ALERT_ID
            return ALERT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ALERTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ALERT_ID, new org.apache.thrift.meta_data.FieldMetaData("alertId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyPriceAlertThrift_args.class, metaDataMap);
    }

    public verifyPriceAlertThrift_args() {
    }

    public verifyPriceAlertThrift_args(
      int alertId)
    {
      this();
      this.alertId = alertId;
      setAlertIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyPriceAlertThrift_args(verifyPriceAlertThrift_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.alertId = other.alertId;
    }

    public verifyPriceAlertThrift_args deepCopy() {
      return new verifyPriceAlertThrift_args(this);
    }

    @Override
    public void clear() {
      setAlertIdIsSet(false);
      this.alertId = 0;
    }

    public int getAlertId() {
      return this.alertId;
    }

    public verifyPriceAlertThrift_args setAlertId(int alertId) {
      this.alertId = alertId;
      setAlertIdIsSet(true);
      return this;
    }

    public void unsetAlertId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALERTID_ISSET_ID);
    }

    /** Returns true if field alertId is set (has been assigned a value) and false otherwise */
    public boolean isSetAlertId() {
      return EncodingUtils.testBit(__isset_bitfield, __ALERTID_ISSET_ID);
    }

    public void setAlertIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALERTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ALERT_ID:
        if (value == null) {
          unsetAlertId();
        } else {
          setAlertId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ALERT_ID:
        return Integer.valueOf(getAlertId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ALERT_ID:
        return isSetAlertId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyPriceAlertThrift_args)
        return this.equals((verifyPriceAlertThrift_args)that);
      return false;
    }

    public boolean equals(verifyPriceAlertThrift_args that) {
      if (that == null)
        return false;

      boolean this_present_alertId = true;
      boolean that_present_alertId = true;
      if (this_present_alertId || that_present_alertId) {
        if (!(this_present_alertId && that_present_alertId))
          return false;
        if (this.alertId != that.alertId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(verifyPriceAlertThrift_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAlertId()).compareTo(other.isSetAlertId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlertId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alertId, other.alertId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyPriceAlertThrift_args(");
      boolean first = true;

      sb.append("alertId:");
      sb.append(this.alertId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyPriceAlertThrift_argsStandardSchemeFactory implements SchemeFactory {
      public verifyPriceAlertThrift_argsStandardScheme getScheme() {
        return new verifyPriceAlertThrift_argsStandardScheme();
      }
    }

    private static class verifyPriceAlertThrift_argsStandardScheme extends StandardScheme<verifyPriceAlertThrift_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyPriceAlertThrift_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ALERT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.alertId = iprot.readI32();
                struct.setAlertIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyPriceAlertThrift_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ALERT_ID_FIELD_DESC);
        oprot.writeI32(struct.alertId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyPriceAlertThrift_argsTupleSchemeFactory implements SchemeFactory {
      public verifyPriceAlertThrift_argsTupleScheme getScheme() {
        return new verifyPriceAlertThrift_argsTupleScheme();
      }
    }

    private static class verifyPriceAlertThrift_argsTupleScheme extends TupleScheme<verifyPriceAlertThrift_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyPriceAlertThrift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAlertId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAlertId()) {
          oprot.writeI32(struct.alertId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyPriceAlertThrift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.alertId = iprot.readI32();
          struct.setAlertIdIsSet(true);
        }
      }
    }

  }

  public static class verifyPriceAlertThrift_result implements org.apache.thrift.TBase<verifyPriceAlertThrift_result, verifyPriceAlertThrift_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyPriceAlertThrift_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyPriceAlertThrift_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyPriceAlertThrift_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyPriceAlertThrift_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public PriceAlertException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyPriceAlertThrift_result.class, metaDataMap);
    }

    public verifyPriceAlertThrift_result() {
    }

    public verifyPriceAlertThrift_result(
      boolean success,
      PriceAlertException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyPriceAlertThrift_result(verifyPriceAlertThrift_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new PriceAlertException(other.e);
      }
    }

    public verifyPriceAlertThrift_result deepCopy() {
      return new verifyPriceAlertThrift_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public verifyPriceAlertThrift_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public PriceAlertException getE() {
      return this.e;
    }

    public verifyPriceAlertThrift_result setE(PriceAlertException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((PriceAlertException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyPriceAlertThrift_result)
        return this.equals((verifyPriceAlertThrift_result)that);
      return false;
    }

    public boolean equals(verifyPriceAlertThrift_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(verifyPriceAlertThrift_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyPriceAlertThrift_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyPriceAlertThrift_resultStandardSchemeFactory implements SchemeFactory {
      public verifyPriceAlertThrift_resultStandardScheme getScheme() {
        return new verifyPriceAlertThrift_resultStandardScheme();
      }
    }

    private static class verifyPriceAlertThrift_resultStandardScheme extends StandardScheme<verifyPriceAlertThrift_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyPriceAlertThrift_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new PriceAlertException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyPriceAlertThrift_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyPriceAlertThrift_resultTupleSchemeFactory implements SchemeFactory {
      public verifyPriceAlertThrift_resultTupleScheme getScheme() {
        return new verifyPriceAlertThrift_resultTupleScheme();
      }
    }

    private static class verifyPriceAlertThrift_resultTupleScheme extends TupleScheme<verifyPriceAlertThrift_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyPriceAlertThrift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyPriceAlertThrift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new PriceAlertException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}
