/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.genereated.pricealert;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PriceAlertThrift implements org.apache.thrift.TBase<PriceAlertThrift, PriceAlertThrift._Fields>, java.io.Serializable, Cloneable, Comparable<PriceAlertThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PriceAlertThrift");

  private static final org.apache.thrift.protocol.TField EMAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("emailId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ALERT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("alertId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ALERT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("alertPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField TIME_MODIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("timeModified", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ALERT_CREATION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("alertCreationDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ALERT_EXPIRATION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("alertExpirationDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ALERT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("alertType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ALERT_ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("alertActive", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField RETAILER_FIELD_DESC = new org.apache.thrift.protocol.TField("retailer", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CURR_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("currPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField PURCHASE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("purchasePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField PURCHASE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("purchaseDate", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PriceAlertThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PriceAlertThriftTupleSchemeFactory());
  }

  public String emailId; // required
  public int alertId; // required
  public int productId; // required
  public double alertPrice; // required
  public String timeModified; // optional
  public String alertCreationDate; // optional
  public String alertExpirationDate; // optional
  /**
   * 
   * @see PriceAlertTypeThrift
   */
  public PriceAlertTypeThrift alertType; // required
  public boolean alertActive; // required
  public String retailer; // optional
  public String name; // optional
  public String url; // optional
  public String imageUrl; // optional
  public double currPrice; // required
  public double purchasePrice; // required
  public String purchaseDate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EMAIL_ID((short)1, "emailId"),
    ALERT_ID((short)2, "alertId"),
    PRODUCT_ID((short)3, "productId"),
    ALERT_PRICE((short)4, "alertPrice"),
    TIME_MODIFIED((short)5, "timeModified"),
    ALERT_CREATION_DATE((short)6, "alertCreationDate"),
    ALERT_EXPIRATION_DATE((short)7, "alertExpirationDate"),
    /**
     * 
     * @see PriceAlertTypeThrift
     */
    ALERT_TYPE((short)8, "alertType"),
    ALERT_ACTIVE((short)9, "alertActive"),
    RETAILER((short)10, "retailer"),
    NAME((short)11, "name"),
    URL((short)12, "url"),
    IMAGE_URL((short)13, "imageUrl"),
    CURR_PRICE((short)14, "currPrice"),
    PURCHASE_PRICE((short)15, "purchasePrice"),
    PURCHASE_DATE((short)16, "purchaseDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EMAIL_ID
          return EMAIL_ID;
        case 2: // ALERT_ID
          return ALERT_ID;
        case 3: // PRODUCT_ID
          return PRODUCT_ID;
        case 4: // ALERT_PRICE
          return ALERT_PRICE;
        case 5: // TIME_MODIFIED
          return TIME_MODIFIED;
        case 6: // ALERT_CREATION_DATE
          return ALERT_CREATION_DATE;
        case 7: // ALERT_EXPIRATION_DATE
          return ALERT_EXPIRATION_DATE;
        case 8: // ALERT_TYPE
          return ALERT_TYPE;
        case 9: // ALERT_ACTIVE
          return ALERT_ACTIVE;
        case 10: // RETAILER
          return RETAILER;
        case 11: // NAME
          return NAME;
        case 12: // URL
          return URL;
        case 13: // IMAGE_URL
          return IMAGE_URL;
        case 14: // CURR_PRICE
          return CURR_PRICE;
        case 15: // PURCHASE_PRICE
          return PURCHASE_PRICE;
        case 16: // PURCHASE_DATE
          return PURCHASE_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALERTID_ISSET_ID = 0;
  private static final int __PRODUCTID_ISSET_ID = 1;
  private static final int __ALERTPRICE_ISSET_ID = 2;
  private static final int __ALERTACTIVE_ISSET_ID = 3;
  private static final int __CURRPRICE_ISSET_ID = 4;
  private static final int __PURCHASEPRICE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TIME_MODIFIED,_Fields.ALERT_CREATION_DATE,_Fields.ALERT_EXPIRATION_DATE,_Fields.RETAILER,_Fields.NAME,_Fields.URL,_Fields.IMAGE_URL,_Fields.PURCHASE_DATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EMAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("emailId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALERT_ID, new org.apache.thrift.meta_data.FieldMetaData("alertId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALERT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("alertPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TIME_MODIFIED, new org.apache.thrift.meta_data.FieldMetaData("timeModified", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALERT_CREATION_DATE, new org.apache.thrift.meta_data.FieldMetaData("alertCreationDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALERT_EXPIRATION_DATE, new org.apache.thrift.meta_data.FieldMetaData("alertExpirationDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALERT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("alertType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PriceAlertTypeThrift.class)));
    tmpMap.put(_Fields.ALERT_ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("alertActive", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RETAILER, new org.apache.thrift.meta_data.FieldMetaData("retailer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURR_PRICE, new org.apache.thrift.meta_data.FieldMetaData("currPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PURCHASE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("purchasePrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PURCHASE_DATE, new org.apache.thrift.meta_data.FieldMetaData("purchaseDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PriceAlertThrift.class, metaDataMap);
  }

  public PriceAlertThrift() {
  }

  public PriceAlertThrift(
    String emailId,
    int alertId,
    int productId,
    double alertPrice,
    PriceAlertTypeThrift alertType,
    boolean alertActive,
    double currPrice,
    double purchasePrice)
  {
    this();
    this.emailId = emailId;
    this.alertId = alertId;
    setAlertIdIsSet(true);
    this.productId = productId;
    setProductIdIsSet(true);
    this.alertPrice = alertPrice;
    setAlertPriceIsSet(true);
    this.alertType = alertType;
    this.alertActive = alertActive;
    setAlertActiveIsSet(true);
    this.currPrice = currPrice;
    setCurrPriceIsSet(true);
    this.purchasePrice = purchasePrice;
    setPurchasePriceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PriceAlertThrift(PriceAlertThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetEmailId()) {
      this.emailId = other.emailId;
    }
    this.alertId = other.alertId;
    this.productId = other.productId;
    this.alertPrice = other.alertPrice;
    if (other.isSetTimeModified()) {
      this.timeModified = other.timeModified;
    }
    if (other.isSetAlertCreationDate()) {
      this.alertCreationDate = other.alertCreationDate;
    }
    if (other.isSetAlertExpirationDate()) {
      this.alertExpirationDate = other.alertExpirationDate;
    }
    if (other.isSetAlertType()) {
      this.alertType = other.alertType;
    }
    this.alertActive = other.alertActive;
    if (other.isSetRetailer()) {
      this.retailer = other.retailer;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetImageUrl()) {
      this.imageUrl = other.imageUrl;
    }
    this.currPrice = other.currPrice;
    this.purchasePrice = other.purchasePrice;
    if (other.isSetPurchaseDate()) {
      this.purchaseDate = other.purchaseDate;
    }
  }

  public PriceAlertThrift deepCopy() {
    return new PriceAlertThrift(this);
  }

  @Override
  public void clear() {
    this.emailId = null;
    setAlertIdIsSet(false);
    this.alertId = 0;
    setProductIdIsSet(false);
    this.productId = 0;
    setAlertPriceIsSet(false);
    this.alertPrice = 0.0;
    this.timeModified = null;
    this.alertCreationDate = null;
    this.alertExpirationDate = null;
    this.alertType = null;
    setAlertActiveIsSet(false);
    this.alertActive = false;
    this.retailer = null;
    this.name = null;
    this.url = null;
    this.imageUrl = null;
    setCurrPriceIsSet(false);
    this.currPrice = 0.0;
    setPurchasePriceIsSet(false);
    this.purchasePrice = 0.0;
    this.purchaseDate = null;
  }

  public String getEmailId() {
    return this.emailId;
  }

  public PriceAlertThrift setEmailId(String emailId) {
    this.emailId = emailId;
    return this;
  }

  public void unsetEmailId() {
    this.emailId = null;
  }

  /** Returns true if field emailId is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailId() {
    return this.emailId != null;
  }

  public void setEmailIdIsSet(boolean value) {
    if (!value) {
      this.emailId = null;
    }
  }

  public int getAlertId() {
    return this.alertId;
  }

  public PriceAlertThrift setAlertId(int alertId) {
    this.alertId = alertId;
    setAlertIdIsSet(true);
    return this;
  }

  public void unsetAlertId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALERTID_ISSET_ID);
  }

  /** Returns true if field alertId is set (has been assigned a value) and false otherwise */
  public boolean isSetAlertId() {
    return EncodingUtils.testBit(__isset_bitfield, __ALERTID_ISSET_ID);
  }

  public void setAlertIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALERTID_ISSET_ID, value);
  }

  public int getProductId() {
    return this.productId;
  }

  public PriceAlertThrift setProductId(int productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
  }

  public double getAlertPrice() {
    return this.alertPrice;
  }

  public PriceAlertThrift setAlertPrice(double alertPrice) {
    this.alertPrice = alertPrice;
    setAlertPriceIsSet(true);
    return this;
  }

  public void unsetAlertPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALERTPRICE_ISSET_ID);
  }

  /** Returns true if field alertPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetAlertPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __ALERTPRICE_ISSET_ID);
  }

  public void setAlertPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALERTPRICE_ISSET_ID, value);
  }

  public String getTimeModified() {
    return this.timeModified;
  }

  public PriceAlertThrift setTimeModified(String timeModified) {
    this.timeModified = timeModified;
    return this;
  }

  public void unsetTimeModified() {
    this.timeModified = null;
  }

  /** Returns true if field timeModified is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeModified() {
    return this.timeModified != null;
  }

  public void setTimeModifiedIsSet(boolean value) {
    if (!value) {
      this.timeModified = null;
    }
  }

  public String getAlertCreationDate() {
    return this.alertCreationDate;
  }

  public PriceAlertThrift setAlertCreationDate(String alertCreationDate) {
    this.alertCreationDate = alertCreationDate;
    return this;
  }

  public void unsetAlertCreationDate() {
    this.alertCreationDate = null;
  }

  /** Returns true if field alertCreationDate is set (has been assigned a value) and false otherwise */
  public boolean isSetAlertCreationDate() {
    return this.alertCreationDate != null;
  }

  public void setAlertCreationDateIsSet(boolean value) {
    if (!value) {
      this.alertCreationDate = null;
    }
  }

  public String getAlertExpirationDate() {
    return this.alertExpirationDate;
  }

  public PriceAlertThrift setAlertExpirationDate(String alertExpirationDate) {
    this.alertExpirationDate = alertExpirationDate;
    return this;
  }

  public void unsetAlertExpirationDate() {
    this.alertExpirationDate = null;
  }

  /** Returns true if field alertExpirationDate is set (has been assigned a value) and false otherwise */
  public boolean isSetAlertExpirationDate() {
    return this.alertExpirationDate != null;
  }

  public void setAlertExpirationDateIsSet(boolean value) {
    if (!value) {
      this.alertExpirationDate = null;
    }
  }

  /**
   * 
   * @see PriceAlertTypeThrift
   */
  public PriceAlertTypeThrift getAlertType() {
    return this.alertType;
  }

  /**
   * 
   * @see PriceAlertTypeThrift
   */
  public PriceAlertThrift setAlertType(PriceAlertTypeThrift alertType) {
    this.alertType = alertType;
    return this;
  }

  public void unsetAlertType() {
    this.alertType = null;
  }

  /** Returns true if field alertType is set (has been assigned a value) and false otherwise */
  public boolean isSetAlertType() {
    return this.alertType != null;
  }

  public void setAlertTypeIsSet(boolean value) {
    if (!value) {
      this.alertType = null;
    }
  }

  public boolean isAlertActive() {
    return this.alertActive;
  }

  public PriceAlertThrift setAlertActive(boolean alertActive) {
    this.alertActive = alertActive;
    setAlertActiveIsSet(true);
    return this;
  }

  public void unsetAlertActive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALERTACTIVE_ISSET_ID);
  }

  /** Returns true if field alertActive is set (has been assigned a value) and false otherwise */
  public boolean isSetAlertActive() {
    return EncodingUtils.testBit(__isset_bitfield, __ALERTACTIVE_ISSET_ID);
  }

  public void setAlertActiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALERTACTIVE_ISSET_ID, value);
  }

  public String getRetailer() {
    return this.retailer;
  }

  public PriceAlertThrift setRetailer(String retailer) {
    this.retailer = retailer;
    return this;
  }

  public void unsetRetailer() {
    this.retailer = null;
  }

  /** Returns true if field retailer is set (has been assigned a value) and false otherwise */
  public boolean isSetRetailer() {
    return this.retailer != null;
  }

  public void setRetailerIsSet(boolean value) {
    if (!value) {
      this.retailer = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public PriceAlertThrift setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public PriceAlertThrift setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getImageUrl() {
    return this.imageUrl;
  }

  public PriceAlertThrift setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  public void unsetImageUrl() {
    this.imageUrl = null;
  }

  /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetImageUrl() {
    return this.imageUrl != null;
  }

  public void setImageUrlIsSet(boolean value) {
    if (!value) {
      this.imageUrl = null;
    }
  }

  public double getCurrPrice() {
    return this.currPrice;
  }

  public PriceAlertThrift setCurrPrice(double currPrice) {
    this.currPrice = currPrice;
    setCurrPriceIsSet(true);
    return this;
  }

  public void unsetCurrPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRPRICE_ISSET_ID);
  }

  /** Returns true if field currPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRPRICE_ISSET_ID);
  }

  public void setCurrPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRPRICE_ISSET_ID, value);
  }

  public double getPurchasePrice() {
    return this.purchasePrice;
  }

  public PriceAlertThrift setPurchasePrice(double purchasePrice) {
    this.purchasePrice = purchasePrice;
    setPurchasePriceIsSet(true);
    return this;
  }

  public void unsetPurchasePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PURCHASEPRICE_ISSET_ID);
  }

  /** Returns true if field purchasePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetPurchasePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PURCHASEPRICE_ISSET_ID);
  }

  public void setPurchasePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PURCHASEPRICE_ISSET_ID, value);
  }

  public String getPurchaseDate() {
    return this.purchaseDate;
  }

  public PriceAlertThrift setPurchaseDate(String purchaseDate) {
    this.purchaseDate = purchaseDate;
    return this;
  }

  public void unsetPurchaseDate() {
    this.purchaseDate = null;
  }

  /** Returns true if field purchaseDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPurchaseDate() {
    return this.purchaseDate != null;
  }

  public void setPurchaseDateIsSet(boolean value) {
    if (!value) {
      this.purchaseDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EMAIL_ID:
      if (value == null) {
        unsetEmailId();
      } else {
        setEmailId((String)value);
      }
      break;

    case ALERT_ID:
      if (value == null) {
        unsetAlertId();
      } else {
        setAlertId((Integer)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Integer)value);
      }
      break;

    case ALERT_PRICE:
      if (value == null) {
        unsetAlertPrice();
      } else {
        setAlertPrice((Double)value);
      }
      break;

    case TIME_MODIFIED:
      if (value == null) {
        unsetTimeModified();
      } else {
        setTimeModified((String)value);
      }
      break;

    case ALERT_CREATION_DATE:
      if (value == null) {
        unsetAlertCreationDate();
      } else {
        setAlertCreationDate((String)value);
      }
      break;

    case ALERT_EXPIRATION_DATE:
      if (value == null) {
        unsetAlertExpirationDate();
      } else {
        setAlertExpirationDate((String)value);
      }
      break;

    case ALERT_TYPE:
      if (value == null) {
        unsetAlertType();
      } else {
        setAlertType((PriceAlertTypeThrift)value);
      }
      break;

    case ALERT_ACTIVE:
      if (value == null) {
        unsetAlertActive();
      } else {
        setAlertActive((Boolean)value);
      }
      break;

    case RETAILER:
      if (value == null) {
        unsetRetailer();
      } else {
        setRetailer((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case IMAGE_URL:
      if (value == null) {
        unsetImageUrl();
      } else {
        setImageUrl((String)value);
      }
      break;

    case CURR_PRICE:
      if (value == null) {
        unsetCurrPrice();
      } else {
        setCurrPrice((Double)value);
      }
      break;

    case PURCHASE_PRICE:
      if (value == null) {
        unsetPurchasePrice();
      } else {
        setPurchasePrice((Double)value);
      }
      break;

    case PURCHASE_DATE:
      if (value == null) {
        unsetPurchaseDate();
      } else {
        setPurchaseDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EMAIL_ID:
      return getEmailId();

    case ALERT_ID:
      return Integer.valueOf(getAlertId());

    case PRODUCT_ID:
      return Integer.valueOf(getProductId());

    case ALERT_PRICE:
      return Double.valueOf(getAlertPrice());

    case TIME_MODIFIED:
      return getTimeModified();

    case ALERT_CREATION_DATE:
      return getAlertCreationDate();

    case ALERT_EXPIRATION_DATE:
      return getAlertExpirationDate();

    case ALERT_TYPE:
      return getAlertType();

    case ALERT_ACTIVE:
      return Boolean.valueOf(isAlertActive());

    case RETAILER:
      return getRetailer();

    case NAME:
      return getName();

    case URL:
      return getUrl();

    case IMAGE_URL:
      return getImageUrl();

    case CURR_PRICE:
      return Double.valueOf(getCurrPrice());

    case PURCHASE_PRICE:
      return Double.valueOf(getPurchasePrice());

    case PURCHASE_DATE:
      return getPurchaseDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EMAIL_ID:
      return isSetEmailId();
    case ALERT_ID:
      return isSetAlertId();
    case PRODUCT_ID:
      return isSetProductId();
    case ALERT_PRICE:
      return isSetAlertPrice();
    case TIME_MODIFIED:
      return isSetTimeModified();
    case ALERT_CREATION_DATE:
      return isSetAlertCreationDate();
    case ALERT_EXPIRATION_DATE:
      return isSetAlertExpirationDate();
    case ALERT_TYPE:
      return isSetAlertType();
    case ALERT_ACTIVE:
      return isSetAlertActive();
    case RETAILER:
      return isSetRetailer();
    case NAME:
      return isSetName();
    case URL:
      return isSetUrl();
    case IMAGE_URL:
      return isSetImageUrl();
    case CURR_PRICE:
      return isSetCurrPrice();
    case PURCHASE_PRICE:
      return isSetPurchasePrice();
    case PURCHASE_DATE:
      return isSetPurchaseDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PriceAlertThrift)
      return this.equals((PriceAlertThrift)that);
    return false;
  }

  public boolean equals(PriceAlertThrift that) {
    if (that == null)
      return false;

    boolean this_present_emailId = true && this.isSetEmailId();
    boolean that_present_emailId = true && that.isSetEmailId();
    if (this_present_emailId || that_present_emailId) {
      if (!(this_present_emailId && that_present_emailId))
        return false;
      if (!this.emailId.equals(that.emailId))
        return false;
    }

    boolean this_present_alertId = true;
    boolean that_present_alertId = true;
    if (this_present_alertId || that_present_alertId) {
      if (!(this_present_alertId && that_present_alertId))
        return false;
      if (this.alertId != that.alertId)
        return false;
    }

    boolean this_present_productId = true;
    boolean that_present_productId = true;
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_alertPrice = true;
    boolean that_present_alertPrice = true;
    if (this_present_alertPrice || that_present_alertPrice) {
      if (!(this_present_alertPrice && that_present_alertPrice))
        return false;
      if (this.alertPrice != that.alertPrice)
        return false;
    }

    boolean this_present_timeModified = true && this.isSetTimeModified();
    boolean that_present_timeModified = true && that.isSetTimeModified();
    if (this_present_timeModified || that_present_timeModified) {
      if (!(this_present_timeModified && that_present_timeModified))
        return false;
      if (!this.timeModified.equals(that.timeModified))
        return false;
    }

    boolean this_present_alertCreationDate = true && this.isSetAlertCreationDate();
    boolean that_present_alertCreationDate = true && that.isSetAlertCreationDate();
    if (this_present_alertCreationDate || that_present_alertCreationDate) {
      if (!(this_present_alertCreationDate && that_present_alertCreationDate))
        return false;
      if (!this.alertCreationDate.equals(that.alertCreationDate))
        return false;
    }

    boolean this_present_alertExpirationDate = true && this.isSetAlertExpirationDate();
    boolean that_present_alertExpirationDate = true && that.isSetAlertExpirationDate();
    if (this_present_alertExpirationDate || that_present_alertExpirationDate) {
      if (!(this_present_alertExpirationDate && that_present_alertExpirationDate))
        return false;
      if (!this.alertExpirationDate.equals(that.alertExpirationDate))
        return false;
    }

    boolean this_present_alertType = true && this.isSetAlertType();
    boolean that_present_alertType = true && that.isSetAlertType();
    if (this_present_alertType || that_present_alertType) {
      if (!(this_present_alertType && that_present_alertType))
        return false;
      if (!this.alertType.equals(that.alertType))
        return false;
    }

    boolean this_present_alertActive = true;
    boolean that_present_alertActive = true;
    if (this_present_alertActive || that_present_alertActive) {
      if (!(this_present_alertActive && that_present_alertActive))
        return false;
      if (this.alertActive != that.alertActive)
        return false;
    }

    boolean this_present_retailer = true && this.isSetRetailer();
    boolean that_present_retailer = true && that.isSetRetailer();
    if (this_present_retailer || that_present_retailer) {
      if (!(this_present_retailer && that_present_retailer))
        return false;
      if (!this.retailer.equals(that.retailer))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_imageUrl = true && this.isSetImageUrl();
    boolean that_present_imageUrl = true && that.isSetImageUrl();
    if (this_present_imageUrl || that_present_imageUrl) {
      if (!(this_present_imageUrl && that_present_imageUrl))
        return false;
      if (!this.imageUrl.equals(that.imageUrl))
        return false;
    }

    boolean this_present_currPrice = true;
    boolean that_present_currPrice = true;
    if (this_present_currPrice || that_present_currPrice) {
      if (!(this_present_currPrice && that_present_currPrice))
        return false;
      if (this.currPrice != that.currPrice)
        return false;
    }

    boolean this_present_purchasePrice = true;
    boolean that_present_purchasePrice = true;
    if (this_present_purchasePrice || that_present_purchasePrice) {
      if (!(this_present_purchasePrice && that_present_purchasePrice))
        return false;
      if (this.purchasePrice != that.purchasePrice)
        return false;
    }

    boolean this_present_purchaseDate = true && this.isSetPurchaseDate();
    boolean that_present_purchaseDate = true && that.isSetPurchaseDate();
    if (this_present_purchaseDate || that_present_purchaseDate) {
      if (!(this_present_purchaseDate && that_present_purchaseDate))
        return false;
      if (!this.purchaseDate.equals(that.purchaseDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PriceAlertThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEmailId()).compareTo(other.isSetEmailId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailId, other.emailId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlertId()).compareTo(other.isSetAlertId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlertId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alertId, other.alertId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlertPrice()).compareTo(other.isSetAlertPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlertPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alertPrice, other.alertPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeModified()).compareTo(other.isSetTimeModified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeModified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeModified, other.timeModified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlertCreationDate()).compareTo(other.isSetAlertCreationDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlertCreationDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alertCreationDate, other.alertCreationDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlertExpirationDate()).compareTo(other.isSetAlertExpirationDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlertExpirationDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alertExpirationDate, other.alertExpirationDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlertType()).compareTo(other.isSetAlertType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlertType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alertType, other.alertType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlertActive()).compareTo(other.isSetAlertActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlertActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alertActive, other.alertActive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetailer()).compareTo(other.isSetRetailer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetailer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retailer, other.retailer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageUrl()).compareTo(other.isSetImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, other.imageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrPrice()).compareTo(other.isSetCurrPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currPrice, other.currPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPurchasePrice()).compareTo(other.isSetPurchasePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPurchasePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purchasePrice, other.purchasePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPurchaseDate()).compareTo(other.isSetPurchaseDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPurchaseDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purchaseDate, other.purchaseDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PriceAlertThrift(");
    boolean first = true;

    sb.append("emailId:");
    if (this.emailId == null) {
      sb.append("null");
    } else {
      sb.append(this.emailId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alertId:");
    sb.append(this.alertId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    sb.append(this.productId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("alertPrice:");
    sb.append(this.alertPrice);
    first = false;
    if (isSetTimeModified()) {
      if (!first) sb.append(", ");
      sb.append("timeModified:");
      if (this.timeModified == null) {
        sb.append("null");
      } else {
        sb.append(this.timeModified);
      }
      first = false;
    }
    if (isSetAlertCreationDate()) {
      if (!first) sb.append(", ");
      sb.append("alertCreationDate:");
      if (this.alertCreationDate == null) {
        sb.append("null");
      } else {
        sb.append(this.alertCreationDate);
      }
      first = false;
    }
    if (isSetAlertExpirationDate()) {
      if (!first) sb.append(", ");
      sb.append("alertExpirationDate:");
      if (this.alertExpirationDate == null) {
        sb.append("null");
      } else {
        sb.append(this.alertExpirationDate);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("alertType:");
    if (this.alertType == null) {
      sb.append("null");
    } else {
      sb.append(this.alertType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alertActive:");
    sb.append(this.alertActive);
    first = false;
    if (isSetRetailer()) {
      if (!first) sb.append(", ");
      sb.append("retailer:");
      if (this.retailer == null) {
        sb.append("null");
      } else {
        sb.append(this.retailer);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetImageUrl()) {
      if (!first) sb.append(", ");
      sb.append("imageUrl:");
      if (this.imageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("currPrice:");
    sb.append(this.currPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("purchasePrice:");
    sb.append(this.purchasePrice);
    first = false;
    if (isSetPurchaseDate()) {
      if (!first) sb.append(", ");
      sb.append("purchaseDate:");
      if (this.purchaseDate == null) {
        sb.append("null");
      } else {
        sb.append(this.purchaseDate);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (emailId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'emailId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'alertId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'productId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'alertPrice' because it's a primitive and you chose the non-beans generator.
    if (alertType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'alertType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'alertActive' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'currPrice' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'purchasePrice' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PriceAlertThriftStandardSchemeFactory implements SchemeFactory {
    public PriceAlertThriftStandardScheme getScheme() {
      return new PriceAlertThriftStandardScheme();
    }
  }

  private static class PriceAlertThriftStandardScheme extends StandardScheme<PriceAlertThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PriceAlertThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EMAIL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.emailId = iprot.readString();
              struct.setEmailIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ALERT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.alertId = iprot.readI32();
              struct.setAlertIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productId = iprot.readI32();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ALERT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.alertPrice = iprot.readDouble();
              struct.setAlertPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIME_MODIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timeModified = iprot.readString();
              struct.setTimeModifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALERT_CREATION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alertCreationDate = iprot.readString();
              struct.setAlertCreationDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ALERT_EXPIRATION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alertExpirationDate = iprot.readString();
              struct.setAlertExpirationDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ALERT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.alertType = PriceAlertTypeThrift.findByValue(iprot.readI32());
              struct.setAlertTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ALERT_ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.alertActive = iprot.readBool();
              struct.setAlertActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RETAILER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.retailer = iprot.readString();
              struct.setRetailerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageUrl = iprot.readString();
              struct.setImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CURR_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currPrice = iprot.readDouble();
              struct.setCurrPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PURCHASE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.purchasePrice = iprot.readDouble();
              struct.setPurchasePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PURCHASE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.purchaseDate = iprot.readString();
              struct.setPurchaseDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAlertId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'alertId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetProductId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'productId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAlertPrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'alertPrice' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAlertActive()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'alertActive' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCurrPrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'currPrice' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPurchasePrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'purchasePrice' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PriceAlertThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.emailId != null) {
        oprot.writeFieldBegin(EMAIL_ID_FIELD_DESC);
        oprot.writeString(struct.emailId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ALERT_ID_FIELD_DESC);
      oprot.writeI32(struct.alertId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeI32(struct.productId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALERT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.alertPrice);
      oprot.writeFieldEnd();
      if (struct.timeModified != null) {
        if (struct.isSetTimeModified()) {
          oprot.writeFieldBegin(TIME_MODIFIED_FIELD_DESC);
          oprot.writeString(struct.timeModified);
          oprot.writeFieldEnd();
        }
      }
      if (struct.alertCreationDate != null) {
        if (struct.isSetAlertCreationDate()) {
          oprot.writeFieldBegin(ALERT_CREATION_DATE_FIELD_DESC);
          oprot.writeString(struct.alertCreationDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.alertExpirationDate != null) {
        if (struct.isSetAlertExpirationDate()) {
          oprot.writeFieldBegin(ALERT_EXPIRATION_DATE_FIELD_DESC);
          oprot.writeString(struct.alertExpirationDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.alertType != null) {
        oprot.writeFieldBegin(ALERT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.alertType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ALERT_ACTIVE_FIELD_DESC);
      oprot.writeBool(struct.alertActive);
      oprot.writeFieldEnd();
      if (struct.retailer != null) {
        if (struct.isSetRetailer()) {
          oprot.writeFieldBegin(RETAILER_FIELD_DESC);
          oprot.writeString(struct.retailer);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageUrl != null) {
        if (struct.isSetImageUrl()) {
          oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.imageUrl);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(CURR_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.currPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PURCHASE_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.purchasePrice);
      oprot.writeFieldEnd();
      if (struct.purchaseDate != null) {
        if (struct.isSetPurchaseDate()) {
          oprot.writeFieldBegin(PURCHASE_DATE_FIELD_DESC);
          oprot.writeString(struct.purchaseDate);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PriceAlertThriftTupleSchemeFactory implements SchemeFactory {
    public PriceAlertThriftTupleScheme getScheme() {
      return new PriceAlertThriftTupleScheme();
    }
  }

  private static class PriceAlertThriftTupleScheme extends TupleScheme<PriceAlertThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PriceAlertThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.emailId);
      oprot.writeI32(struct.alertId);
      oprot.writeI32(struct.productId);
      oprot.writeDouble(struct.alertPrice);
      oprot.writeI32(struct.alertType.getValue());
      oprot.writeBool(struct.alertActive);
      oprot.writeDouble(struct.currPrice);
      oprot.writeDouble(struct.purchasePrice);
      BitSet optionals = new BitSet();
      if (struct.isSetTimeModified()) {
        optionals.set(0);
      }
      if (struct.isSetAlertCreationDate()) {
        optionals.set(1);
      }
      if (struct.isSetAlertExpirationDate()) {
        optionals.set(2);
      }
      if (struct.isSetRetailer()) {
        optionals.set(3);
      }
      if (struct.isSetName()) {
        optionals.set(4);
      }
      if (struct.isSetUrl()) {
        optionals.set(5);
      }
      if (struct.isSetImageUrl()) {
        optionals.set(6);
      }
      if (struct.isSetPurchaseDate()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetTimeModified()) {
        oprot.writeString(struct.timeModified);
      }
      if (struct.isSetAlertCreationDate()) {
        oprot.writeString(struct.alertCreationDate);
      }
      if (struct.isSetAlertExpirationDate()) {
        oprot.writeString(struct.alertExpirationDate);
      }
      if (struct.isSetRetailer()) {
        oprot.writeString(struct.retailer);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetImageUrl()) {
        oprot.writeString(struct.imageUrl);
      }
      if (struct.isSetPurchaseDate()) {
        oprot.writeString(struct.purchaseDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PriceAlertThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.emailId = iprot.readString();
      struct.setEmailIdIsSet(true);
      struct.alertId = iprot.readI32();
      struct.setAlertIdIsSet(true);
      struct.productId = iprot.readI32();
      struct.setProductIdIsSet(true);
      struct.alertPrice = iprot.readDouble();
      struct.setAlertPriceIsSet(true);
      struct.alertType = PriceAlertTypeThrift.findByValue(iprot.readI32());
      struct.setAlertTypeIsSet(true);
      struct.alertActive = iprot.readBool();
      struct.setAlertActiveIsSet(true);
      struct.currPrice = iprot.readDouble();
      struct.setCurrPriceIsSet(true);
      struct.purchasePrice = iprot.readDouble();
      struct.setPurchasePriceIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.timeModified = iprot.readString();
        struct.setTimeModifiedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.alertCreationDate = iprot.readString();
        struct.setAlertCreationDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.alertExpirationDate = iprot.readString();
        struct.setAlertExpirationDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.retailer = iprot.readString();
        struct.setRetailerIsSet(true);
      }
      if (incoming.get(4)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.imageUrl = iprot.readString();
        struct.setImageUrlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.purchaseDate = iprot.readString();
        struct.setPurchaseDateIsSet(true);
      }
    }
  }

}

