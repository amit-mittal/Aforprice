/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.genereated.retailer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Retailer implements org.apache.thrift.TBase<Retailer, Retailer._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Retailer");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SORTS_SUPPORTED_FIELD_DESC = new org.apache.thrift.protocol.TField("sortsSupported", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField DEFAULT_SORT_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultSort", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RetailerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RetailerTupleSchemeFactory());
  }

  public String id; // required
  public String displayName; // required
  public String url; // required
  public List<SortCriterion> sortsSupported; // required
  /**
   * 
   * @see SortCriterion
   */
  public SortCriterion defaultSort; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DISPLAY_NAME((short)2, "displayName"),
    URL((short)3, "url"),
    SORTS_SUPPORTED((short)4, "sortsSupported"),
    /**
     * 
     * @see SortCriterion
     */
    DEFAULT_SORT((short)5, "defaultSort");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DISPLAY_NAME
          return DISPLAY_NAME;
        case 3: // URL
          return URL;
        case 4: // SORTS_SUPPORTED
          return SORTS_SUPPORTED;
        case 5: // DEFAULT_SORT
          return DEFAULT_SORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("displayName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SORTS_SUPPORTED, new org.apache.thrift.meta_data.FieldMetaData("sortsSupported", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SortCriterion.class))));
    tmpMap.put(_Fields.DEFAULT_SORT, new org.apache.thrift.meta_data.FieldMetaData("defaultSort", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SortCriterion.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Retailer.class, metaDataMap);
  }

  public Retailer() {
  }

  public Retailer(
    String id,
    String displayName,
    String url,
    List<SortCriterion> sortsSupported,
    SortCriterion defaultSort)
  {
    this();
    this.id = id;
    this.displayName = displayName;
    this.url = url;
    this.sortsSupported = sortsSupported;
    this.defaultSort = defaultSort;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Retailer(Retailer other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetDisplayName()) {
      this.displayName = other.displayName;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetSortsSupported()) {
      List<SortCriterion> __this__sortsSupported = new ArrayList<SortCriterion>();
      for (SortCriterion other_element : other.sortsSupported) {
        __this__sortsSupported.add(other_element);
      }
      this.sortsSupported = __this__sortsSupported;
    }
    if (other.isSetDefaultSort()) {
      this.defaultSort = other.defaultSort;
    }
  }

  public Retailer deepCopy() {
    return new Retailer(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.displayName = null;
    this.url = null;
    this.sortsSupported = null;
    this.defaultSort = null;
  }

  public String getId() {
    return this.id;
  }

  public Retailer setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getDisplayName() {
    return this.displayName;
  }

  public Retailer setDisplayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  public void unsetDisplayName() {
    this.displayName = null;
  }

  /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayName() {
    return this.displayName != null;
  }

  public void setDisplayNameIsSet(boolean value) {
    if (!value) {
      this.displayName = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public Retailer setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public int getSortsSupportedSize() {
    return (this.sortsSupported == null) ? 0 : this.sortsSupported.size();
  }

  public java.util.Iterator<SortCriterion> getSortsSupportedIterator() {
    return (this.sortsSupported == null) ? null : this.sortsSupported.iterator();
  }

  public void addToSortsSupported(SortCriterion elem) {
    if (this.sortsSupported == null) {
      this.sortsSupported = new ArrayList<SortCriterion>();
    }
    this.sortsSupported.add(elem);
  }

  public List<SortCriterion> getSortsSupported() {
    return this.sortsSupported;
  }

  public Retailer setSortsSupported(List<SortCriterion> sortsSupported) {
    this.sortsSupported = sortsSupported;
    return this;
  }

  public void unsetSortsSupported() {
    this.sortsSupported = null;
  }

  /** Returns true if field sortsSupported is set (has been assigned a value) and false otherwise */
  public boolean isSetSortsSupported() {
    return this.sortsSupported != null;
  }

  public void setSortsSupportedIsSet(boolean value) {
    if (!value) {
      this.sortsSupported = null;
    }
  }

  /**
   * 
   * @see SortCriterion
   */
  public SortCriterion getDefaultSort() {
    return this.defaultSort;
  }

  /**
   * 
   * @see SortCriterion
   */
  public Retailer setDefaultSort(SortCriterion defaultSort) {
    this.defaultSort = defaultSort;
    return this;
  }

  public void unsetDefaultSort() {
    this.defaultSort = null;
  }

  /** Returns true if field defaultSort is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultSort() {
    return this.defaultSort != null;
  }

  public void setDefaultSortIsSet(boolean value) {
    if (!value) {
      this.defaultSort = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case DISPLAY_NAME:
      if (value == null) {
        unsetDisplayName();
      } else {
        setDisplayName((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case SORTS_SUPPORTED:
      if (value == null) {
        unsetSortsSupported();
      } else {
        setSortsSupported((List<SortCriterion>)value);
      }
      break;

    case DEFAULT_SORT:
      if (value == null) {
        unsetDefaultSort();
      } else {
        setDefaultSort((SortCriterion)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case DISPLAY_NAME:
      return getDisplayName();

    case URL:
      return getUrl();

    case SORTS_SUPPORTED:
      return getSortsSupported();

    case DEFAULT_SORT:
      return getDefaultSort();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DISPLAY_NAME:
      return isSetDisplayName();
    case URL:
      return isSetUrl();
    case SORTS_SUPPORTED:
      return isSetSortsSupported();
    case DEFAULT_SORT:
      return isSetDefaultSort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Retailer)
      return this.equals((Retailer)that);
    return false;
  }

  public boolean equals(Retailer that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_displayName = true && this.isSetDisplayName();
    boolean that_present_displayName = true && that.isSetDisplayName();
    if (this_present_displayName || that_present_displayName) {
      if (!(this_present_displayName && that_present_displayName))
        return false;
      if (!this.displayName.equals(that.displayName))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_sortsSupported = true && this.isSetSortsSupported();
    boolean that_present_sortsSupported = true && that.isSetSortsSupported();
    if (this_present_sortsSupported || that_present_sortsSupported) {
      if (!(this_present_sortsSupported && that_present_sortsSupported))
        return false;
      if (!this.sortsSupported.equals(that.sortsSupported))
        return false;
    }

    boolean this_present_defaultSort = true && this.isSetDefaultSort();
    boolean that_present_defaultSort = true && that.isSetDefaultSort();
    if (this_present_defaultSort || that_present_defaultSort) {
      if (!(this_present_defaultSort && that_present_defaultSort))
        return false;
      if (!this.defaultSort.equals(that.defaultSort))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Retailer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Retailer typedOther = (Retailer)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayName()).compareTo(typedOther.isSetDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayName, typedOther.displayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortsSupported()).compareTo(typedOther.isSetSortsSupported());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortsSupported()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortsSupported, typedOther.sortsSupported);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultSort()).compareTo(typedOther.isSetDefaultSort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultSort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultSort, typedOther.defaultSort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Retailer(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayName:");
    if (this.displayName == null) {
      sb.append("null");
    } else {
      sb.append(this.displayName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortsSupported:");
    if (this.sortsSupported == null) {
      sb.append("null");
    } else {
      sb.append(this.sortsSupported);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultSort:");
    if (this.defaultSort == null) {
      sb.append("null");
    } else {
      sb.append(this.defaultSort);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    if (displayName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'displayName' was not present! Struct: " + toString());
    }
    if (url == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'url' was not present! Struct: " + toString());
    }
    if (sortsSupported == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sortsSupported' was not present! Struct: " + toString());
    }
    if (defaultSort == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'defaultSort' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RetailerStandardSchemeFactory implements SchemeFactory {
    public RetailerStandardScheme getScheme() {
      return new RetailerStandardScheme();
    }
  }

  private static class RetailerStandardScheme extends StandardScheme<Retailer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Retailer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DISPLAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayName = iprot.readString();
              struct.setDisplayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SORTS_SUPPORTED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.sortsSupported = new ArrayList<SortCriterion>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  SortCriterion _elem2; // required
                  _elem2 = SortCriterion.findByValue(iprot.readI32());
                  struct.sortsSupported.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setSortsSupportedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEFAULT_SORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.defaultSort = SortCriterion.findByValue(iprot.readI32());
              struct.setDefaultSortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Retailer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.displayName != null) {
        oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(struct.displayName);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.sortsSupported != null) {
        oprot.writeFieldBegin(SORTS_SUPPORTED_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sortsSupported.size()));
          for (SortCriterion _iter3 : struct.sortsSupported)
          {
            oprot.writeI32(_iter3.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.defaultSort != null) {
        oprot.writeFieldBegin(DEFAULT_SORT_FIELD_DESC);
        oprot.writeI32(struct.defaultSort.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RetailerTupleSchemeFactory implements SchemeFactory {
    public RetailerTupleScheme getScheme() {
      return new RetailerTupleScheme();
    }
  }

  private static class RetailerTupleScheme extends TupleScheme<Retailer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Retailer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeString(struct.displayName);
      oprot.writeString(struct.url);
      {
        oprot.writeI32(struct.sortsSupported.size());
        for (SortCriterion _iter4 : struct.sortsSupported)
        {
          oprot.writeI32(_iter4.getValue());
        }
      }
      oprot.writeI32(struct.defaultSort.getValue());
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Retailer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.displayName = iprot.readString();
      struct.setDisplayNameIsSet(true);
      struct.url = iprot.readString();
      struct.setUrlIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.sortsSupported = new ArrayList<SortCriterion>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          SortCriterion _elem7; // required
          _elem7 = SortCriterion.findByValue(iprot.readI32());
          struct.sortsSupported.add(_elem7);
        }
      }
      struct.setSortsSupportedIsSet(true);
      struct.defaultSort = SortCriterion.findByValue(iprot.readI32());
      struct.setDefaultSortIsSet(true);
    }
  }

}

