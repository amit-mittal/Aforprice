/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.genereated.retailer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PriceDrop implements org.apache.thrift.TBase<PriceDrop, PriceDrop._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PriceDrop");

  private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CURRENT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField PREVIOUS_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("previousPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField AVERAGE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("averagePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField MAX_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField REVIEW_STARS_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewStars", org.apache.thrift.protocol.TType.BYTE, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PriceDropStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PriceDropTupleSchemeFactory());
  }

  public int categoryId; // required
  public int productId; // required
  public String url; // required
  public String name; // required
  public String imageUrl; // required
  public double currentPrice; // required
  public double previousPrice; // required
  public double averagePrice; // required
  public double maxPrice; // required
  public byte reviewStars; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CATEGORY_ID((short)1, "categoryId"),
    PRODUCT_ID((short)2, "productId"),
    URL((short)3, "url"),
    NAME((short)4, "name"),
    IMAGE_URL((short)5, "imageUrl"),
    CURRENT_PRICE((short)6, "currentPrice"),
    PREVIOUS_PRICE((short)7, "previousPrice"),
    AVERAGE_PRICE((short)8, "averagePrice"),
    MAX_PRICE((short)9, "maxPrice"),
    REVIEW_STARS((short)10, "reviewStars");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CATEGORY_ID
          return CATEGORY_ID;
        case 2: // PRODUCT_ID
          return PRODUCT_ID;
        case 3: // URL
          return URL;
        case 4: // NAME
          return NAME;
        case 5: // IMAGE_URL
          return IMAGE_URL;
        case 6: // CURRENT_PRICE
          return CURRENT_PRICE;
        case 7: // PREVIOUS_PRICE
          return PREVIOUS_PRICE;
        case 8: // AVERAGE_PRICE
          return AVERAGE_PRICE;
        case 9: // MAX_PRICE
          return MAX_PRICE;
        case 10: // REVIEW_STARS
          return REVIEW_STARS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CATEGORYID_ISSET_ID = 0;
  private static final int __PRODUCTID_ISSET_ID = 1;
  private static final int __CURRENTPRICE_ISSET_ID = 2;
  private static final int __PREVIOUSPRICE_ISSET_ID = 3;
  private static final int __AVERAGEPRICE_ISSET_ID = 4;
  private static final int __MAXPRICE_ISSET_ID = 5;
  private static final int __REVIEWSTARS_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("currentPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PREVIOUS_PRICE, new org.apache.thrift.meta_data.FieldMetaData("previousPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVERAGE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("averagePrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_PRICE, new org.apache.thrift.meta_data.FieldMetaData("maxPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REVIEW_STARS, new org.apache.thrift.meta_data.FieldMetaData("reviewStars", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PriceDrop.class, metaDataMap);
  }

  public PriceDrop() {
  }

  public PriceDrop(
    int categoryId,
    int productId,
    String url,
    String name,
    String imageUrl,
    double currentPrice,
    double previousPrice,
    double averagePrice,
    double maxPrice,
    byte reviewStars)
  {
    this();
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    this.productId = productId;
    setProductIdIsSet(true);
    this.url = url;
    this.name = name;
    this.imageUrl = imageUrl;
    this.currentPrice = currentPrice;
    setCurrentPriceIsSet(true);
    this.previousPrice = previousPrice;
    setPreviousPriceIsSet(true);
    this.averagePrice = averagePrice;
    setAveragePriceIsSet(true);
    this.maxPrice = maxPrice;
    setMaxPriceIsSet(true);
    this.reviewStars = reviewStars;
    setReviewStarsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PriceDrop(PriceDrop other) {
    __isset_bitfield = other.__isset_bitfield;
    this.categoryId = other.categoryId;
    this.productId = other.productId;
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetImageUrl()) {
      this.imageUrl = other.imageUrl;
    }
    this.currentPrice = other.currentPrice;
    this.previousPrice = other.previousPrice;
    this.averagePrice = other.averagePrice;
    this.maxPrice = other.maxPrice;
    this.reviewStars = other.reviewStars;
  }

  public PriceDrop deepCopy() {
    return new PriceDrop(this);
  }

  @Override
  public void clear() {
    setCategoryIdIsSet(false);
    this.categoryId = 0;
    setProductIdIsSet(false);
    this.productId = 0;
    this.url = null;
    this.name = null;
    this.imageUrl = null;
    setCurrentPriceIsSet(false);
    this.currentPrice = 0.0;
    setPreviousPriceIsSet(false);
    this.previousPrice = 0.0;
    setAveragePriceIsSet(false);
    this.averagePrice = 0.0;
    setMaxPriceIsSet(false);
    this.maxPrice = 0.0;
    setReviewStarsIsSet(false);
    this.reviewStars = 0;
  }

  public int getCategoryId() {
    return this.categoryId;
  }

  public PriceDrop setCategoryId(int categoryId) {
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    return this;
  }

  public void unsetCategoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  public void setCategoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
  }

  public int getProductId() {
    return this.productId;
  }

  public PriceDrop setProductId(int productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
  }

  public String getUrl() {
    return this.url;
  }

  public PriceDrop setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public PriceDrop setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getImageUrl() {
    return this.imageUrl;
  }

  public PriceDrop setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  public void unsetImageUrl() {
    this.imageUrl = null;
  }

  /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetImageUrl() {
    return this.imageUrl != null;
  }

  public void setImageUrlIsSet(boolean value) {
    if (!value) {
      this.imageUrl = null;
    }
  }

  public double getCurrentPrice() {
    return this.currentPrice;
  }

  public PriceDrop setCurrentPrice(double currentPrice) {
    this.currentPrice = currentPrice;
    setCurrentPriceIsSet(true);
    return this;
  }

  public void unsetCurrentPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPRICE_ISSET_ID);
  }

  /** Returns true if field currentPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTPRICE_ISSET_ID);
  }

  public void setCurrentPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPRICE_ISSET_ID, value);
  }

  public double getPreviousPrice() {
    return this.previousPrice;
  }

  public PriceDrop setPreviousPrice(double previousPrice) {
    this.previousPrice = previousPrice;
    setPreviousPriceIsSet(true);
    return this;
  }

  public void unsetPreviousPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREVIOUSPRICE_ISSET_ID);
  }

  /** Returns true if field previousPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetPreviousPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PREVIOUSPRICE_ISSET_ID);
  }

  public void setPreviousPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREVIOUSPRICE_ISSET_ID, value);
  }

  public double getAveragePrice() {
    return this.averagePrice;
  }

  public PriceDrop setAveragePrice(double averagePrice) {
    this.averagePrice = averagePrice;
    setAveragePriceIsSet(true);
    return this;
  }

  public void unsetAveragePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVERAGEPRICE_ISSET_ID);
  }

  /** Returns true if field averagePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetAveragePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __AVERAGEPRICE_ISSET_ID);
  }

  public void setAveragePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVERAGEPRICE_ISSET_ID, value);
  }

  public double getMaxPrice() {
    return this.maxPrice;
  }

  public PriceDrop setMaxPrice(double maxPrice) {
    this.maxPrice = maxPrice;
    setMaxPriceIsSet(true);
    return this;
  }

  public void unsetMaxPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXPRICE_ISSET_ID);
  }

  /** Returns true if field maxPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXPRICE_ISSET_ID);
  }

  public void setMaxPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXPRICE_ISSET_ID, value);
  }

  public byte getReviewStars() {
    return this.reviewStars;
  }

  public PriceDrop setReviewStars(byte reviewStars) {
    this.reviewStars = reviewStars;
    setReviewStarsIsSet(true);
    return this;
  }

  public void unsetReviewStars() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVIEWSTARS_ISSET_ID);
  }

  /** Returns true if field reviewStars is set (has been assigned a value) and false otherwise */
  public boolean isSetReviewStars() {
    return EncodingUtils.testBit(__isset_bitfield, __REVIEWSTARS_ISSET_ID);
  }

  public void setReviewStarsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVIEWSTARS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CATEGORY_ID:
      if (value == null) {
        unsetCategoryId();
      } else {
        setCategoryId((Integer)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Integer)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case IMAGE_URL:
      if (value == null) {
        unsetImageUrl();
      } else {
        setImageUrl((String)value);
      }
      break;

    case CURRENT_PRICE:
      if (value == null) {
        unsetCurrentPrice();
      } else {
        setCurrentPrice((Double)value);
      }
      break;

    case PREVIOUS_PRICE:
      if (value == null) {
        unsetPreviousPrice();
      } else {
        setPreviousPrice((Double)value);
      }
      break;

    case AVERAGE_PRICE:
      if (value == null) {
        unsetAveragePrice();
      } else {
        setAveragePrice((Double)value);
      }
      break;

    case MAX_PRICE:
      if (value == null) {
        unsetMaxPrice();
      } else {
        setMaxPrice((Double)value);
      }
      break;

    case REVIEW_STARS:
      if (value == null) {
        unsetReviewStars();
      } else {
        setReviewStars((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CATEGORY_ID:
      return Integer.valueOf(getCategoryId());

    case PRODUCT_ID:
      return Integer.valueOf(getProductId());

    case URL:
      return getUrl();

    case NAME:
      return getName();

    case IMAGE_URL:
      return getImageUrl();

    case CURRENT_PRICE:
      return Double.valueOf(getCurrentPrice());

    case PREVIOUS_PRICE:
      return Double.valueOf(getPreviousPrice());

    case AVERAGE_PRICE:
      return Double.valueOf(getAveragePrice());

    case MAX_PRICE:
      return Double.valueOf(getMaxPrice());

    case REVIEW_STARS:
      return Byte.valueOf(getReviewStars());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CATEGORY_ID:
      return isSetCategoryId();
    case PRODUCT_ID:
      return isSetProductId();
    case URL:
      return isSetUrl();
    case NAME:
      return isSetName();
    case IMAGE_URL:
      return isSetImageUrl();
    case CURRENT_PRICE:
      return isSetCurrentPrice();
    case PREVIOUS_PRICE:
      return isSetPreviousPrice();
    case AVERAGE_PRICE:
      return isSetAveragePrice();
    case MAX_PRICE:
      return isSetMaxPrice();
    case REVIEW_STARS:
      return isSetReviewStars();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PriceDrop)
      return this.equals((PriceDrop)that);
    return false;
  }

  public boolean equals(PriceDrop that) {
    if (that == null)
      return false;

    boolean this_present_categoryId = true;
    boolean that_present_categoryId = true;
    if (this_present_categoryId || that_present_categoryId) {
      if (!(this_present_categoryId && that_present_categoryId))
        return false;
      if (this.categoryId != that.categoryId)
        return false;
    }

    boolean this_present_productId = true;
    boolean that_present_productId = true;
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_imageUrl = true && this.isSetImageUrl();
    boolean that_present_imageUrl = true && that.isSetImageUrl();
    if (this_present_imageUrl || that_present_imageUrl) {
      if (!(this_present_imageUrl && that_present_imageUrl))
        return false;
      if (!this.imageUrl.equals(that.imageUrl))
        return false;
    }

    boolean this_present_currentPrice = true;
    boolean that_present_currentPrice = true;
    if (this_present_currentPrice || that_present_currentPrice) {
      if (!(this_present_currentPrice && that_present_currentPrice))
        return false;
      if (this.currentPrice != that.currentPrice)
        return false;
    }

    boolean this_present_previousPrice = true;
    boolean that_present_previousPrice = true;
    if (this_present_previousPrice || that_present_previousPrice) {
      if (!(this_present_previousPrice && that_present_previousPrice))
        return false;
      if (this.previousPrice != that.previousPrice)
        return false;
    }

    boolean this_present_averagePrice = true;
    boolean that_present_averagePrice = true;
    if (this_present_averagePrice || that_present_averagePrice) {
      if (!(this_present_averagePrice && that_present_averagePrice))
        return false;
      if (this.averagePrice != that.averagePrice)
        return false;
    }

    boolean this_present_maxPrice = true;
    boolean that_present_maxPrice = true;
    if (this_present_maxPrice || that_present_maxPrice) {
      if (!(this_present_maxPrice && that_present_maxPrice))
        return false;
      if (this.maxPrice != that.maxPrice)
        return false;
    }

    boolean this_present_reviewStars = true;
    boolean that_present_reviewStars = true;
    if (this_present_reviewStars || that_present_reviewStars) {
      if (!(this_present_reviewStars && that_present_reviewStars))
        return false;
      if (this.reviewStars != that.reviewStars)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PriceDrop other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PriceDrop typedOther = (PriceDrop)other;

    lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(typedOther.isSetCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, typedOther.categoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(typedOther.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, typedOther.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageUrl()).compareTo(typedOther.isSetImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, typedOther.imageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentPrice()).compareTo(typedOther.isSetCurrentPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPrice, typedOther.currentPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreviousPrice()).compareTo(typedOther.isSetPreviousPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreviousPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.previousPrice, typedOther.previousPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAveragePrice()).compareTo(typedOther.isSetAveragePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAveragePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.averagePrice, typedOther.averagePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxPrice()).compareTo(typedOther.isSetMaxPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxPrice, typedOther.maxPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReviewStars()).compareTo(typedOther.isSetReviewStars());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviewStars()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewStars, typedOther.reviewStars);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PriceDrop(");
    boolean first = true;

    sb.append("categoryId:");
    sb.append(this.categoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    sb.append(this.productId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageUrl:");
    if (this.imageUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.imageUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentPrice:");
    sb.append(this.currentPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("previousPrice:");
    sb.append(this.previousPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("averagePrice:");
    sb.append(this.averagePrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxPrice:");
    sb.append(this.maxPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reviewStars:");
    sb.append(this.reviewStars);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'categoryId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'productId' because it's a primitive and you chose the non-beans generator.
    if (url == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'url' was not present! Struct: " + toString());
    }
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (imageUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'imageUrl' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'currentPrice' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'previousPrice' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'averagePrice' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'maxPrice' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'reviewStars' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PriceDropStandardSchemeFactory implements SchemeFactory {
    public PriceDropStandardScheme getScheme() {
      return new PriceDropStandardScheme();
    }
  }

  private static class PriceDropStandardScheme extends StandardScheme<PriceDrop> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PriceDrop struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.categoryId = iprot.readI32();
              struct.setCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productId = iprot.readI32();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageUrl = iprot.readString();
              struct.setImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CURRENT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currentPrice = iprot.readDouble();
              struct.setCurrentPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PREVIOUS_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.previousPrice = iprot.readDouble();
              struct.setPreviousPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AVERAGE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.averagePrice = iprot.readDouble();
              struct.setAveragePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAX_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.maxPrice = iprot.readDouble();
              struct.setMaxPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REVIEW_STARS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.reviewStars = iprot.readByte();
              struct.setReviewStarsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCategoryId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'categoryId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetProductId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'productId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCurrentPrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'currentPrice' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPreviousPrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'previousPrice' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAveragePrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'averagePrice' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMaxPrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxPrice' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetReviewStars()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'reviewStars' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PriceDrop struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
      oprot.writeI32(struct.categoryId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeI32(struct.productId);
      oprot.writeFieldEnd();
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.imageUrl != null) {
        oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
        oprot.writeString(struct.imageUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURRENT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.currentPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PREVIOUS_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.previousPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVERAGE_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.averagePrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.maxPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REVIEW_STARS_FIELD_DESC);
      oprot.writeByte(struct.reviewStars);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PriceDropTupleSchemeFactory implements SchemeFactory {
    public PriceDropTupleScheme getScheme() {
      return new PriceDropTupleScheme();
    }
  }

  private static class PriceDropTupleScheme extends TupleScheme<PriceDrop> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PriceDrop struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.categoryId);
      oprot.writeI32(struct.productId);
      oprot.writeString(struct.url);
      oprot.writeString(struct.name);
      oprot.writeString(struct.imageUrl);
      oprot.writeDouble(struct.currentPrice);
      oprot.writeDouble(struct.previousPrice);
      oprot.writeDouble(struct.averagePrice);
      oprot.writeDouble(struct.maxPrice);
      oprot.writeByte(struct.reviewStars);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PriceDrop struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.categoryId = iprot.readI32();
      struct.setCategoryIdIsSet(true);
      struct.productId = iprot.readI32();
      struct.setProductIdIsSet(true);
      struct.url = iprot.readString();
      struct.setUrlIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.imageUrl = iprot.readString();
      struct.setImageUrlIsSet(true);
      struct.currentPrice = iprot.readDouble();
      struct.setCurrentPriceIsSet(true);
      struct.previousPrice = iprot.readDouble();
      struct.setPreviousPriceIsSet(true);
      struct.averagePrice = iprot.readDouble();
      struct.setAveragePriceIsSet(true);
      struct.maxPrice = iprot.readDouble();
      struct.setMaxPriceIsSet(true);
      struct.reviewStars = iprot.readByte();
      struct.setReviewStarsIsSet(true);
    }
  }

}

