/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.genereated.retailer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PriceDropByCategory implements org.apache.thrift.TBase<PriceDropByCategory, PriceDropByCategory._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PriceDropByCategory");

  private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CATEGORY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRICE_DROPS_FIELD_DESC = new org.apache.thrift.protocol.TField("priceDrops", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PriceDropByCategoryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PriceDropByCategoryTupleSchemeFactory());
  }

  public int categoryId; // required
  public String categoryName; // required
  public List<PriceDrop> priceDrops; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CATEGORY_ID((short)1, "categoryId"),
    CATEGORY_NAME((short)2, "categoryName"),
    PRICE_DROPS((short)3, "priceDrops");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CATEGORY_ID
          return CATEGORY_ID;
        case 2: // CATEGORY_NAME
          return CATEGORY_NAME;
        case 3: // PRICE_DROPS
          return PRICE_DROPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CATEGORYID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CATEGORY_NAME, new org.apache.thrift.meta_data.FieldMetaData("categoryName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE_DROPS, new org.apache.thrift.meta_data.FieldMetaData("priceDrops", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PriceDrop.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PriceDropByCategory.class, metaDataMap);
  }

  public PriceDropByCategory() {
  }

  public PriceDropByCategory(
    int categoryId,
    String categoryName,
    List<PriceDrop> priceDrops)
  {
    this();
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    this.categoryName = categoryName;
    this.priceDrops = priceDrops;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PriceDropByCategory(PriceDropByCategory other) {
    __isset_bitfield = other.__isset_bitfield;
    this.categoryId = other.categoryId;
    if (other.isSetCategoryName()) {
      this.categoryName = other.categoryName;
    }
    if (other.isSetPriceDrops()) {
      List<PriceDrop> __this__priceDrops = new ArrayList<PriceDrop>();
      for (PriceDrop other_element : other.priceDrops) {
        __this__priceDrops.add(new PriceDrop(other_element));
      }
      this.priceDrops = __this__priceDrops;
    }
  }

  public PriceDropByCategory deepCopy() {
    return new PriceDropByCategory(this);
  }

  @Override
  public void clear() {
    setCategoryIdIsSet(false);
    this.categoryId = 0;
    this.categoryName = null;
    this.priceDrops = null;
  }

  public int getCategoryId() {
    return this.categoryId;
  }

  public PriceDropByCategory setCategoryId(int categoryId) {
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    return this;
  }

  public void unsetCategoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  public void setCategoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
  }

  public String getCategoryName() {
    return this.categoryName;
  }

  public PriceDropByCategory setCategoryName(String categoryName) {
    this.categoryName = categoryName;
    return this;
  }

  public void unsetCategoryName() {
    this.categoryName = null;
  }

  /** Returns true if field categoryName is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryName() {
    return this.categoryName != null;
  }

  public void setCategoryNameIsSet(boolean value) {
    if (!value) {
      this.categoryName = null;
    }
  }

  public int getPriceDropsSize() {
    return (this.priceDrops == null) ? 0 : this.priceDrops.size();
  }

  public java.util.Iterator<PriceDrop> getPriceDropsIterator() {
    return (this.priceDrops == null) ? null : this.priceDrops.iterator();
  }

  public void addToPriceDrops(PriceDrop elem) {
    if (this.priceDrops == null) {
      this.priceDrops = new ArrayList<PriceDrop>();
    }
    this.priceDrops.add(elem);
  }

  public List<PriceDrop> getPriceDrops() {
    return this.priceDrops;
  }

  public PriceDropByCategory setPriceDrops(List<PriceDrop> priceDrops) {
    this.priceDrops = priceDrops;
    return this;
  }

  public void unsetPriceDrops() {
    this.priceDrops = null;
  }

  /** Returns true if field priceDrops is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceDrops() {
    return this.priceDrops != null;
  }

  public void setPriceDropsIsSet(boolean value) {
    if (!value) {
      this.priceDrops = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CATEGORY_ID:
      if (value == null) {
        unsetCategoryId();
      } else {
        setCategoryId((Integer)value);
      }
      break;

    case CATEGORY_NAME:
      if (value == null) {
        unsetCategoryName();
      } else {
        setCategoryName((String)value);
      }
      break;

    case PRICE_DROPS:
      if (value == null) {
        unsetPriceDrops();
      } else {
        setPriceDrops((List<PriceDrop>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CATEGORY_ID:
      return Integer.valueOf(getCategoryId());

    case CATEGORY_NAME:
      return getCategoryName();

    case PRICE_DROPS:
      return getPriceDrops();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CATEGORY_ID:
      return isSetCategoryId();
    case CATEGORY_NAME:
      return isSetCategoryName();
    case PRICE_DROPS:
      return isSetPriceDrops();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PriceDropByCategory)
      return this.equals((PriceDropByCategory)that);
    return false;
  }

  public boolean equals(PriceDropByCategory that) {
    if (that == null)
      return false;

    boolean this_present_categoryId = true;
    boolean that_present_categoryId = true;
    if (this_present_categoryId || that_present_categoryId) {
      if (!(this_present_categoryId && that_present_categoryId))
        return false;
      if (this.categoryId != that.categoryId)
        return false;
    }

    boolean this_present_categoryName = true && this.isSetCategoryName();
    boolean that_present_categoryName = true && that.isSetCategoryName();
    if (this_present_categoryName || that_present_categoryName) {
      if (!(this_present_categoryName && that_present_categoryName))
        return false;
      if (!this.categoryName.equals(that.categoryName))
        return false;
    }

    boolean this_present_priceDrops = true && this.isSetPriceDrops();
    boolean that_present_priceDrops = true && that.isSetPriceDrops();
    if (this_present_priceDrops || that_present_priceDrops) {
      if (!(this_present_priceDrops && that_present_priceDrops))
        return false;
      if (!this.priceDrops.equals(that.priceDrops))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PriceDropByCategory other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PriceDropByCategory typedOther = (PriceDropByCategory)other;

    lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(typedOther.isSetCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, typedOther.categoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryName()).compareTo(typedOther.isSetCategoryName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryName, typedOther.categoryName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceDrops()).compareTo(typedOther.isSetPriceDrops());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceDrops()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceDrops, typedOther.priceDrops);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PriceDropByCategory(");
    boolean first = true;

    sb.append("categoryId:");
    sb.append(this.categoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryName:");
    if (this.categoryName == null) {
      sb.append("null");
    } else {
      sb.append(this.categoryName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceDrops:");
    if (this.priceDrops == null) {
      sb.append("null");
    } else {
      sb.append(this.priceDrops);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'categoryId' because it's a primitive and you chose the non-beans generator.
    if (categoryName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'categoryName' was not present! Struct: " + toString());
    }
    if (priceDrops == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'priceDrops' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PriceDropByCategoryStandardSchemeFactory implements SchemeFactory {
    public PriceDropByCategoryStandardScheme getScheme() {
      return new PriceDropByCategoryStandardScheme();
    }
  }

  private static class PriceDropByCategoryStandardScheme extends StandardScheme<PriceDropByCategory> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PriceDropByCategory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.categoryId = iprot.readI32();
              struct.setCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CATEGORY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.categoryName = iprot.readString();
              struct.setCategoryNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRICE_DROPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.priceDrops = new ArrayList<PriceDrop>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  PriceDrop _elem10; // required
                  _elem10 = new PriceDrop();
                  _elem10.read(iprot);
                  struct.priceDrops.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setPriceDropsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCategoryId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'categoryId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PriceDropByCategory struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
      oprot.writeI32(struct.categoryId);
      oprot.writeFieldEnd();
      if (struct.categoryName != null) {
        oprot.writeFieldBegin(CATEGORY_NAME_FIELD_DESC);
        oprot.writeString(struct.categoryName);
        oprot.writeFieldEnd();
      }
      if (struct.priceDrops != null) {
        oprot.writeFieldBegin(PRICE_DROPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.priceDrops.size()));
          for (PriceDrop _iter11 : struct.priceDrops)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PriceDropByCategoryTupleSchemeFactory implements SchemeFactory {
    public PriceDropByCategoryTupleScheme getScheme() {
      return new PriceDropByCategoryTupleScheme();
    }
  }

  private static class PriceDropByCategoryTupleScheme extends TupleScheme<PriceDropByCategory> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PriceDropByCategory struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.categoryId);
      oprot.writeString(struct.categoryName);
      {
        oprot.writeI32(struct.priceDrops.size());
        for (PriceDrop _iter12 : struct.priceDrops)
        {
          _iter12.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PriceDropByCategory struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.categoryId = iprot.readI32();
      struct.setCategoryIdIsSet(true);
      struct.categoryName = iprot.readString();
      struct.setCategoryNameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.priceDrops = new ArrayList<PriceDrop>(_list13.size);
        for (int _i14 = 0; _i14 < _list13.size; ++_i14)
        {
          PriceDrop _elem15; // required
          _elem15 = new PriceDrop();
          _elem15.read(iprot);
          struct.priceDrops.add(_elem15);
        }
      }
      struct.setPriceDropsIsSet(true);
    }
  }

}

