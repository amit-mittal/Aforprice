/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.genereated.retailer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Review implements org.apache.thrift.TBase<Review, Review._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Review");

  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField REVIEW_RATING_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewRating", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_REVIEWS_FIELD_DESC = new org.apache.thrift.protocol.TField("numReviews", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReviewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReviewTupleSchemeFactory());
  }

  public long time; // required
  public double reviewRating; // required
  public int numReviews; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME((short)1, "time"),
    REVIEW_RATING((short)2, "reviewRating"),
    NUM_REVIEWS((short)3, "numReviews");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME
          return TIME;
        case 2: // REVIEW_RATING
          return REVIEW_RATING;
        case 3: // NUM_REVIEWS
          return NUM_REVIEWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_ISSET_ID = 0;
  private static final int __REVIEWRATING_ISSET_ID = 1;
  private static final int __NUMREVIEWS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REVIEW_RATING, new org.apache.thrift.meta_data.FieldMetaData("reviewRating", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUM_REVIEWS, new org.apache.thrift.meta_data.FieldMetaData("numReviews", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Review.class, metaDataMap);
  }

  public Review() {
  }

  public Review(
    long time,
    double reviewRating,
    int numReviews)
  {
    this();
    this.time = time;
    setTimeIsSet(true);
    this.reviewRating = reviewRating;
    setReviewRatingIsSet(true);
    this.numReviews = numReviews;
    setNumReviewsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Review(Review other) {
    __isset_bitfield = other.__isset_bitfield;
    this.time = other.time;
    this.reviewRating = other.reviewRating;
    this.numReviews = other.numReviews;
  }

  public Review deepCopy() {
    return new Review(this);
  }

  @Override
  public void clear() {
    setTimeIsSet(false);
    this.time = 0;
    setReviewRatingIsSet(false);
    this.reviewRating = 0.0;
    setNumReviewsIsSet(false);
    this.numReviews = 0;
  }

  public long getTime() {
    return this.time;
  }

  public Review setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public double getReviewRating() {
    return this.reviewRating;
  }

  public Review setReviewRating(double reviewRating) {
    this.reviewRating = reviewRating;
    setReviewRatingIsSet(true);
    return this;
  }

  public void unsetReviewRating() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVIEWRATING_ISSET_ID);
  }

  /** Returns true if field reviewRating is set (has been assigned a value) and false otherwise */
  public boolean isSetReviewRating() {
    return EncodingUtils.testBit(__isset_bitfield, __REVIEWRATING_ISSET_ID);
  }

  public void setReviewRatingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVIEWRATING_ISSET_ID, value);
  }

  public int getNumReviews() {
    return this.numReviews;
  }

  public Review setNumReviews(int numReviews) {
    this.numReviews = numReviews;
    setNumReviewsIsSet(true);
    return this;
  }

  public void unsetNumReviews() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMREVIEWS_ISSET_ID);
  }

  /** Returns true if field numReviews is set (has been assigned a value) and false otherwise */
  public boolean isSetNumReviews() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMREVIEWS_ISSET_ID);
  }

  public void setNumReviewsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMREVIEWS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Long)value);
      }
      break;

    case REVIEW_RATING:
      if (value == null) {
        unsetReviewRating();
      } else {
        setReviewRating((Double)value);
      }
      break;

    case NUM_REVIEWS:
      if (value == null) {
        unsetNumReviews();
      } else {
        setNumReviews((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME:
      return Long.valueOf(getTime());

    case REVIEW_RATING:
      return Double.valueOf(getReviewRating());

    case NUM_REVIEWS:
      return Integer.valueOf(getNumReviews());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIME:
      return isSetTime();
    case REVIEW_RATING:
      return isSetReviewRating();
    case NUM_REVIEWS:
      return isSetNumReviews();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Review)
      return this.equals((Review)that);
    return false;
  }

  public boolean equals(Review that) {
    if (that == null)
      return false;

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_reviewRating = true;
    boolean that_present_reviewRating = true;
    if (this_present_reviewRating || that_present_reviewRating) {
      if (!(this_present_reviewRating && that_present_reviewRating))
        return false;
      if (this.reviewRating != that.reviewRating)
        return false;
    }

    boolean this_present_numReviews = true;
    boolean that_present_numReviews = true;
    if (this_present_numReviews || that_present_numReviews) {
      if (!(this_present_numReviews && that_present_numReviews))
        return false;
      if (this.numReviews != that.numReviews)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Review other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Review typedOther = (Review)other;

    lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReviewRating()).compareTo(typedOther.isSetReviewRating());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviewRating()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewRating, typedOther.reviewRating);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumReviews()).compareTo(typedOther.isSetNumReviews());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumReviews()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numReviews, typedOther.numReviews);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Review(");
    boolean first = true;

    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reviewRating:");
    sb.append(this.reviewRating);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numReviews:");
    sb.append(this.numReviews);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'time' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'reviewRating' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'numReviews' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReviewStandardSchemeFactory implements SchemeFactory {
    public ReviewStandardScheme getScheme() {
      return new ReviewStandardScheme();
    }
  }

  private static class ReviewStandardScheme extends StandardScheme<Review> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Review struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REVIEW_RATING
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reviewRating = iprot.readDouble();
              struct.setReviewRatingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_REVIEWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numReviews = iprot.readI32();
              struct.setNumReviewsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'time' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetReviewRating()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'reviewRating' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNumReviews()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numReviews' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Review struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI64(struct.time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REVIEW_RATING_FIELD_DESC);
      oprot.writeDouble(struct.reviewRating);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_REVIEWS_FIELD_DESC);
      oprot.writeI32(struct.numReviews);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReviewTupleSchemeFactory implements SchemeFactory {
    public ReviewTupleScheme getScheme() {
      return new ReviewTupleScheme();
    }
  }

  private static class ReviewTupleScheme extends TupleScheme<Review> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Review struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.time);
      oprot.writeDouble(struct.reviewRating);
      oprot.writeI32(struct.numReviews);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Review struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.time = iprot.readI64();
      struct.setTimeIsSet(true);
      struct.reviewRating = iprot.readDouble();
      struct.setReviewRatingIsSet(true);
      struct.numReviews = iprot.readI32();
      struct.setNumReviewsIsSet(true);
    }
  }

}

