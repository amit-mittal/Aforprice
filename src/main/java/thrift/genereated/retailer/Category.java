/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.genereated.retailer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Category implements org.apache.thrift.TBase<Category, Category._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Category");

  private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CATEGORY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RETAILER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("retailerId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PARENT_CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentCategoryId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PARENT_CATEGORY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("parentCategoryName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("parent", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CategoryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CategoryTupleSchemeFactory());
  }

  public int categoryId; // required
  public String categoryName; // required
  public String retailerId; // required
  public int parentCategoryId; // required
  public String parentCategoryName; // required
  public String url; // required
  public boolean parent; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CATEGORY_ID((short)1, "categoryId"),
    CATEGORY_NAME((short)2, "categoryName"),
    RETAILER_ID((short)3, "retailerId"),
    PARENT_CATEGORY_ID((short)4, "parentCategoryId"),
    PARENT_CATEGORY_NAME((short)5, "parentCategoryName"),
    URL((short)6, "url"),
    PARENT((short)7, "parent");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CATEGORY_ID
          return CATEGORY_ID;
        case 2: // CATEGORY_NAME
          return CATEGORY_NAME;
        case 3: // RETAILER_ID
          return RETAILER_ID;
        case 4: // PARENT_CATEGORY_ID
          return PARENT_CATEGORY_ID;
        case 5: // PARENT_CATEGORY_NAME
          return PARENT_CATEGORY_NAME;
        case 6: // URL
          return URL;
        case 7: // PARENT
          return PARENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CATEGORYID_ISSET_ID = 0;
  private static final int __PARENTCATEGORYID_ISSET_ID = 1;
  private static final int __PARENT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CATEGORY_NAME, new org.apache.thrift.meta_data.FieldMetaData("categoryName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETAILER_ID, new org.apache.thrift.meta_data.FieldMetaData("retailerId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("parentCategoryId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT_CATEGORY_NAME, new org.apache.thrift.meta_data.FieldMetaData("parentCategoryName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT, new org.apache.thrift.meta_data.FieldMetaData("parent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Category.class, metaDataMap);
  }

  public Category() {
  }

  public Category(
    int categoryId,
    String categoryName,
    String retailerId,
    int parentCategoryId,
    String parentCategoryName,
    String url,
    boolean parent)
  {
    this();
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    this.categoryName = categoryName;
    this.retailerId = retailerId;
    this.parentCategoryId = parentCategoryId;
    setParentCategoryIdIsSet(true);
    this.parentCategoryName = parentCategoryName;
    this.url = url;
    this.parent = parent;
    setParentIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Category(Category other) {
    __isset_bitfield = other.__isset_bitfield;
    this.categoryId = other.categoryId;
    if (other.isSetCategoryName()) {
      this.categoryName = other.categoryName;
    }
    if (other.isSetRetailerId()) {
      this.retailerId = other.retailerId;
    }
    this.parentCategoryId = other.parentCategoryId;
    if (other.isSetParentCategoryName()) {
      this.parentCategoryName = other.parentCategoryName;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.parent = other.parent;
  }

  public Category deepCopy() {
    return new Category(this);
  }

  @Override
  public void clear() {
    setCategoryIdIsSet(false);
    this.categoryId = 0;
    this.categoryName = null;
    this.retailerId = null;
    setParentCategoryIdIsSet(false);
    this.parentCategoryId = 0;
    this.parentCategoryName = null;
    this.url = null;
    setParentIsSet(false);
    this.parent = false;
  }

  public int getCategoryId() {
    return this.categoryId;
  }

  public Category setCategoryId(int categoryId) {
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    return this;
  }

  public void unsetCategoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  public void setCategoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
  }

  public String getCategoryName() {
    return this.categoryName;
  }

  public Category setCategoryName(String categoryName) {
    this.categoryName = categoryName;
    return this;
  }

  public void unsetCategoryName() {
    this.categoryName = null;
  }

  /** Returns true if field categoryName is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryName() {
    return this.categoryName != null;
  }

  public void setCategoryNameIsSet(boolean value) {
    if (!value) {
      this.categoryName = null;
    }
  }

  public String getRetailerId() {
    return this.retailerId;
  }

  public Category setRetailerId(String retailerId) {
    this.retailerId = retailerId;
    return this;
  }

  public void unsetRetailerId() {
    this.retailerId = null;
  }

  /** Returns true if field retailerId is set (has been assigned a value) and false otherwise */
  public boolean isSetRetailerId() {
    return this.retailerId != null;
  }

  public void setRetailerIdIsSet(boolean value) {
    if (!value) {
      this.retailerId = null;
    }
  }

  public int getParentCategoryId() {
    return this.parentCategoryId;
  }

  public Category setParentCategoryId(int parentCategoryId) {
    this.parentCategoryId = parentCategoryId;
    setParentCategoryIdIsSet(true);
    return this;
  }

  public void unsetParentCategoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTCATEGORYID_ISSET_ID);
  }

  /** Returns true if field parentCategoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentCategoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTCATEGORYID_ISSET_ID);
  }

  public void setParentCategoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTCATEGORYID_ISSET_ID, value);
  }

  public String getParentCategoryName() {
    return this.parentCategoryName;
  }

  public Category setParentCategoryName(String parentCategoryName) {
    this.parentCategoryName = parentCategoryName;
    return this;
  }

  public void unsetParentCategoryName() {
    this.parentCategoryName = null;
  }

  /** Returns true if field parentCategoryName is set (has been assigned a value) and false otherwise */
  public boolean isSetParentCategoryName() {
    return this.parentCategoryName != null;
  }

  public void setParentCategoryNameIsSet(boolean value) {
    if (!value) {
      this.parentCategoryName = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public Category setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public boolean isParent() {
    return this.parent;
  }

  public Category setParent(boolean parent) {
    this.parent = parent;
    setParentIsSet(true);
    return this;
  }

  public void unsetParent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENT_ISSET_ID);
  }

  /** Returns true if field parent is set (has been assigned a value) and false otherwise */
  public boolean isSetParent() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENT_ISSET_ID);
  }

  public void setParentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CATEGORY_ID:
      if (value == null) {
        unsetCategoryId();
      } else {
        setCategoryId((Integer)value);
      }
      break;

    case CATEGORY_NAME:
      if (value == null) {
        unsetCategoryName();
      } else {
        setCategoryName((String)value);
      }
      break;

    case RETAILER_ID:
      if (value == null) {
        unsetRetailerId();
      } else {
        setRetailerId((String)value);
      }
      break;

    case PARENT_CATEGORY_ID:
      if (value == null) {
        unsetParentCategoryId();
      } else {
        setParentCategoryId((Integer)value);
      }
      break;

    case PARENT_CATEGORY_NAME:
      if (value == null) {
        unsetParentCategoryName();
      } else {
        setParentCategoryName((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case PARENT:
      if (value == null) {
        unsetParent();
      } else {
        setParent((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CATEGORY_ID:
      return Integer.valueOf(getCategoryId());

    case CATEGORY_NAME:
      return getCategoryName();

    case RETAILER_ID:
      return getRetailerId();

    case PARENT_CATEGORY_ID:
      return Integer.valueOf(getParentCategoryId());

    case PARENT_CATEGORY_NAME:
      return getParentCategoryName();

    case URL:
      return getUrl();

    case PARENT:
      return Boolean.valueOf(isParent());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CATEGORY_ID:
      return isSetCategoryId();
    case CATEGORY_NAME:
      return isSetCategoryName();
    case RETAILER_ID:
      return isSetRetailerId();
    case PARENT_CATEGORY_ID:
      return isSetParentCategoryId();
    case PARENT_CATEGORY_NAME:
      return isSetParentCategoryName();
    case URL:
      return isSetUrl();
    case PARENT:
      return isSetParent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Category)
      return this.equals((Category)that);
    return false;
  }

  public boolean equals(Category that) {
    if (that == null)
      return false;

    boolean this_present_categoryId = true;
    boolean that_present_categoryId = true;
    if (this_present_categoryId || that_present_categoryId) {
      if (!(this_present_categoryId && that_present_categoryId))
        return false;
      if (this.categoryId != that.categoryId)
        return false;
    }

    boolean this_present_categoryName = true && this.isSetCategoryName();
    boolean that_present_categoryName = true && that.isSetCategoryName();
    if (this_present_categoryName || that_present_categoryName) {
      if (!(this_present_categoryName && that_present_categoryName))
        return false;
      if (!this.categoryName.equals(that.categoryName))
        return false;
    }

    boolean this_present_retailerId = true && this.isSetRetailerId();
    boolean that_present_retailerId = true && that.isSetRetailerId();
    if (this_present_retailerId || that_present_retailerId) {
      if (!(this_present_retailerId && that_present_retailerId))
        return false;
      if (!this.retailerId.equals(that.retailerId))
        return false;
    }

    boolean this_present_parentCategoryId = true;
    boolean that_present_parentCategoryId = true;
    if (this_present_parentCategoryId || that_present_parentCategoryId) {
      if (!(this_present_parentCategoryId && that_present_parentCategoryId))
        return false;
      if (this.parentCategoryId != that.parentCategoryId)
        return false;
    }

    boolean this_present_parentCategoryName = true && this.isSetParentCategoryName();
    boolean that_present_parentCategoryName = true && that.isSetParentCategoryName();
    if (this_present_parentCategoryName || that_present_parentCategoryName) {
      if (!(this_present_parentCategoryName && that_present_parentCategoryName))
        return false;
      if (!this.parentCategoryName.equals(that.parentCategoryName))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_parent = true;
    boolean that_present_parent = true;
    if (this_present_parent || that_present_parent) {
      if (!(this_present_parent && that_present_parent))
        return false;
      if (this.parent != that.parent)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Category other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Category typedOther = (Category)other;

    lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(typedOther.isSetCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, typedOther.categoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryName()).compareTo(typedOther.isSetCategoryName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryName, typedOther.categoryName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetailerId()).compareTo(typedOther.isSetRetailerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetailerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retailerId, typedOther.retailerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentCategoryId()).compareTo(typedOther.isSetParentCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentCategoryId, typedOther.parentCategoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentCategoryName()).compareTo(typedOther.isSetParentCategoryName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentCategoryName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentCategoryName, typedOther.parentCategoryName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParent()).compareTo(typedOther.isSetParent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent, typedOther.parent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Category(");
    boolean first = true;

    sb.append("categoryId:");
    sb.append(this.categoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryName:");
    if (this.categoryName == null) {
      sb.append("null");
    } else {
      sb.append(this.categoryName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("retailerId:");
    if (this.retailerId == null) {
      sb.append("null");
    } else {
      sb.append(this.retailerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentCategoryId:");
    sb.append(this.parentCategoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentCategoryName:");
    if (this.parentCategoryName == null) {
      sb.append("null");
    } else {
      sb.append(this.parentCategoryName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parent:");
    sb.append(this.parent);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'categoryId' because it's a primitive and you chose the non-beans generator.
    if (categoryName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'categoryName' was not present! Struct: " + toString());
    }
    if (retailerId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'retailerId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'parentCategoryId' because it's a primitive and you chose the non-beans generator.
    if (parentCategoryName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'parentCategoryName' was not present! Struct: " + toString());
    }
    if (url == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'url' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'parent' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CategoryStandardSchemeFactory implements SchemeFactory {
    public CategoryStandardScheme getScheme() {
      return new CategoryStandardScheme();
    }
  }

  private static class CategoryStandardScheme extends StandardScheme<Category> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Category struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.categoryId = iprot.readI32();
              struct.setCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CATEGORY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.categoryName = iprot.readString();
              struct.setCategoryNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RETAILER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.retailerId = iprot.readString();
              struct.setRetailerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARENT_CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentCategoryId = iprot.readI32();
              struct.setParentCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARENT_CATEGORY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentCategoryName = iprot.readString();
              struct.setParentCategoryNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.parent = iprot.readBool();
              struct.setParentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCategoryId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'categoryId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetParentCategoryId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'parentCategoryId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetParent()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'parent' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Category struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
      oprot.writeI32(struct.categoryId);
      oprot.writeFieldEnd();
      if (struct.categoryName != null) {
        oprot.writeFieldBegin(CATEGORY_NAME_FIELD_DESC);
        oprot.writeString(struct.categoryName);
        oprot.writeFieldEnd();
      }
      if (struct.retailerId != null) {
        oprot.writeFieldBegin(RETAILER_ID_FIELD_DESC);
        oprot.writeString(struct.retailerId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PARENT_CATEGORY_ID_FIELD_DESC);
      oprot.writeI32(struct.parentCategoryId);
      oprot.writeFieldEnd();
      if (struct.parentCategoryName != null) {
        oprot.writeFieldBegin(PARENT_CATEGORY_NAME_FIELD_DESC);
        oprot.writeString(struct.parentCategoryName);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PARENT_FIELD_DESC);
      oprot.writeBool(struct.parent);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CategoryTupleSchemeFactory implements SchemeFactory {
    public CategoryTupleScheme getScheme() {
      return new CategoryTupleScheme();
    }
  }

  private static class CategoryTupleScheme extends TupleScheme<Category> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Category struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.categoryId);
      oprot.writeString(struct.categoryName);
      oprot.writeString(struct.retailerId);
      oprot.writeI32(struct.parentCategoryId);
      oprot.writeString(struct.parentCategoryName);
      oprot.writeString(struct.url);
      oprot.writeBool(struct.parent);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Category struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.categoryId = iprot.readI32();
      struct.setCategoryIdIsSet(true);
      struct.categoryName = iprot.readString();
      struct.setCategoryNameIsSet(true);
      struct.retailerId = iprot.readString();
      struct.setRetailerIdIsSet(true);
      struct.parentCategoryId = iprot.readI32();
      struct.setParentCategoryIdIsSet(true);
      struct.parentCategoryName = iprot.readString();
      struct.setParentCategoryNameIsSet(true);
      struct.url = iprot.readString();
      struct.setUrlIsSet(true);
      struct.parent = iprot.readBool();
      struct.setParentIsSet(true);
    }
  }
  public boolean isRootCategory(){
	  return this.parentCategoryId == 0;
  }
}

