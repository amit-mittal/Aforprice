/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.genereated.retailer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RetailerCache {

  public interface Iface {

    public Retailer getRetailer(String retailerId) throws org.apache.thrift.TException;

    public Map<Integer,List<Category>> getAllCategoriesByLevelForRetailer(String retailerId, List<Integer> levels) throws org.apache.thrift.TException;

    public List<Category> getHomePageCategories(String retailerId) throws org.apache.thrift.TException;

    public List<Category> getChildCategories(int categoryId) throws org.apache.thrift.TException;

    public List<Category> getCategoryPath(int categoryId) throws org.apache.thrift.TException;

    public ProductList getProducts(int categoryId, LookupIdx lookup, List<ProductFilter> filters, SortCriterion sortCriterion) throws org.apache.thrift.TException;

    public List<Product> getProductsByIds(List<Integer> productIdList) throws org.apache.thrift.TException;

    public ProductList getTopPriceDropsByCategory(int categoryId, LookupIdx lookup) throws org.apache.thrift.TException;

    public ProductList getTopPriceDropsByRetailer(String retailer, LookupIdx lookup) throws org.apache.thrift.TException;

    public Map<String,ProductList> getPriceDropsByCategory(int categoryId, int max) throws org.apache.thrift.TException;

    public Map<String,ProductList> getPriceDropsByRetailer(String retailer, int max) throws org.apache.thrift.TException;

    public Map<String,Product> getProductsForURLs(String retailer, List<String> urls) throws org.apache.thrift.TException;

    public Map<String,ProductList> getPriceDropsForProductFamily(String retailer, List<String> urls, int max) throws org.apache.thrift.TException;

    public Map<String,Product> getProductsForReceiptIds(String retailer, List<String> receiptIds) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getRetailer(String retailerId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRetailer_call> resultHandler) throws org.apache.thrift.TException;

    public void getAllCategoriesByLevelForRetailer(String retailerId, List<Integer> levels, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAllCategoriesByLevelForRetailer_call> resultHandler) throws org.apache.thrift.TException;

    public void getHomePageCategories(String retailerId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getHomePageCategories_call> resultHandler) throws org.apache.thrift.TException;

    public void getChildCategories(int categoryId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getChildCategories_call> resultHandler) throws org.apache.thrift.TException;

    public void getCategoryPath(int categoryId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCategoryPath_call> resultHandler) throws org.apache.thrift.TException;

    public void getProducts(int categoryId, LookupIdx lookup, List<ProductFilter> filters, SortCriterion sortCriterion, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getProducts_call> resultHandler) throws org.apache.thrift.TException;

    public void getProductsByIds(List<Integer> productIdList, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getProductsByIds_call> resultHandler) throws org.apache.thrift.TException;

    public void getTopPriceDropsByCategory(int categoryId, LookupIdx lookup, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTopPriceDropsByCategory_call> resultHandler) throws org.apache.thrift.TException;

    public void getTopPriceDropsByRetailer(String retailer, LookupIdx lookup, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTopPriceDropsByRetailer_call> resultHandler) throws org.apache.thrift.TException;

    public void getPriceDropsByCategory(int categoryId, int max, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPriceDropsByCategory_call> resultHandler) throws org.apache.thrift.TException;

    public void getPriceDropsByRetailer(String retailer, int max, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPriceDropsByRetailer_call> resultHandler) throws org.apache.thrift.TException;

    public void getProductsForURLs(String retailer, List<String> urls, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getProductsForURLs_call> resultHandler) throws org.apache.thrift.TException;

    public void getPriceDropsForProductFamily(String retailer, List<String> urls, int max, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPriceDropsForProductFamily_call> resultHandler) throws org.apache.thrift.TException;

    public void getProductsForReceiptIds(String retailer, List<String> receiptIds, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getProductsForReceiptIds_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Retailer getRetailer(String retailerId) throws org.apache.thrift.TException
    {
      send_getRetailer(retailerId);
      return recv_getRetailer();
    }

    public void send_getRetailer(String retailerId) throws org.apache.thrift.TException
    {
      getRetailer_args args = new getRetailer_args();
      args.setRetailerId(retailerId);
      sendBase("getRetailer", args);
    }

    public Retailer recv_getRetailer() throws org.apache.thrift.TException
    {
      getRetailer_result result = new getRetailer_result();
      receiveBase(result, "getRetailer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRetailer failed: unknown result");
    }

    public Map<Integer,List<Category>> getAllCategoriesByLevelForRetailer(String retailerId, List<Integer> levels) throws org.apache.thrift.TException
    {
      send_getAllCategoriesByLevelForRetailer(retailerId, levels);
      return recv_getAllCategoriesByLevelForRetailer();
    }

    public void send_getAllCategoriesByLevelForRetailer(String retailerId, List<Integer> levels) throws org.apache.thrift.TException
    {
      getAllCategoriesByLevelForRetailer_args args = new getAllCategoriesByLevelForRetailer_args();
      args.setRetailerId(retailerId);
      args.setLevels(levels);
      sendBase("getAllCategoriesByLevelForRetailer", args);
    }

    public Map<Integer,List<Category>> recv_getAllCategoriesByLevelForRetailer() throws org.apache.thrift.TException
    {
      getAllCategoriesByLevelForRetailer_result result = new getAllCategoriesByLevelForRetailer_result();
      receiveBase(result, "getAllCategoriesByLevelForRetailer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllCategoriesByLevelForRetailer failed: unknown result");
    }

    public List<Category> getHomePageCategories(String retailerId) throws org.apache.thrift.TException
    {
      send_getHomePageCategories(retailerId);
      return recv_getHomePageCategories();
    }

    public void send_getHomePageCategories(String retailerId) throws org.apache.thrift.TException
    {
      getHomePageCategories_args args = new getHomePageCategories_args();
      args.setRetailerId(retailerId);
      sendBase("getHomePageCategories", args);
    }

    public List<Category> recv_getHomePageCategories() throws org.apache.thrift.TException
    {
      getHomePageCategories_result result = new getHomePageCategories_result();
      receiveBase(result, "getHomePageCategories");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHomePageCategories failed: unknown result");
    }

    public List<Category> getChildCategories(int categoryId) throws org.apache.thrift.TException
    {
      send_getChildCategories(categoryId);
      return recv_getChildCategories();
    }

    public void send_getChildCategories(int categoryId) throws org.apache.thrift.TException
    {
      getChildCategories_args args = new getChildCategories_args();
      args.setCategoryId(categoryId);
      sendBase("getChildCategories", args);
    }

    public List<Category> recv_getChildCategories() throws org.apache.thrift.TException
    {
      getChildCategories_result result = new getChildCategories_result();
      receiveBase(result, "getChildCategories");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getChildCategories failed: unknown result");
    }

    public List<Category> getCategoryPath(int categoryId) throws org.apache.thrift.TException
    {
      send_getCategoryPath(categoryId);
      return recv_getCategoryPath();
    }

    public void send_getCategoryPath(int categoryId) throws org.apache.thrift.TException
    {
      getCategoryPath_args args = new getCategoryPath_args();
      args.setCategoryId(categoryId);
      sendBase("getCategoryPath", args);
    }

    public List<Category> recv_getCategoryPath() throws org.apache.thrift.TException
    {
      getCategoryPath_result result = new getCategoryPath_result();
      receiveBase(result, "getCategoryPath");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCategoryPath failed: unknown result");
    }

    public ProductList getProducts(int categoryId, LookupIdx lookup, List<ProductFilter> filters, SortCriterion sortCriterion) throws org.apache.thrift.TException
    {
      send_getProducts(categoryId, lookup, filters, sortCriterion);
      return recv_getProducts();
    }

    public void send_getProducts(int categoryId, LookupIdx lookup, List<ProductFilter> filters, SortCriterion sortCriterion) throws org.apache.thrift.TException
    {
      getProducts_args args = new getProducts_args();
      args.setCategoryId(categoryId);
      args.setLookup(lookup);
      args.setFilters(filters);
      args.setSortCriterion(sortCriterion);
      sendBase("getProducts", args);
    }

    public ProductList recv_getProducts() throws org.apache.thrift.TException
    {
      getProducts_result result = new getProducts_result();
      receiveBase(result, "getProducts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProducts failed: unknown result");
    }

    public List<Product> getProductsByIds(List<Integer> productIdList) throws org.apache.thrift.TException
    {
      send_getProductsByIds(productIdList);
      return recv_getProductsByIds();
    }

    public void send_getProductsByIds(List<Integer> productIdList) throws org.apache.thrift.TException
    {
      getProductsByIds_args args = new getProductsByIds_args();
      args.setProductIdList(productIdList);
      sendBase("getProductsByIds", args);
    }

    public List<Product> recv_getProductsByIds() throws org.apache.thrift.TException
    {
      getProductsByIds_result result = new getProductsByIds_result();
      receiveBase(result, "getProductsByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductsByIds failed: unknown result");
    }

    public ProductList getTopPriceDropsByCategory(int categoryId, LookupIdx lookup) throws org.apache.thrift.TException
    {
      send_getTopPriceDropsByCategory(categoryId, lookup);
      return recv_getTopPriceDropsByCategory();
    }

    public void send_getTopPriceDropsByCategory(int categoryId, LookupIdx lookup) throws org.apache.thrift.TException
    {
      getTopPriceDropsByCategory_args args = new getTopPriceDropsByCategory_args();
      args.setCategoryId(categoryId);
      args.setLookup(lookup);
      sendBase("getTopPriceDropsByCategory", args);
    }

    public ProductList recv_getTopPriceDropsByCategory() throws org.apache.thrift.TException
    {
      getTopPriceDropsByCategory_result result = new getTopPriceDropsByCategory_result();
      receiveBase(result, "getTopPriceDropsByCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTopPriceDropsByCategory failed: unknown result");
    }

    public ProductList getTopPriceDropsByRetailer(String retailer, LookupIdx lookup) throws org.apache.thrift.TException
    {
      send_getTopPriceDropsByRetailer(retailer, lookup);
      return recv_getTopPriceDropsByRetailer();
    }

    public void send_getTopPriceDropsByRetailer(String retailer, LookupIdx lookup) throws org.apache.thrift.TException
    {
      getTopPriceDropsByRetailer_args args = new getTopPriceDropsByRetailer_args();
      args.setRetailer(retailer);
      args.setLookup(lookup);
      sendBase("getTopPriceDropsByRetailer", args);
    }

    public ProductList recv_getTopPriceDropsByRetailer() throws org.apache.thrift.TException
    {
      getTopPriceDropsByRetailer_result result = new getTopPriceDropsByRetailer_result();
      receiveBase(result, "getTopPriceDropsByRetailer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTopPriceDropsByRetailer failed: unknown result");
    }

    public Map<String,ProductList> getPriceDropsByCategory(int categoryId, int max) throws org.apache.thrift.TException
    {
      send_getPriceDropsByCategory(categoryId, max);
      return recv_getPriceDropsByCategory();
    }

    public void send_getPriceDropsByCategory(int categoryId, int max) throws org.apache.thrift.TException
    {
      getPriceDropsByCategory_args args = new getPriceDropsByCategory_args();
      args.setCategoryId(categoryId);
      args.setMax(max);
      sendBase("getPriceDropsByCategory", args);
    }

    public Map<String,ProductList> recv_getPriceDropsByCategory() throws org.apache.thrift.TException
    {
      getPriceDropsByCategory_result result = new getPriceDropsByCategory_result();
      receiveBase(result, "getPriceDropsByCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPriceDropsByCategory failed: unknown result");
    }

    public Map<String,ProductList> getPriceDropsByRetailer(String retailer, int max) throws org.apache.thrift.TException
    {
      send_getPriceDropsByRetailer(retailer, max);
      return recv_getPriceDropsByRetailer();
    }

    public void send_getPriceDropsByRetailer(String retailer, int max) throws org.apache.thrift.TException
    {
      getPriceDropsByRetailer_args args = new getPriceDropsByRetailer_args();
      args.setRetailer(retailer);
      args.setMax(max);
      sendBase("getPriceDropsByRetailer", args);
    }

    public Map<String,ProductList> recv_getPriceDropsByRetailer() throws org.apache.thrift.TException
    {
      getPriceDropsByRetailer_result result = new getPriceDropsByRetailer_result();
      receiveBase(result, "getPriceDropsByRetailer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPriceDropsByRetailer failed: unknown result");
    }

    public Map<String,Product> getProductsForURLs(String retailer, List<String> urls) throws org.apache.thrift.TException
    {
      send_getProductsForURLs(retailer, urls);
      return recv_getProductsForURLs();
    }

    public void send_getProductsForURLs(String retailer, List<String> urls) throws org.apache.thrift.TException
    {
      getProductsForURLs_args args = new getProductsForURLs_args();
      args.setRetailer(retailer);
      args.setUrls(urls);
      sendBase("getProductsForURLs", args);
    }

    public Map<String,Product> recv_getProductsForURLs() throws org.apache.thrift.TException
    {
      getProductsForURLs_result result = new getProductsForURLs_result();
      receiveBase(result, "getProductsForURLs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductsForURLs failed: unknown result");
    }

    public Map<String,ProductList> getPriceDropsForProductFamily(String retailer, List<String> urls, int max) throws org.apache.thrift.TException
    {
      send_getPriceDropsForProductFamily(retailer, urls, max);
      return recv_getPriceDropsForProductFamily();
    }

    public void send_getPriceDropsForProductFamily(String retailer, List<String> urls, int max) throws org.apache.thrift.TException
    {
      getPriceDropsForProductFamily_args args = new getPriceDropsForProductFamily_args();
      args.setRetailer(retailer);
      args.setUrls(urls);
      args.setMax(max);
      sendBase("getPriceDropsForProductFamily", args);
    }

    public Map<String,ProductList> recv_getPriceDropsForProductFamily() throws org.apache.thrift.TException
    {
      getPriceDropsForProductFamily_result result = new getPriceDropsForProductFamily_result();
      receiveBase(result, "getPriceDropsForProductFamily");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPriceDropsForProductFamily failed: unknown result");
    }

    public Map<String,Product> getProductsForReceiptIds(String retailer, List<String> receiptIds) throws org.apache.thrift.TException
    {
      send_getProductsForReceiptIds(retailer, receiptIds);
      return recv_getProductsForReceiptIds();
    }

    public void send_getProductsForReceiptIds(String retailer, List<String> receiptIds) throws org.apache.thrift.TException
    {
      getProductsForReceiptIds_args args = new getProductsForReceiptIds_args();
      args.setRetailer(retailer);
      args.setReceiptIds(receiptIds);
      sendBase("getProductsForReceiptIds", args);
    }

    public Map<String,Product> recv_getProductsForReceiptIds() throws org.apache.thrift.TException
    {
      getProductsForReceiptIds_result result = new getProductsForReceiptIds_result();
      receiveBase(result, "getProductsForReceiptIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductsForReceiptIds failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getRetailer(String retailerId, org.apache.thrift.async.AsyncMethodCallback<getRetailer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRetailer_call method_call = new getRetailer_call(retailerId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRetailer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String retailerId;
      public getRetailer_call(String retailerId, org.apache.thrift.async.AsyncMethodCallback<getRetailer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.retailerId = retailerId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRetailer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRetailer_args args = new getRetailer_args();
        args.setRetailerId(retailerId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Retailer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRetailer();
      }
    }

    public void getAllCategoriesByLevelForRetailer(String retailerId, List<Integer> levels, org.apache.thrift.async.AsyncMethodCallback<getAllCategoriesByLevelForRetailer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllCategoriesByLevelForRetailer_call method_call = new getAllCategoriesByLevelForRetailer_call(retailerId, levels, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllCategoriesByLevelForRetailer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String retailerId;
      private List<Integer> levels;
      public getAllCategoriesByLevelForRetailer_call(String retailerId, List<Integer> levels, org.apache.thrift.async.AsyncMethodCallback<getAllCategoriesByLevelForRetailer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.retailerId = retailerId;
        this.levels = levels;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllCategoriesByLevelForRetailer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllCategoriesByLevelForRetailer_args args = new getAllCategoriesByLevelForRetailer_args();
        args.setRetailerId(retailerId);
        args.setLevels(levels);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,List<Category>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllCategoriesByLevelForRetailer();
      }
    }

    public void getHomePageCategories(String retailerId, org.apache.thrift.async.AsyncMethodCallback<getHomePageCategories_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHomePageCategories_call method_call = new getHomePageCategories_call(retailerId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHomePageCategories_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String retailerId;
      public getHomePageCategories_call(String retailerId, org.apache.thrift.async.AsyncMethodCallback<getHomePageCategories_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.retailerId = retailerId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHomePageCategories", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHomePageCategories_args args = new getHomePageCategories_args();
        args.setRetailerId(retailerId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Category> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHomePageCategories();
      }
    }

    public void getChildCategories(int categoryId, org.apache.thrift.async.AsyncMethodCallback<getChildCategories_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getChildCategories_call method_call = new getChildCategories_call(categoryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getChildCategories_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int categoryId;
      public getChildCategories_call(int categoryId, org.apache.thrift.async.AsyncMethodCallback<getChildCategories_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.categoryId = categoryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getChildCategories", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getChildCategories_args args = new getChildCategories_args();
        args.setCategoryId(categoryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Category> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getChildCategories();
      }
    }

    public void getCategoryPath(int categoryId, org.apache.thrift.async.AsyncMethodCallback<getCategoryPath_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCategoryPath_call method_call = new getCategoryPath_call(categoryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCategoryPath_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int categoryId;
      public getCategoryPath_call(int categoryId, org.apache.thrift.async.AsyncMethodCallback<getCategoryPath_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.categoryId = categoryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCategoryPath", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCategoryPath_args args = new getCategoryPath_args();
        args.setCategoryId(categoryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Category> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCategoryPath();
      }
    }

    public void getProducts(int categoryId, LookupIdx lookup, List<ProductFilter> filters, SortCriterion sortCriterion, org.apache.thrift.async.AsyncMethodCallback<getProducts_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProducts_call method_call = new getProducts_call(categoryId, lookup, filters, sortCriterion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProducts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int categoryId;
      private LookupIdx lookup;
      private List<ProductFilter> filters;
      private SortCriterion sortCriterion;
      public getProducts_call(int categoryId, LookupIdx lookup, List<ProductFilter> filters, SortCriterion sortCriterion, org.apache.thrift.async.AsyncMethodCallback<getProducts_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.categoryId = categoryId;
        this.lookup = lookup;
        this.filters = filters;
        this.sortCriterion = sortCriterion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProducts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProducts_args args = new getProducts_args();
        args.setCategoryId(categoryId);
        args.setLookup(lookup);
        args.setFilters(filters);
        args.setSortCriterion(sortCriterion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProductList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProducts();
      }
    }

    public void getProductsByIds(List<Integer> productIdList, org.apache.thrift.async.AsyncMethodCallback<getProductsByIds_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductsByIds_call method_call = new getProductsByIds_call(productIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductsByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> productIdList;
      public getProductsByIds_call(List<Integer> productIdList, org.apache.thrift.async.AsyncMethodCallback<getProductsByIds_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productIdList = productIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductsByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductsByIds_args args = new getProductsByIds_args();
        args.setProductIdList(productIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Product> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductsByIds();
      }
    }

    public void getTopPriceDropsByCategory(int categoryId, LookupIdx lookup, org.apache.thrift.async.AsyncMethodCallback<getTopPriceDropsByCategory_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTopPriceDropsByCategory_call method_call = new getTopPriceDropsByCategory_call(categoryId, lookup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTopPriceDropsByCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int categoryId;
      private LookupIdx lookup;
      public getTopPriceDropsByCategory_call(int categoryId, LookupIdx lookup, org.apache.thrift.async.AsyncMethodCallback<getTopPriceDropsByCategory_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.categoryId = categoryId;
        this.lookup = lookup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTopPriceDropsByCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTopPriceDropsByCategory_args args = new getTopPriceDropsByCategory_args();
        args.setCategoryId(categoryId);
        args.setLookup(lookup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProductList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTopPriceDropsByCategory();
      }
    }

    public void getTopPriceDropsByRetailer(String retailer, LookupIdx lookup, org.apache.thrift.async.AsyncMethodCallback<getTopPriceDropsByRetailer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTopPriceDropsByRetailer_call method_call = new getTopPriceDropsByRetailer_call(retailer, lookup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTopPriceDropsByRetailer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String retailer;
      private LookupIdx lookup;
      public getTopPriceDropsByRetailer_call(String retailer, LookupIdx lookup, org.apache.thrift.async.AsyncMethodCallback<getTopPriceDropsByRetailer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.retailer = retailer;
        this.lookup = lookup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTopPriceDropsByRetailer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTopPriceDropsByRetailer_args args = new getTopPriceDropsByRetailer_args();
        args.setRetailer(retailer);
        args.setLookup(lookup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProductList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTopPriceDropsByRetailer();
      }
    }

    public void getPriceDropsByCategory(int categoryId, int max, org.apache.thrift.async.AsyncMethodCallback<getPriceDropsByCategory_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPriceDropsByCategory_call method_call = new getPriceDropsByCategory_call(categoryId, max, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPriceDropsByCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int categoryId;
      private int max;
      public getPriceDropsByCategory_call(int categoryId, int max, org.apache.thrift.async.AsyncMethodCallback<getPriceDropsByCategory_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.categoryId = categoryId;
        this.max = max;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPriceDropsByCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPriceDropsByCategory_args args = new getPriceDropsByCategory_args();
        args.setCategoryId(categoryId);
        args.setMax(max);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,ProductList> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPriceDropsByCategory();
      }
    }

    public void getPriceDropsByRetailer(String retailer, int max, org.apache.thrift.async.AsyncMethodCallback<getPriceDropsByRetailer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPriceDropsByRetailer_call method_call = new getPriceDropsByRetailer_call(retailer, max, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPriceDropsByRetailer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String retailer;
      private int max;
      public getPriceDropsByRetailer_call(String retailer, int max, org.apache.thrift.async.AsyncMethodCallback<getPriceDropsByRetailer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.retailer = retailer;
        this.max = max;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPriceDropsByRetailer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPriceDropsByRetailer_args args = new getPriceDropsByRetailer_args();
        args.setRetailer(retailer);
        args.setMax(max);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,ProductList> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPriceDropsByRetailer();
      }
    }

    public void getProductsForURLs(String retailer, List<String> urls, org.apache.thrift.async.AsyncMethodCallback<getProductsForURLs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductsForURLs_call method_call = new getProductsForURLs_call(retailer, urls, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductsForURLs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String retailer;
      private List<String> urls;
      public getProductsForURLs_call(String retailer, List<String> urls, org.apache.thrift.async.AsyncMethodCallback<getProductsForURLs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.retailer = retailer;
        this.urls = urls;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductsForURLs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductsForURLs_args args = new getProductsForURLs_args();
        args.setRetailer(retailer);
        args.setUrls(urls);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Product> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductsForURLs();
      }
    }

    public void getPriceDropsForProductFamily(String retailer, List<String> urls, int max, org.apache.thrift.async.AsyncMethodCallback<getPriceDropsForProductFamily_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPriceDropsForProductFamily_call method_call = new getPriceDropsForProductFamily_call(retailer, urls, max, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPriceDropsForProductFamily_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String retailer;
      private List<String> urls;
      private int max;
      public getPriceDropsForProductFamily_call(String retailer, List<String> urls, int max, org.apache.thrift.async.AsyncMethodCallback<getPriceDropsForProductFamily_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.retailer = retailer;
        this.urls = urls;
        this.max = max;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPriceDropsForProductFamily", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPriceDropsForProductFamily_args args = new getPriceDropsForProductFamily_args();
        args.setRetailer(retailer);
        args.setUrls(urls);
        args.setMax(max);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,ProductList> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPriceDropsForProductFamily();
      }
    }

    public void getProductsForReceiptIds(String retailer, List<String> receiptIds, org.apache.thrift.async.AsyncMethodCallback<getProductsForReceiptIds_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductsForReceiptIds_call method_call = new getProductsForReceiptIds_call(retailer, receiptIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductsForReceiptIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String retailer;
      private List<String> receiptIds;
      public getProductsForReceiptIds_call(String retailer, List<String> receiptIds, org.apache.thrift.async.AsyncMethodCallback<getProductsForReceiptIds_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.retailer = retailer;
        this.receiptIds = receiptIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductsForReceiptIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductsForReceiptIds_args args = new getProductsForReceiptIds_args();
        args.setRetailer(retailer);
        args.setReceiptIds(receiptIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Product> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductsForReceiptIds();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getRetailer", new getRetailer());
      processMap.put("getAllCategoriesByLevelForRetailer", new getAllCategoriesByLevelForRetailer());
      processMap.put("getHomePageCategories", new getHomePageCategories());
      processMap.put("getChildCategories", new getChildCategories());
      processMap.put("getCategoryPath", new getCategoryPath());
      processMap.put("getProducts", new getProducts());
      processMap.put("getProductsByIds", new getProductsByIds());
      processMap.put("getTopPriceDropsByCategory", new getTopPriceDropsByCategory());
      processMap.put("getTopPriceDropsByRetailer", new getTopPriceDropsByRetailer());
      processMap.put("getPriceDropsByCategory", new getPriceDropsByCategory());
      processMap.put("getPriceDropsByRetailer", new getPriceDropsByRetailer());
      processMap.put("getProductsForURLs", new getProductsForURLs());
      processMap.put("getPriceDropsForProductFamily", new getPriceDropsForProductFamily());
      processMap.put("getProductsForReceiptIds", new getProductsForReceiptIds());
      return processMap;
    }

    public static class getRetailer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRetailer_args> {
      public getRetailer() {
        super("getRetailer");
      }

      public getRetailer_args getEmptyArgsInstance() {
        return new getRetailer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRetailer_result getResult(I iface, getRetailer_args args) throws org.apache.thrift.TException {
        getRetailer_result result = new getRetailer_result();
        result.success = iface.getRetailer(args.retailerId);
        return result;
      }
    }

    public static class getAllCategoriesByLevelForRetailer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllCategoriesByLevelForRetailer_args> {
      public getAllCategoriesByLevelForRetailer() {
        super("getAllCategoriesByLevelForRetailer");
      }

      public getAllCategoriesByLevelForRetailer_args getEmptyArgsInstance() {
        return new getAllCategoriesByLevelForRetailer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllCategoriesByLevelForRetailer_result getResult(I iface, getAllCategoriesByLevelForRetailer_args args) throws org.apache.thrift.TException {
        getAllCategoriesByLevelForRetailer_result result = new getAllCategoriesByLevelForRetailer_result();
        result.success = iface.getAllCategoriesByLevelForRetailer(args.retailerId, args.levels);
        return result;
      }
    }

    public static class getHomePageCategories<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHomePageCategories_args> {
      public getHomePageCategories() {
        super("getHomePageCategories");
      }

      public getHomePageCategories_args getEmptyArgsInstance() {
        return new getHomePageCategories_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHomePageCategories_result getResult(I iface, getHomePageCategories_args args) throws org.apache.thrift.TException {
        getHomePageCategories_result result = new getHomePageCategories_result();
        result.success = iface.getHomePageCategories(args.retailerId);
        return result;
      }
    }

    public static class getChildCategories<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getChildCategories_args> {
      public getChildCategories() {
        super("getChildCategories");
      }

      public getChildCategories_args getEmptyArgsInstance() {
        return new getChildCategories_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getChildCategories_result getResult(I iface, getChildCategories_args args) throws org.apache.thrift.TException {
        getChildCategories_result result = new getChildCategories_result();
        result.success = iface.getChildCategories(args.categoryId);
        return result;
      }
    }

    public static class getCategoryPath<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCategoryPath_args> {
      public getCategoryPath() {
        super("getCategoryPath");
      }

      public getCategoryPath_args getEmptyArgsInstance() {
        return new getCategoryPath_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCategoryPath_result getResult(I iface, getCategoryPath_args args) throws org.apache.thrift.TException {
        getCategoryPath_result result = new getCategoryPath_result();
        result.success = iface.getCategoryPath(args.categoryId);
        return result;
      }
    }

    public static class getProducts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProducts_args> {
      public getProducts() {
        super("getProducts");
      }

      public getProducts_args getEmptyArgsInstance() {
        return new getProducts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProducts_result getResult(I iface, getProducts_args args) throws org.apache.thrift.TException {
        getProducts_result result = new getProducts_result();
        result.success = iface.getProducts(args.categoryId, args.lookup, args.filters, args.sortCriterion);
        return result;
      }
    }

    public static class getProductsByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductsByIds_args> {
      public getProductsByIds() {
        super("getProductsByIds");
      }

      public getProductsByIds_args getEmptyArgsInstance() {
        return new getProductsByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductsByIds_result getResult(I iface, getProductsByIds_args args) throws org.apache.thrift.TException {
        getProductsByIds_result result = new getProductsByIds_result();
        result.success = iface.getProductsByIds(args.productIdList);
        return result;
      }
    }

    public static class getTopPriceDropsByCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTopPriceDropsByCategory_args> {
      public getTopPriceDropsByCategory() {
        super("getTopPriceDropsByCategory");
      }

      public getTopPriceDropsByCategory_args getEmptyArgsInstance() {
        return new getTopPriceDropsByCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTopPriceDropsByCategory_result getResult(I iface, getTopPriceDropsByCategory_args args) throws org.apache.thrift.TException {
        getTopPriceDropsByCategory_result result = new getTopPriceDropsByCategory_result();
        result.success = iface.getTopPriceDropsByCategory(args.categoryId, args.lookup);
        return result;
      }
    }

    public static class getTopPriceDropsByRetailer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTopPriceDropsByRetailer_args> {
      public getTopPriceDropsByRetailer() {
        super("getTopPriceDropsByRetailer");
      }

      public getTopPriceDropsByRetailer_args getEmptyArgsInstance() {
        return new getTopPriceDropsByRetailer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTopPriceDropsByRetailer_result getResult(I iface, getTopPriceDropsByRetailer_args args) throws org.apache.thrift.TException {
        getTopPriceDropsByRetailer_result result = new getTopPriceDropsByRetailer_result();
        result.success = iface.getTopPriceDropsByRetailer(args.retailer, args.lookup);
        return result;
      }
    }

    public static class getPriceDropsByCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPriceDropsByCategory_args> {
      public getPriceDropsByCategory() {
        super("getPriceDropsByCategory");
      }

      public getPriceDropsByCategory_args getEmptyArgsInstance() {
        return new getPriceDropsByCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPriceDropsByCategory_result getResult(I iface, getPriceDropsByCategory_args args) throws org.apache.thrift.TException {
        getPriceDropsByCategory_result result = new getPriceDropsByCategory_result();
        result.success = iface.getPriceDropsByCategory(args.categoryId, args.max);
        return result;
      }
    }

    public static class getPriceDropsByRetailer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPriceDropsByRetailer_args> {
      public getPriceDropsByRetailer() {
        super("getPriceDropsByRetailer");
      }

      public getPriceDropsByRetailer_args getEmptyArgsInstance() {
        return new getPriceDropsByRetailer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPriceDropsByRetailer_result getResult(I iface, getPriceDropsByRetailer_args args) throws org.apache.thrift.TException {
        getPriceDropsByRetailer_result result = new getPriceDropsByRetailer_result();
        result.success = iface.getPriceDropsByRetailer(args.retailer, args.max);
        return result;
      }
    }

    public static class getProductsForURLs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductsForURLs_args> {
      public getProductsForURLs() {
        super("getProductsForURLs");
      }

      public getProductsForURLs_args getEmptyArgsInstance() {
        return new getProductsForURLs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductsForURLs_result getResult(I iface, getProductsForURLs_args args) throws org.apache.thrift.TException {
        getProductsForURLs_result result = new getProductsForURLs_result();
        result.success = iface.getProductsForURLs(args.retailer, args.urls);
        return result;
      }
    }

    public static class getPriceDropsForProductFamily<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPriceDropsForProductFamily_args> {
      public getPriceDropsForProductFamily() {
        super("getPriceDropsForProductFamily");
      }

      public getPriceDropsForProductFamily_args getEmptyArgsInstance() {
        return new getPriceDropsForProductFamily_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPriceDropsForProductFamily_result getResult(I iface, getPriceDropsForProductFamily_args args) throws org.apache.thrift.TException {
        getPriceDropsForProductFamily_result result = new getPriceDropsForProductFamily_result();
        result.success = iface.getPriceDropsForProductFamily(args.retailer, args.urls, args.max);
        return result;
      }
    }

    public static class getProductsForReceiptIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductsForReceiptIds_args> {
      public getProductsForReceiptIds() {
        super("getProductsForReceiptIds");
      }

      public getProductsForReceiptIds_args getEmptyArgsInstance() {
        return new getProductsForReceiptIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductsForReceiptIds_result getResult(I iface, getProductsForReceiptIds_args args) throws org.apache.thrift.TException {
        getProductsForReceiptIds_result result = new getProductsForReceiptIds_result();
        result.success = iface.getProductsForReceiptIds(args.retailer, args.receiptIds);
        return result;
      }
    }

  }

  public static class getRetailer_args implements org.apache.thrift.TBase<getRetailer_args, getRetailer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRetailer_args");

    private static final org.apache.thrift.protocol.TField RETAILER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("retailerId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRetailer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRetailer_argsTupleSchemeFactory());
    }

    public String retailerId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RETAILER_ID((short)1, "retailerId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RETAILER_ID
            return RETAILER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RETAILER_ID, new org.apache.thrift.meta_data.FieldMetaData("retailerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRetailer_args.class, metaDataMap);
    }

    public getRetailer_args() {
    }

    public getRetailer_args(
      String retailerId)
    {
      this();
      this.retailerId = retailerId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRetailer_args(getRetailer_args other) {
      if (other.isSetRetailerId()) {
        this.retailerId = other.retailerId;
      }
    }

    public getRetailer_args deepCopy() {
      return new getRetailer_args(this);
    }

    @Override
    public void clear() {
      this.retailerId = null;
    }

    public String getRetailerId() {
      return this.retailerId;
    }

    public getRetailer_args setRetailerId(String retailerId) {
      this.retailerId = retailerId;
      return this;
    }

    public void unsetRetailerId() {
      this.retailerId = null;
    }

    /** Returns true if field retailerId is set (has been assigned a value) and false otherwise */
    public boolean isSetRetailerId() {
      return this.retailerId != null;
    }

    public void setRetailerIdIsSet(boolean value) {
      if (!value) {
        this.retailerId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RETAILER_ID:
        if (value == null) {
          unsetRetailerId();
        } else {
          setRetailerId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RETAILER_ID:
        return getRetailerId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RETAILER_ID:
        return isSetRetailerId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRetailer_args)
        return this.equals((getRetailer_args)that);
      return false;
    }

    public boolean equals(getRetailer_args that) {
      if (that == null)
        return false;

      boolean this_present_retailerId = true && this.isSetRetailerId();
      boolean that_present_retailerId = true && that.isSetRetailerId();
      if (this_present_retailerId || that_present_retailerId) {
        if (!(this_present_retailerId && that_present_retailerId))
          return false;
        if (!this.retailerId.equals(that.retailerId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRetailer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRetailer_args typedOther = (getRetailer_args)other;

      lastComparison = Boolean.valueOf(isSetRetailerId()).compareTo(typedOther.isSetRetailerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRetailerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retailerId, typedOther.retailerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRetailer_args(");
      boolean first = true;

      sb.append("retailerId:");
      if (this.retailerId == null) {
        sb.append("null");
      } else {
        sb.append(this.retailerId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRetailer_argsStandardSchemeFactory implements SchemeFactory {
      public getRetailer_argsStandardScheme getScheme() {
        return new getRetailer_argsStandardScheme();
      }
    }

    private static class getRetailer_argsStandardScheme extends StandardScheme<getRetailer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRetailer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RETAILER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.retailerId = iprot.readString();
                struct.setRetailerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRetailer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.retailerId != null) {
          oprot.writeFieldBegin(RETAILER_ID_FIELD_DESC);
          oprot.writeString(struct.retailerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRetailer_argsTupleSchemeFactory implements SchemeFactory {
      public getRetailer_argsTupleScheme getScheme() {
        return new getRetailer_argsTupleScheme();
      }
    }

    private static class getRetailer_argsTupleScheme extends TupleScheme<getRetailer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRetailer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRetailerId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRetailerId()) {
          oprot.writeString(struct.retailerId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRetailer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.retailerId = iprot.readString();
          struct.setRetailerIdIsSet(true);
        }
      }
    }

  }

  public static class getRetailer_result implements org.apache.thrift.TBase<getRetailer_result, getRetailer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRetailer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRetailer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRetailer_resultTupleSchemeFactory());
    }

    public Retailer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Retailer.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRetailer_result.class, metaDataMap);
    }

    public getRetailer_result() {
    }

    public getRetailer_result(
      Retailer success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRetailer_result(getRetailer_result other) {
      if (other.isSetSuccess()) {
        this.success = new Retailer(other.success);
      }
    }

    public getRetailer_result deepCopy() {
      return new getRetailer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Retailer getSuccess() {
      return this.success;
    }

    public getRetailer_result setSuccess(Retailer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Retailer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRetailer_result)
        return this.equals((getRetailer_result)that);
      return false;
    }

    public boolean equals(getRetailer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRetailer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRetailer_result typedOther = (getRetailer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRetailer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRetailer_resultStandardSchemeFactory implements SchemeFactory {
      public getRetailer_resultStandardScheme getScheme() {
        return new getRetailer_resultStandardScheme();
      }
    }

    private static class getRetailer_resultStandardScheme extends StandardScheme<getRetailer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRetailer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Retailer();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRetailer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRetailer_resultTupleSchemeFactory implements SchemeFactory {
      public getRetailer_resultTupleScheme getScheme() {
        return new getRetailer_resultTupleScheme();
      }
    }

    private static class getRetailer_resultTupleScheme extends TupleScheme<getRetailer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRetailer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRetailer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Retailer();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllCategoriesByLevelForRetailer_args implements org.apache.thrift.TBase<getAllCategoriesByLevelForRetailer_args, getAllCategoriesByLevelForRetailer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllCategoriesByLevelForRetailer_args");

    private static final org.apache.thrift.protocol.TField RETAILER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("retailerId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LEVELS_FIELD_DESC = new org.apache.thrift.protocol.TField("levels", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllCategoriesByLevelForRetailer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllCategoriesByLevelForRetailer_argsTupleSchemeFactory());
    }

    public String retailerId; // required
    public List<Integer> levels; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RETAILER_ID((short)1, "retailerId"),
      LEVELS((short)2, "levels");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RETAILER_ID
            return RETAILER_ID;
          case 2: // LEVELS
            return LEVELS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RETAILER_ID, new org.apache.thrift.meta_data.FieldMetaData("retailerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LEVELS, new org.apache.thrift.meta_data.FieldMetaData("levels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllCategoriesByLevelForRetailer_args.class, metaDataMap);
    }

    public getAllCategoriesByLevelForRetailer_args() {
    }

    public getAllCategoriesByLevelForRetailer_args(
      String retailerId,
      List<Integer> levels)
    {
      this();
      this.retailerId = retailerId;
      this.levels = levels;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllCategoriesByLevelForRetailer_args(getAllCategoriesByLevelForRetailer_args other) {
      if (other.isSetRetailerId()) {
        this.retailerId = other.retailerId;
      }
      if (other.isSetLevels()) {
        List<Integer> __this__levels = new ArrayList<Integer>();
        for (Integer other_element : other.levels) {
          __this__levels.add(other_element);
        }
        this.levels = __this__levels;
      }
    }

    public getAllCategoriesByLevelForRetailer_args deepCopy() {
      return new getAllCategoriesByLevelForRetailer_args(this);
    }

    @Override
    public void clear() {
      this.retailerId = null;
      this.levels = null;
    }

    public String getRetailerId() {
      return this.retailerId;
    }

    public getAllCategoriesByLevelForRetailer_args setRetailerId(String retailerId) {
      this.retailerId = retailerId;
      return this;
    }

    public void unsetRetailerId() {
      this.retailerId = null;
    }

    /** Returns true if field retailerId is set (has been assigned a value) and false otherwise */
    public boolean isSetRetailerId() {
      return this.retailerId != null;
    }

    public void setRetailerIdIsSet(boolean value) {
      if (!value) {
        this.retailerId = null;
      }
    }

    public int getLevelsSize() {
      return (this.levels == null) ? 0 : this.levels.size();
    }

    public java.util.Iterator<Integer> getLevelsIterator() {
      return (this.levels == null) ? null : this.levels.iterator();
    }

    public void addToLevels(int elem) {
      if (this.levels == null) {
        this.levels = new ArrayList<Integer>();
      }
      this.levels.add(elem);
    }

    public List<Integer> getLevels() {
      return this.levels;
    }

    public getAllCategoriesByLevelForRetailer_args setLevels(List<Integer> levels) {
      this.levels = levels;
      return this;
    }

    public void unsetLevels() {
      this.levels = null;
    }

    /** Returns true if field levels is set (has been assigned a value) and false otherwise */
    public boolean isSetLevels() {
      return this.levels != null;
    }

    public void setLevelsIsSet(boolean value) {
      if (!value) {
        this.levels = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RETAILER_ID:
        if (value == null) {
          unsetRetailerId();
        } else {
          setRetailerId((String)value);
        }
        break;

      case LEVELS:
        if (value == null) {
          unsetLevels();
        } else {
          setLevels((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RETAILER_ID:
        return getRetailerId();

      case LEVELS:
        return getLevels();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RETAILER_ID:
        return isSetRetailerId();
      case LEVELS:
        return isSetLevels();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllCategoriesByLevelForRetailer_args)
        return this.equals((getAllCategoriesByLevelForRetailer_args)that);
      return false;
    }

    public boolean equals(getAllCategoriesByLevelForRetailer_args that) {
      if (that == null)
        return false;

      boolean this_present_retailerId = true && this.isSetRetailerId();
      boolean that_present_retailerId = true && that.isSetRetailerId();
      if (this_present_retailerId || that_present_retailerId) {
        if (!(this_present_retailerId && that_present_retailerId))
          return false;
        if (!this.retailerId.equals(that.retailerId))
          return false;
      }

      boolean this_present_levels = true && this.isSetLevels();
      boolean that_present_levels = true && that.isSetLevels();
      if (this_present_levels || that_present_levels) {
        if (!(this_present_levels && that_present_levels))
          return false;
        if (!this.levels.equals(that.levels))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAllCategoriesByLevelForRetailer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAllCategoriesByLevelForRetailer_args typedOther = (getAllCategoriesByLevelForRetailer_args)other;

      lastComparison = Boolean.valueOf(isSetRetailerId()).compareTo(typedOther.isSetRetailerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRetailerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retailerId, typedOther.retailerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLevels()).compareTo(typedOther.isSetLevels());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLevels()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.levels, typedOther.levels);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllCategoriesByLevelForRetailer_args(");
      boolean first = true;

      sb.append("retailerId:");
      if (this.retailerId == null) {
        sb.append("null");
      } else {
        sb.append(this.retailerId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("levels:");
      if (this.levels == null) {
        sb.append("null");
      } else {
        sb.append(this.levels);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllCategoriesByLevelForRetailer_argsStandardSchemeFactory implements SchemeFactory {
      public getAllCategoriesByLevelForRetailer_argsStandardScheme getScheme() {
        return new getAllCategoriesByLevelForRetailer_argsStandardScheme();
      }
    }

    private static class getAllCategoriesByLevelForRetailer_argsStandardScheme extends StandardScheme<getAllCategoriesByLevelForRetailer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllCategoriesByLevelForRetailer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RETAILER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.retailerId = iprot.readString();
                struct.setRetailerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LEVELS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                  struct.levels = new ArrayList<Integer>(_list74.size);
                  for (int _i75 = 0; _i75 < _list74.size; ++_i75)
                  {
                    int _elem76; // required
                    _elem76 = iprot.readI32();
                    struct.levels.add(_elem76);
                  }
                  iprot.readListEnd();
                }
                struct.setLevelsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllCategoriesByLevelForRetailer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.retailerId != null) {
          oprot.writeFieldBegin(RETAILER_ID_FIELD_DESC);
          oprot.writeString(struct.retailerId);
          oprot.writeFieldEnd();
        }
        if (struct.levels != null) {
          oprot.writeFieldBegin(LEVELS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.levels.size()));
            for (int _iter77 : struct.levels)
            {
              oprot.writeI32(_iter77);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllCategoriesByLevelForRetailer_argsTupleSchemeFactory implements SchemeFactory {
      public getAllCategoriesByLevelForRetailer_argsTupleScheme getScheme() {
        return new getAllCategoriesByLevelForRetailer_argsTupleScheme();
      }
    }

    private static class getAllCategoriesByLevelForRetailer_argsTupleScheme extends TupleScheme<getAllCategoriesByLevelForRetailer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllCategoriesByLevelForRetailer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRetailerId()) {
          optionals.set(0);
        }
        if (struct.isSetLevels()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRetailerId()) {
          oprot.writeString(struct.retailerId);
        }
        if (struct.isSetLevels()) {
          {
            oprot.writeI32(struct.levels.size());
            for (int _iter78 : struct.levels)
            {
              oprot.writeI32(_iter78);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllCategoriesByLevelForRetailer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.retailerId = iprot.readString();
          struct.setRetailerIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.levels = new ArrayList<Integer>(_list79.size);
            for (int _i80 = 0; _i80 < _list79.size; ++_i80)
            {
              int _elem81; // required
              _elem81 = iprot.readI32();
              struct.levels.add(_elem81);
            }
          }
          struct.setLevelsIsSet(true);
        }
      }
    }

  }

  public static class getAllCategoriesByLevelForRetailer_result implements org.apache.thrift.TBase<getAllCategoriesByLevelForRetailer_result, getAllCategoriesByLevelForRetailer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllCategoriesByLevelForRetailer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllCategoriesByLevelForRetailer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllCategoriesByLevelForRetailer_resultTupleSchemeFactory());
    }

    public Map<Integer,List<Category>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Category.class)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllCategoriesByLevelForRetailer_result.class, metaDataMap);
    }

    public getAllCategoriesByLevelForRetailer_result() {
    }

    public getAllCategoriesByLevelForRetailer_result(
      Map<Integer,List<Category>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllCategoriesByLevelForRetailer_result(getAllCategoriesByLevelForRetailer_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,List<Category>> __this__success = new HashMap<Integer,List<Category>>();
        for (Map.Entry<Integer, List<Category>> other_element : other.success.entrySet()) {

          Integer other_element_key = other_element.getKey();
          List<Category> other_element_value = other_element.getValue();

          Integer __this__success_copy_key = other_element_key;

          List<Category> __this__success_copy_value = new ArrayList<Category>();
          for (Category other_element_value_element : other_element_value) {
            __this__success_copy_value.add(new Category(other_element_value_element));
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getAllCategoriesByLevelForRetailer_result deepCopy() {
      return new getAllCategoriesByLevelForRetailer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, List<Category> val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,List<Category>>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,List<Category>> getSuccess() {
      return this.success;
    }

    public getAllCategoriesByLevelForRetailer_result setSuccess(Map<Integer,List<Category>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,List<Category>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllCategoriesByLevelForRetailer_result)
        return this.equals((getAllCategoriesByLevelForRetailer_result)that);
      return false;
    }

    public boolean equals(getAllCategoriesByLevelForRetailer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAllCategoriesByLevelForRetailer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAllCategoriesByLevelForRetailer_result typedOther = (getAllCategoriesByLevelForRetailer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllCategoriesByLevelForRetailer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllCategoriesByLevelForRetailer_resultStandardSchemeFactory implements SchemeFactory {
      public getAllCategoriesByLevelForRetailer_resultStandardScheme getScheme() {
        return new getAllCategoriesByLevelForRetailer_resultStandardScheme();
      }
    }

    private static class getAllCategoriesByLevelForRetailer_resultStandardScheme extends StandardScheme<getAllCategoriesByLevelForRetailer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllCategoriesByLevelForRetailer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map82 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,List<Category>>(2*_map82.size);
                  for (int _i83 = 0; _i83 < _map82.size; ++_i83)
                  {
                    int _key84; // required
                    List<Category> _val85; // required
                    _key84 = iprot.readI32();
                    {
                      org.apache.thrift.protocol.TList _list86 = iprot.readListBegin();
                      _val85 = new ArrayList<Category>(_list86.size);
                      for (int _i87 = 0; _i87 < _list86.size; ++_i87)
                      {
                        Category _elem88; // required
                        _elem88 = new Category();
                        _elem88.read(iprot);
                        _val85.add(_elem88);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key84, _val85);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllCategoriesByLevelForRetailer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<Integer, List<Category>> _iter89 : struct.success.entrySet())
            {
              oprot.writeI32(_iter89.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter89.getValue().size()));
                for (Category _iter90 : _iter89.getValue())
                {
                  _iter90.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllCategoriesByLevelForRetailer_resultTupleSchemeFactory implements SchemeFactory {
      public getAllCategoriesByLevelForRetailer_resultTupleScheme getScheme() {
        return new getAllCategoriesByLevelForRetailer_resultTupleScheme();
      }
    }

    private static class getAllCategoriesByLevelForRetailer_resultTupleScheme extends TupleScheme<getAllCategoriesByLevelForRetailer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllCategoriesByLevelForRetailer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, List<Category>> _iter91 : struct.success.entrySet())
            {
              oprot.writeI32(_iter91.getKey());
              {
                oprot.writeI32(_iter91.getValue().size());
                for (Category _iter92 : _iter91.getValue())
                {
                  _iter92.write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllCategoriesByLevelForRetailer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map93 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<Integer,List<Category>>(2*_map93.size);
            for (int _i94 = 0; _i94 < _map93.size; ++_i94)
            {
              int _key95; // required
              List<Category> _val96; // required
              _key95 = iprot.readI32();
              {
                org.apache.thrift.protocol.TList _list97 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _val96 = new ArrayList<Category>(_list97.size);
                for (int _i98 = 0; _i98 < _list97.size; ++_i98)
                {
                  Category _elem99; // required
                  _elem99 = new Category();
                  _elem99.read(iprot);
                  _val96.add(_elem99);
                }
              }
              struct.success.put(_key95, _val96);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHomePageCategories_args implements org.apache.thrift.TBase<getHomePageCategories_args, getHomePageCategories_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHomePageCategories_args");

    private static final org.apache.thrift.protocol.TField RETAILER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("retailerId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHomePageCategories_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHomePageCategories_argsTupleSchemeFactory());
    }

    public String retailerId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RETAILER_ID((short)1, "retailerId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RETAILER_ID
            return RETAILER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RETAILER_ID, new org.apache.thrift.meta_data.FieldMetaData("retailerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHomePageCategories_args.class, metaDataMap);
    }

    public getHomePageCategories_args() {
    }

    public getHomePageCategories_args(
      String retailerId)
    {
      this();
      this.retailerId = retailerId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHomePageCategories_args(getHomePageCategories_args other) {
      if (other.isSetRetailerId()) {
        this.retailerId = other.retailerId;
      }
    }

    public getHomePageCategories_args deepCopy() {
      return new getHomePageCategories_args(this);
    }

    @Override
    public void clear() {
      this.retailerId = null;
    }

    public String getRetailerId() {
      return this.retailerId;
    }

    public getHomePageCategories_args setRetailerId(String retailerId) {
      this.retailerId = retailerId;
      return this;
    }

    public void unsetRetailerId() {
      this.retailerId = null;
    }

    /** Returns true if field retailerId is set (has been assigned a value) and false otherwise */
    public boolean isSetRetailerId() {
      return this.retailerId != null;
    }

    public void setRetailerIdIsSet(boolean value) {
      if (!value) {
        this.retailerId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RETAILER_ID:
        if (value == null) {
          unsetRetailerId();
        } else {
          setRetailerId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RETAILER_ID:
        return getRetailerId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RETAILER_ID:
        return isSetRetailerId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHomePageCategories_args)
        return this.equals((getHomePageCategories_args)that);
      return false;
    }

    public boolean equals(getHomePageCategories_args that) {
      if (that == null)
        return false;

      boolean this_present_retailerId = true && this.isSetRetailerId();
      boolean that_present_retailerId = true && that.isSetRetailerId();
      if (this_present_retailerId || that_present_retailerId) {
        if (!(this_present_retailerId && that_present_retailerId))
          return false;
        if (!this.retailerId.equals(that.retailerId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHomePageCategories_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHomePageCategories_args typedOther = (getHomePageCategories_args)other;

      lastComparison = Boolean.valueOf(isSetRetailerId()).compareTo(typedOther.isSetRetailerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRetailerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retailerId, typedOther.retailerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHomePageCategories_args(");
      boolean first = true;

      sb.append("retailerId:");
      if (this.retailerId == null) {
        sb.append("null");
      } else {
        sb.append(this.retailerId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHomePageCategories_argsStandardSchemeFactory implements SchemeFactory {
      public getHomePageCategories_argsStandardScheme getScheme() {
        return new getHomePageCategories_argsStandardScheme();
      }
    }

    private static class getHomePageCategories_argsStandardScheme extends StandardScheme<getHomePageCategories_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHomePageCategories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RETAILER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.retailerId = iprot.readString();
                struct.setRetailerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHomePageCategories_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.retailerId != null) {
          oprot.writeFieldBegin(RETAILER_ID_FIELD_DESC);
          oprot.writeString(struct.retailerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHomePageCategories_argsTupleSchemeFactory implements SchemeFactory {
      public getHomePageCategories_argsTupleScheme getScheme() {
        return new getHomePageCategories_argsTupleScheme();
      }
    }

    private static class getHomePageCategories_argsTupleScheme extends TupleScheme<getHomePageCategories_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHomePageCategories_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRetailerId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRetailerId()) {
          oprot.writeString(struct.retailerId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHomePageCategories_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.retailerId = iprot.readString();
          struct.setRetailerIdIsSet(true);
        }
      }
    }

  }

  public static class getHomePageCategories_result implements org.apache.thrift.TBase<getHomePageCategories_result, getHomePageCategories_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHomePageCategories_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHomePageCategories_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHomePageCategories_resultTupleSchemeFactory());
    }

    public List<Category> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Category.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHomePageCategories_result.class, metaDataMap);
    }

    public getHomePageCategories_result() {
    }

    public getHomePageCategories_result(
      List<Category> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHomePageCategories_result(getHomePageCategories_result other) {
      if (other.isSetSuccess()) {
        List<Category> __this__success = new ArrayList<Category>();
        for (Category other_element : other.success) {
          __this__success.add(new Category(other_element));
        }
        this.success = __this__success;
      }
    }

    public getHomePageCategories_result deepCopy() {
      return new getHomePageCategories_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Category> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Category elem) {
      if (this.success == null) {
        this.success = new ArrayList<Category>();
      }
      this.success.add(elem);
    }

    public List<Category> getSuccess() {
      return this.success;
    }

    public getHomePageCategories_result setSuccess(List<Category> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Category>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHomePageCategories_result)
        return this.equals((getHomePageCategories_result)that);
      return false;
    }

    public boolean equals(getHomePageCategories_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHomePageCategories_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHomePageCategories_result typedOther = (getHomePageCategories_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHomePageCategories_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHomePageCategories_resultStandardSchemeFactory implements SchemeFactory {
      public getHomePageCategories_resultStandardScheme getScheme() {
        return new getHomePageCategories_resultStandardScheme();
      }
    }

    private static class getHomePageCategories_resultStandardScheme extends StandardScheme<getHomePageCategories_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHomePageCategories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list100 = iprot.readListBegin();
                  struct.success = new ArrayList<Category>(_list100.size);
                  for (int _i101 = 0; _i101 < _list100.size; ++_i101)
                  {
                    Category _elem102; // required
                    _elem102 = new Category();
                    _elem102.read(iprot);
                    struct.success.add(_elem102);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHomePageCategories_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Category _iter103 : struct.success)
            {
              _iter103.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHomePageCategories_resultTupleSchemeFactory implements SchemeFactory {
      public getHomePageCategories_resultTupleScheme getScheme() {
        return new getHomePageCategories_resultTupleScheme();
      }
    }

    private static class getHomePageCategories_resultTupleScheme extends TupleScheme<getHomePageCategories_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHomePageCategories_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Category _iter104 : struct.success)
            {
              _iter104.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHomePageCategories_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list105 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Category>(_list105.size);
            for (int _i106 = 0; _i106 < _list105.size; ++_i106)
            {
              Category _elem107; // required
              _elem107 = new Category();
              _elem107.read(iprot);
              struct.success.add(_elem107);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getChildCategories_args implements org.apache.thrift.TBase<getChildCategories_args, getChildCategories_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChildCategories_args");

    private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getChildCategories_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getChildCategories_argsTupleSchemeFactory());
    }

    public int categoryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATEGORY_ID((short)1, "categoryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY_ID
            return CATEGORY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CATEGORYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChildCategories_args.class, metaDataMap);
    }

    public getChildCategories_args() {
    }

    public getChildCategories_args(
      int categoryId)
    {
      this();
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChildCategories_args(getChildCategories_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.categoryId = other.categoryId;
    }

    public getChildCategories_args deepCopy() {
      return new getChildCategories_args(this);
    }

    @Override
    public void clear() {
      setCategoryIdIsSet(false);
      this.categoryId = 0;
    }

    public int getCategoryId() {
      return this.categoryId;
    }

    public getChildCategories_args setCategoryId(int categoryId) {
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
      return this;
    }

    public void unsetCategoryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryId() {
      return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    public void setCategoryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CATEGORY_ID:
        if (value == null) {
          unsetCategoryId();
        } else {
          setCategoryId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY_ID:
        return Integer.valueOf(getCategoryId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY_ID:
        return isSetCategoryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChildCategories_args)
        return this.equals((getChildCategories_args)that);
      return false;
    }

    public boolean equals(getChildCategories_args that) {
      if (that == null)
        return false;

      boolean this_present_categoryId = true;
      boolean that_present_categoryId = true;
      if (this_present_categoryId || that_present_categoryId) {
        if (!(this_present_categoryId && that_present_categoryId))
          return false;
        if (this.categoryId != that.categoryId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getChildCategories_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getChildCategories_args typedOther = (getChildCategories_args)other;

      lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(typedOther.isSetCategoryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, typedOther.categoryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getChildCategories_args(");
      boolean first = true;

      sb.append("categoryId:");
      sb.append(this.categoryId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChildCategories_argsStandardSchemeFactory implements SchemeFactory {
      public getChildCategories_argsStandardScheme getScheme() {
        return new getChildCategories_argsStandardScheme();
      }
    }

    private static class getChildCategories_argsStandardScheme extends StandardScheme<getChildCategories_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChildCategories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.categoryId = iprot.readI32();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChildCategories_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
        oprot.writeI32(struct.categoryId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChildCategories_argsTupleSchemeFactory implements SchemeFactory {
      public getChildCategories_argsTupleScheme getScheme() {
        return new getChildCategories_argsTupleScheme();
      }
    }

    private static class getChildCategories_argsTupleScheme extends TupleScheme<getChildCategories_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChildCategories_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCategoryId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCategoryId()) {
          oprot.writeI32(struct.categoryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChildCategories_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.categoryId = iprot.readI32();
          struct.setCategoryIdIsSet(true);
        }
      }
    }

  }

  public static class getChildCategories_result implements org.apache.thrift.TBase<getChildCategories_result, getChildCategories_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChildCategories_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getChildCategories_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getChildCategories_resultTupleSchemeFactory());
    }

    public List<Category> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Category.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChildCategories_result.class, metaDataMap);
    }

    public getChildCategories_result() {
    }

    public getChildCategories_result(
      List<Category> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChildCategories_result(getChildCategories_result other) {
      if (other.isSetSuccess()) {
        List<Category> __this__success = new ArrayList<Category>();
        for (Category other_element : other.success) {
          __this__success.add(new Category(other_element));
        }
        this.success = __this__success;
      }
    }

    public getChildCategories_result deepCopy() {
      return new getChildCategories_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Category> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Category elem) {
      if (this.success == null) {
        this.success = new ArrayList<Category>();
      }
      this.success.add(elem);
    }

    public List<Category> getSuccess() {
      return this.success;
    }

    public getChildCategories_result setSuccess(List<Category> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Category>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChildCategories_result)
        return this.equals((getChildCategories_result)that);
      return false;
    }

    public boolean equals(getChildCategories_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getChildCategories_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getChildCategories_result typedOther = (getChildCategories_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getChildCategories_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChildCategories_resultStandardSchemeFactory implements SchemeFactory {
      public getChildCategories_resultStandardScheme getScheme() {
        return new getChildCategories_resultStandardScheme();
      }
    }

    private static class getChildCategories_resultStandardScheme extends StandardScheme<getChildCategories_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChildCategories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list108 = iprot.readListBegin();
                  struct.success = new ArrayList<Category>(_list108.size);
                  for (int _i109 = 0; _i109 < _list108.size; ++_i109)
                  {
                    Category _elem110; // required
                    _elem110 = new Category();
                    _elem110.read(iprot);
                    struct.success.add(_elem110);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChildCategories_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Category _iter111 : struct.success)
            {
              _iter111.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChildCategories_resultTupleSchemeFactory implements SchemeFactory {
      public getChildCategories_resultTupleScheme getScheme() {
        return new getChildCategories_resultTupleScheme();
      }
    }

    private static class getChildCategories_resultTupleScheme extends TupleScheme<getChildCategories_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChildCategories_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Category _iter112 : struct.success)
            {
              _iter112.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChildCategories_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list113 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Category>(_list113.size);
            for (int _i114 = 0; _i114 < _list113.size; ++_i114)
            {
              Category _elem115; // required
              _elem115 = new Category();
              _elem115.read(iprot);
              struct.success.add(_elem115);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCategoryPath_args implements org.apache.thrift.TBase<getCategoryPath_args, getCategoryPath_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCategoryPath_args");

    private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCategoryPath_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCategoryPath_argsTupleSchemeFactory());
    }

    public int categoryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATEGORY_ID((short)1, "categoryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY_ID
            return CATEGORY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CATEGORYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCategoryPath_args.class, metaDataMap);
    }

    public getCategoryPath_args() {
    }

    public getCategoryPath_args(
      int categoryId)
    {
      this();
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCategoryPath_args(getCategoryPath_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.categoryId = other.categoryId;
    }

    public getCategoryPath_args deepCopy() {
      return new getCategoryPath_args(this);
    }

    @Override
    public void clear() {
      setCategoryIdIsSet(false);
      this.categoryId = 0;
    }

    public int getCategoryId() {
      return this.categoryId;
    }

    public getCategoryPath_args setCategoryId(int categoryId) {
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
      return this;
    }

    public void unsetCategoryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryId() {
      return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    public void setCategoryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CATEGORY_ID:
        if (value == null) {
          unsetCategoryId();
        } else {
          setCategoryId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY_ID:
        return Integer.valueOf(getCategoryId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY_ID:
        return isSetCategoryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCategoryPath_args)
        return this.equals((getCategoryPath_args)that);
      return false;
    }

    public boolean equals(getCategoryPath_args that) {
      if (that == null)
        return false;

      boolean this_present_categoryId = true;
      boolean that_present_categoryId = true;
      if (this_present_categoryId || that_present_categoryId) {
        if (!(this_present_categoryId && that_present_categoryId))
          return false;
        if (this.categoryId != that.categoryId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCategoryPath_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCategoryPath_args typedOther = (getCategoryPath_args)other;

      lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(typedOther.isSetCategoryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, typedOther.categoryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCategoryPath_args(");
      boolean first = true;

      sb.append("categoryId:");
      sb.append(this.categoryId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCategoryPath_argsStandardSchemeFactory implements SchemeFactory {
      public getCategoryPath_argsStandardScheme getScheme() {
        return new getCategoryPath_argsStandardScheme();
      }
    }

    private static class getCategoryPath_argsStandardScheme extends StandardScheme<getCategoryPath_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCategoryPath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.categoryId = iprot.readI32();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCategoryPath_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
        oprot.writeI32(struct.categoryId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCategoryPath_argsTupleSchemeFactory implements SchemeFactory {
      public getCategoryPath_argsTupleScheme getScheme() {
        return new getCategoryPath_argsTupleScheme();
      }
    }

    private static class getCategoryPath_argsTupleScheme extends TupleScheme<getCategoryPath_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCategoryPath_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCategoryId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCategoryId()) {
          oprot.writeI32(struct.categoryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCategoryPath_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.categoryId = iprot.readI32();
          struct.setCategoryIdIsSet(true);
        }
      }
    }

  }

  public static class getCategoryPath_result implements org.apache.thrift.TBase<getCategoryPath_result, getCategoryPath_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCategoryPath_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCategoryPath_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCategoryPath_resultTupleSchemeFactory());
    }

    public List<Category> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Category.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCategoryPath_result.class, metaDataMap);
    }

    public getCategoryPath_result() {
    }

    public getCategoryPath_result(
      List<Category> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCategoryPath_result(getCategoryPath_result other) {
      if (other.isSetSuccess()) {
        List<Category> __this__success = new ArrayList<Category>();
        for (Category other_element : other.success) {
          __this__success.add(new Category(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCategoryPath_result deepCopy() {
      return new getCategoryPath_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Category> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Category elem) {
      if (this.success == null) {
        this.success = new ArrayList<Category>();
      }
      this.success.add(elem);
    }

    public List<Category> getSuccess() {
      return this.success;
    }

    public getCategoryPath_result setSuccess(List<Category> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Category>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCategoryPath_result)
        return this.equals((getCategoryPath_result)that);
      return false;
    }

    public boolean equals(getCategoryPath_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCategoryPath_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCategoryPath_result typedOther = (getCategoryPath_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCategoryPath_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCategoryPath_resultStandardSchemeFactory implements SchemeFactory {
      public getCategoryPath_resultStandardScheme getScheme() {
        return new getCategoryPath_resultStandardScheme();
      }
    }

    private static class getCategoryPath_resultStandardScheme extends StandardScheme<getCategoryPath_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCategoryPath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list116 = iprot.readListBegin();
                  struct.success = new ArrayList<Category>(_list116.size);
                  for (int _i117 = 0; _i117 < _list116.size; ++_i117)
                  {
                    Category _elem118; // required
                    _elem118 = new Category();
                    _elem118.read(iprot);
                    struct.success.add(_elem118);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCategoryPath_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Category _iter119 : struct.success)
            {
              _iter119.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCategoryPath_resultTupleSchemeFactory implements SchemeFactory {
      public getCategoryPath_resultTupleScheme getScheme() {
        return new getCategoryPath_resultTupleScheme();
      }
    }

    private static class getCategoryPath_resultTupleScheme extends TupleScheme<getCategoryPath_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCategoryPath_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Category _iter120 : struct.success)
            {
              _iter120.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCategoryPath_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list121 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Category>(_list121.size);
            for (int _i122 = 0; _i122 < _list121.size; ++_i122)
            {
              Category _elem123; // required
              _elem123 = new Category();
              _elem123.read(iprot);
              struct.success.add(_elem123);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProducts_args implements org.apache.thrift.TBase<getProducts_args, getProducts_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProducts_args");

    private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LOOKUP_FIELD_DESC = new org.apache.thrift.protocol.TField("lookup", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("filters", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField SORT_CRITERION_FIELD_DESC = new org.apache.thrift.protocol.TField("sortCriterion", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProducts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProducts_argsTupleSchemeFactory());
    }

    public int categoryId; // required
    public LookupIdx lookup; // required
    public List<ProductFilter> filters; // required
    /**
     * 
     * @see SortCriterion
     */
    public SortCriterion sortCriterion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATEGORY_ID((short)1, "categoryId"),
      LOOKUP((short)2, "lookup"),
      FILTERS((short)3, "filters"),
      /**
       * 
       * @see SortCriterion
       */
      SORT_CRITERION((short)4, "sortCriterion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY_ID
            return CATEGORY_ID;
          case 2: // LOOKUP
            return LOOKUP;
          case 3: // FILTERS
            return FILTERS;
          case 4: // SORT_CRITERION
            return SORT_CRITERION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CATEGORYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LOOKUP, new org.apache.thrift.meta_data.FieldMetaData("lookup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LookupIdx.class)));
      tmpMap.put(_Fields.FILTERS, new org.apache.thrift.meta_data.FieldMetaData("filters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductFilter.class))));
      tmpMap.put(_Fields.SORT_CRITERION, new org.apache.thrift.meta_data.FieldMetaData("sortCriterion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SortCriterion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProducts_args.class, metaDataMap);
    }

    public getProducts_args() {
    }

    public getProducts_args(
      int categoryId,
      LookupIdx lookup,
      List<ProductFilter> filters,
      SortCriterion sortCriterion)
    {
      this();
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
      this.lookup = lookup;
      this.filters = filters;
      this.sortCriterion = sortCriterion;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProducts_args(getProducts_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.categoryId = other.categoryId;
      if (other.isSetLookup()) {
        this.lookup = new LookupIdx(other.lookup);
      }
      if (other.isSetFilters()) {
        List<ProductFilter> __this__filters = new ArrayList<ProductFilter>();
        for (ProductFilter other_element : other.filters) {
          __this__filters.add(new ProductFilter(other_element));
        }
        this.filters = __this__filters;
      }
      if (other.isSetSortCriterion()) {
        this.sortCriterion = other.sortCriterion;
      }
    }

    public getProducts_args deepCopy() {
      return new getProducts_args(this);
    }

    @Override
    public void clear() {
      setCategoryIdIsSet(false);
      this.categoryId = 0;
      this.lookup = null;
      this.filters = null;
      this.sortCriterion = null;
    }

    public int getCategoryId() {
      return this.categoryId;
    }

    public getProducts_args setCategoryId(int categoryId) {
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
      return this;
    }

    public void unsetCategoryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryId() {
      return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    public void setCategoryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
    }

    public LookupIdx getLookup() {
      return this.lookup;
    }

    public getProducts_args setLookup(LookupIdx lookup) {
      this.lookup = lookup;
      return this;
    }

    public void unsetLookup() {
      this.lookup = null;
    }

    /** Returns true if field lookup is set (has been assigned a value) and false otherwise */
    public boolean isSetLookup() {
      return this.lookup != null;
    }

    public void setLookupIsSet(boolean value) {
      if (!value) {
        this.lookup = null;
      }
    }

    public int getFiltersSize() {
      return (this.filters == null) ? 0 : this.filters.size();
    }

    public java.util.Iterator<ProductFilter> getFiltersIterator() {
      return (this.filters == null) ? null : this.filters.iterator();
    }

    public void addToFilters(ProductFilter elem) {
      if (this.filters == null) {
        this.filters = new ArrayList<ProductFilter>();
      }
      this.filters.add(elem);
    }

    public List<ProductFilter> getFilters() {
      return this.filters;
    }

    public getProducts_args setFilters(List<ProductFilter> filters) {
      this.filters = filters;
      return this;
    }

    public void unsetFilters() {
      this.filters = null;
    }

    /** Returns true if field filters is set (has been assigned a value) and false otherwise */
    public boolean isSetFilters() {
      return this.filters != null;
    }

    public void setFiltersIsSet(boolean value) {
      if (!value) {
        this.filters = null;
      }
    }

    /**
     * 
     * @see SortCriterion
     */
    public SortCriterion getSortCriterion() {
      return this.sortCriterion;
    }

    /**
     * 
     * @see SortCriterion
     */
    public getProducts_args setSortCriterion(SortCriterion sortCriterion) {
      this.sortCriterion = sortCriterion;
      return this;
    }

    public void unsetSortCriterion() {
      this.sortCriterion = null;
    }

    /** Returns true if field sortCriterion is set (has been assigned a value) and false otherwise */
    public boolean isSetSortCriterion() {
      return this.sortCriterion != null;
    }

    public void setSortCriterionIsSet(boolean value) {
      if (!value) {
        this.sortCriterion = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CATEGORY_ID:
        if (value == null) {
          unsetCategoryId();
        } else {
          setCategoryId((Integer)value);
        }
        break;

      case LOOKUP:
        if (value == null) {
          unsetLookup();
        } else {
          setLookup((LookupIdx)value);
        }
        break;

      case FILTERS:
        if (value == null) {
          unsetFilters();
        } else {
          setFilters((List<ProductFilter>)value);
        }
        break;

      case SORT_CRITERION:
        if (value == null) {
          unsetSortCriterion();
        } else {
          setSortCriterion((SortCriterion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY_ID:
        return Integer.valueOf(getCategoryId());

      case LOOKUP:
        return getLookup();

      case FILTERS:
        return getFilters();

      case SORT_CRITERION:
        return getSortCriterion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY_ID:
        return isSetCategoryId();
      case LOOKUP:
        return isSetLookup();
      case FILTERS:
        return isSetFilters();
      case SORT_CRITERION:
        return isSetSortCriterion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProducts_args)
        return this.equals((getProducts_args)that);
      return false;
    }

    public boolean equals(getProducts_args that) {
      if (that == null)
        return false;

      boolean this_present_categoryId = true;
      boolean that_present_categoryId = true;
      if (this_present_categoryId || that_present_categoryId) {
        if (!(this_present_categoryId && that_present_categoryId))
          return false;
        if (this.categoryId != that.categoryId)
          return false;
      }

      boolean this_present_lookup = true && this.isSetLookup();
      boolean that_present_lookup = true && that.isSetLookup();
      if (this_present_lookup || that_present_lookup) {
        if (!(this_present_lookup && that_present_lookup))
          return false;
        if (!this.lookup.equals(that.lookup))
          return false;
      }

      boolean this_present_filters = true && this.isSetFilters();
      boolean that_present_filters = true && that.isSetFilters();
      if (this_present_filters || that_present_filters) {
        if (!(this_present_filters && that_present_filters))
          return false;
        if (!this.filters.equals(that.filters))
          return false;
      }

      boolean this_present_sortCriterion = true && this.isSetSortCriterion();
      boolean that_present_sortCriterion = true && that.isSetSortCriterion();
      if (this_present_sortCriterion || that_present_sortCriterion) {
        if (!(this_present_sortCriterion && that_present_sortCriterion))
          return false;
        if (!this.sortCriterion.equals(that.sortCriterion))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProducts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProducts_args typedOther = (getProducts_args)other;

      lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(typedOther.isSetCategoryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, typedOther.categoryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLookup()).compareTo(typedOther.isSetLookup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLookup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lookup, typedOther.lookup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilters()).compareTo(typedOther.isSetFilters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilters()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filters, typedOther.filters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortCriterion()).compareTo(typedOther.isSetSortCriterion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortCriterion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortCriterion, typedOther.sortCriterion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProducts_args(");
      boolean first = true;

      sb.append("categoryId:");
      sb.append(this.categoryId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lookup:");
      if (this.lookup == null) {
        sb.append("null");
      } else {
        sb.append(this.lookup);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filters:");
      if (this.filters == null) {
        sb.append("null");
      } else {
        sb.append(this.filters);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortCriterion:");
      if (this.sortCriterion == null) {
        sb.append("null");
      } else {
        sb.append(this.sortCriterion);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lookup != null) {
        lookup.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProducts_argsStandardSchemeFactory implements SchemeFactory {
      public getProducts_argsStandardScheme getScheme() {
        return new getProducts_argsStandardScheme();
      }
    }

    private static class getProducts_argsStandardScheme extends StandardScheme<getProducts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProducts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.categoryId = iprot.readI32();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOOKUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lookup = new LookupIdx();
                struct.lookup.read(iprot);
                struct.setLookupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILTERS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list124 = iprot.readListBegin();
                  struct.filters = new ArrayList<ProductFilter>(_list124.size);
                  for (int _i125 = 0; _i125 < _list124.size; ++_i125)
                  {
                    ProductFilter _elem126; // required
                    _elem126 = new ProductFilter();
                    _elem126.read(iprot);
                    struct.filters.add(_elem126);
                  }
                  iprot.readListEnd();
                }
                struct.setFiltersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SORT_CRITERION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sortCriterion = SortCriterion.findByValue(iprot.readI32());
                struct.setSortCriterionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProducts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
        oprot.writeI32(struct.categoryId);
        oprot.writeFieldEnd();
        if (struct.lookup != null) {
          oprot.writeFieldBegin(LOOKUP_FIELD_DESC);
          struct.lookup.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.filters != null) {
          oprot.writeFieldBegin(FILTERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.filters.size()));
            for (ProductFilter _iter127 : struct.filters)
            {
              _iter127.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sortCriterion != null) {
          oprot.writeFieldBegin(SORT_CRITERION_FIELD_DESC);
          oprot.writeI32(struct.sortCriterion.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProducts_argsTupleSchemeFactory implements SchemeFactory {
      public getProducts_argsTupleScheme getScheme() {
        return new getProducts_argsTupleScheme();
      }
    }

    private static class getProducts_argsTupleScheme extends TupleScheme<getProducts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCategoryId()) {
          optionals.set(0);
        }
        if (struct.isSetLookup()) {
          optionals.set(1);
        }
        if (struct.isSetFilters()) {
          optionals.set(2);
        }
        if (struct.isSetSortCriterion()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCategoryId()) {
          oprot.writeI32(struct.categoryId);
        }
        if (struct.isSetLookup()) {
          struct.lookup.write(oprot);
        }
        if (struct.isSetFilters()) {
          {
            oprot.writeI32(struct.filters.size());
            for (ProductFilter _iter128 : struct.filters)
            {
              _iter128.write(oprot);
            }
          }
        }
        if (struct.isSetSortCriterion()) {
          oprot.writeI32(struct.sortCriterion.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.categoryId = iprot.readI32();
          struct.setCategoryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lookup = new LookupIdx();
          struct.lookup.read(iprot);
          struct.setLookupIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list129 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.filters = new ArrayList<ProductFilter>(_list129.size);
            for (int _i130 = 0; _i130 < _list129.size; ++_i130)
            {
              ProductFilter _elem131; // required
              _elem131 = new ProductFilter();
              _elem131.read(iprot);
              struct.filters.add(_elem131);
            }
          }
          struct.setFiltersIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sortCriterion = SortCriterion.findByValue(iprot.readI32());
          struct.setSortCriterionIsSet(true);
        }
      }
    }

  }

  public static class getProducts_result implements org.apache.thrift.TBase<getProducts_result, getProducts_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProducts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProducts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProducts_resultTupleSchemeFactory());
    }

    public ProductList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProducts_result.class, metaDataMap);
    }

    public getProducts_result() {
    }

    public getProducts_result(
      ProductList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProducts_result(getProducts_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductList(other.success);
      }
    }

    public getProducts_result deepCopy() {
      return new getProducts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ProductList getSuccess() {
      return this.success;
    }

    public getProducts_result setSuccess(ProductList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProductList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProducts_result)
        return this.equals((getProducts_result)that);
      return false;
    }

    public boolean equals(getProducts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProducts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProducts_result typedOther = (getProducts_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProducts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProducts_resultStandardSchemeFactory implements SchemeFactory {
      public getProducts_resultStandardScheme getScheme() {
        return new getProducts_resultStandardScheme();
      }
    }

    private static class getProducts_resultStandardScheme extends StandardScheme<getProducts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProducts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProductList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProducts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProducts_resultTupleSchemeFactory implements SchemeFactory {
      public getProducts_resultTupleScheme getScheme() {
        return new getProducts_resultTupleScheme();
      }
    }

    private static class getProducts_resultTupleScheme extends TupleScheme<getProducts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ProductList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductsByIds_args implements org.apache.thrift.TBase<getProductsByIds_args, getProductsByIds_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductsByIds_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("productIdList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductsByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductsByIds_argsTupleSchemeFactory());
    }

    public List<Integer> productIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_ID_LIST((short)1, "productIdList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_ID_LIST
            return PRODUCT_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("productIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductsByIds_args.class, metaDataMap);
    }

    public getProductsByIds_args() {
    }

    public getProductsByIds_args(
      List<Integer> productIdList)
    {
      this();
      this.productIdList = productIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductsByIds_args(getProductsByIds_args other) {
      if (other.isSetProductIdList()) {
        List<Integer> __this__productIdList = new ArrayList<Integer>();
        for (Integer other_element : other.productIdList) {
          __this__productIdList.add(other_element);
        }
        this.productIdList = __this__productIdList;
      }
    }

    public getProductsByIds_args deepCopy() {
      return new getProductsByIds_args(this);
    }

    @Override
    public void clear() {
      this.productIdList = null;
    }

    public int getProductIdListSize() {
      return (this.productIdList == null) ? 0 : this.productIdList.size();
    }

    public java.util.Iterator<Integer> getProductIdListIterator() {
      return (this.productIdList == null) ? null : this.productIdList.iterator();
    }

    public void addToProductIdList(int elem) {
      if (this.productIdList == null) {
        this.productIdList = new ArrayList<Integer>();
      }
      this.productIdList.add(elem);
    }

    public List<Integer> getProductIdList() {
      return this.productIdList;
    }

    public getProductsByIds_args setProductIdList(List<Integer> productIdList) {
      this.productIdList = productIdList;
      return this;
    }

    public void unsetProductIdList() {
      this.productIdList = null;
    }

    /** Returns true if field productIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetProductIdList() {
      return this.productIdList != null;
    }

    public void setProductIdListIsSet(boolean value) {
      if (!value) {
        this.productIdList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_ID_LIST:
        if (value == null) {
          unsetProductIdList();
        } else {
          setProductIdList((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_ID_LIST:
        return getProductIdList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_ID_LIST:
        return isSetProductIdList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductsByIds_args)
        return this.equals((getProductsByIds_args)that);
      return false;
    }

    public boolean equals(getProductsByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_productIdList = true && this.isSetProductIdList();
      boolean that_present_productIdList = true && that.isSetProductIdList();
      if (this_present_productIdList || that_present_productIdList) {
        if (!(this_present_productIdList && that_present_productIdList))
          return false;
        if (!this.productIdList.equals(that.productIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProductsByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProductsByIds_args typedOther = (getProductsByIds_args)other;

      lastComparison = Boolean.valueOf(isSetProductIdList()).compareTo(typedOther.isSetProductIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productIdList, typedOther.productIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductsByIds_args(");
      boolean first = true;

      sb.append("productIdList:");
      if (this.productIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.productIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductsByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getProductsByIds_argsStandardScheme getScheme() {
        return new getProductsByIds_argsStandardScheme();
      }
    }

    private static class getProductsByIds_argsStandardScheme extends StandardScheme<getProductsByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductsByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list132 = iprot.readListBegin();
                  struct.productIdList = new ArrayList<Integer>(_list132.size);
                  for (int _i133 = 0; _i133 < _list132.size; ++_i133)
                  {
                    int _elem134; // required
                    _elem134 = iprot.readI32();
                    struct.productIdList.add(_elem134);
                  }
                  iprot.readListEnd();
                }
                struct.setProductIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductsByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productIdList != null) {
          oprot.writeFieldBegin(PRODUCT_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.productIdList.size()));
            for (int _iter135 : struct.productIdList)
            {
              oprot.writeI32(_iter135);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductsByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getProductsByIds_argsTupleScheme getScheme() {
        return new getProductsByIds_argsTupleScheme();
      }
    }

    private static class getProductsByIds_argsTupleScheme extends TupleScheme<getProductsByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductIdList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductIdList()) {
          {
            oprot.writeI32(struct.productIdList.size());
            for (int _iter136 : struct.productIdList)
            {
              oprot.writeI32(_iter136);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list137 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.productIdList = new ArrayList<Integer>(_list137.size);
            for (int _i138 = 0; _i138 < _list137.size; ++_i138)
            {
              int _elem139; // required
              _elem139 = iprot.readI32();
              struct.productIdList.add(_elem139);
            }
          }
          struct.setProductIdListIsSet(true);
        }
      }
    }

  }

  public static class getProductsByIds_result implements org.apache.thrift.TBase<getProductsByIds_result, getProductsByIds_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductsByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductsByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductsByIds_resultTupleSchemeFactory());
    }

    public List<Product> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Product.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductsByIds_result.class, metaDataMap);
    }

    public getProductsByIds_result() {
    }

    public getProductsByIds_result(
      List<Product> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductsByIds_result(getProductsByIds_result other) {
      if (other.isSetSuccess()) {
        List<Product> __this__success = new ArrayList<Product>();
        for (Product other_element : other.success) {
          __this__success.add(new Product(other_element));
        }
        this.success = __this__success;
      }
    }

    public getProductsByIds_result deepCopy() {
      return new getProductsByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Product> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Product elem) {
      if (this.success == null) {
        this.success = new ArrayList<Product>();
      }
      this.success.add(elem);
    }

    public List<Product> getSuccess() {
      return this.success;
    }

    public getProductsByIds_result setSuccess(List<Product> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Product>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductsByIds_result)
        return this.equals((getProductsByIds_result)that);
      return false;
    }

    public boolean equals(getProductsByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProductsByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProductsByIds_result typedOther = (getProductsByIds_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductsByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductsByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getProductsByIds_resultStandardScheme getScheme() {
        return new getProductsByIds_resultStandardScheme();
      }
    }

    private static class getProductsByIds_resultStandardScheme extends StandardScheme<getProductsByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductsByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list140 = iprot.readListBegin();
                  struct.success = new ArrayList<Product>(_list140.size);
                  for (int _i141 = 0; _i141 < _list140.size; ++_i141)
                  {
                    Product _elem142; // required
                    _elem142 = new Product();
                    _elem142.read(iprot);
                    struct.success.add(_elem142);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductsByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Product _iter143 : struct.success)
            {
              _iter143.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductsByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getProductsByIds_resultTupleScheme getScheme() {
        return new getProductsByIds_resultTupleScheme();
      }
    }

    private static class getProductsByIds_resultTupleScheme extends TupleScheme<getProductsByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Product _iter144 : struct.success)
            {
              _iter144.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list145 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Product>(_list145.size);
            for (int _i146 = 0; _i146 < _list145.size; ++_i146)
            {
              Product _elem147; // required
              _elem147 = new Product();
              _elem147.read(iprot);
              struct.success.add(_elem147);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTopPriceDropsByCategory_args implements org.apache.thrift.TBase<getTopPriceDropsByCategory_args, getTopPriceDropsByCategory_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopPriceDropsByCategory_args");

    private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LOOKUP_FIELD_DESC = new org.apache.thrift.protocol.TField("lookup", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopPriceDropsByCategory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopPriceDropsByCategory_argsTupleSchemeFactory());
    }

    public int categoryId; // required
    public LookupIdx lookup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATEGORY_ID((short)1, "categoryId"),
      LOOKUP((short)2, "lookup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY_ID
            return CATEGORY_ID;
          case 2: // LOOKUP
            return LOOKUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CATEGORYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LOOKUP, new org.apache.thrift.meta_data.FieldMetaData("lookup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LookupIdx.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopPriceDropsByCategory_args.class, metaDataMap);
    }

    public getTopPriceDropsByCategory_args() {
    }

    public getTopPriceDropsByCategory_args(
      int categoryId,
      LookupIdx lookup)
    {
      this();
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
      this.lookup = lookup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopPriceDropsByCategory_args(getTopPriceDropsByCategory_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.categoryId = other.categoryId;
      if (other.isSetLookup()) {
        this.lookup = new LookupIdx(other.lookup);
      }
    }

    public getTopPriceDropsByCategory_args deepCopy() {
      return new getTopPriceDropsByCategory_args(this);
    }

    @Override
    public void clear() {
      setCategoryIdIsSet(false);
      this.categoryId = 0;
      this.lookup = null;
    }

    public int getCategoryId() {
      return this.categoryId;
    }

    public getTopPriceDropsByCategory_args setCategoryId(int categoryId) {
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
      return this;
    }

    public void unsetCategoryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryId() {
      return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    public void setCategoryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
    }

    public LookupIdx getLookup() {
      return this.lookup;
    }

    public getTopPriceDropsByCategory_args setLookup(LookupIdx lookup) {
      this.lookup = lookup;
      return this;
    }

    public void unsetLookup() {
      this.lookup = null;
    }

    /** Returns true if field lookup is set (has been assigned a value) and false otherwise */
    public boolean isSetLookup() {
      return this.lookup != null;
    }

    public void setLookupIsSet(boolean value) {
      if (!value) {
        this.lookup = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CATEGORY_ID:
        if (value == null) {
          unsetCategoryId();
        } else {
          setCategoryId((Integer)value);
        }
        break;

      case LOOKUP:
        if (value == null) {
          unsetLookup();
        } else {
          setLookup((LookupIdx)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY_ID:
        return Integer.valueOf(getCategoryId());

      case LOOKUP:
        return getLookup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY_ID:
        return isSetCategoryId();
      case LOOKUP:
        return isSetLookup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopPriceDropsByCategory_args)
        return this.equals((getTopPriceDropsByCategory_args)that);
      return false;
    }

    public boolean equals(getTopPriceDropsByCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_categoryId = true;
      boolean that_present_categoryId = true;
      if (this_present_categoryId || that_present_categoryId) {
        if (!(this_present_categoryId && that_present_categoryId))
          return false;
        if (this.categoryId != that.categoryId)
          return false;
      }

      boolean this_present_lookup = true && this.isSetLookup();
      boolean that_present_lookup = true && that.isSetLookup();
      if (this_present_lookup || that_present_lookup) {
        if (!(this_present_lookup && that_present_lookup))
          return false;
        if (!this.lookup.equals(that.lookup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTopPriceDropsByCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTopPriceDropsByCategory_args typedOther = (getTopPriceDropsByCategory_args)other;

      lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(typedOther.isSetCategoryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, typedOther.categoryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLookup()).compareTo(typedOther.isSetLookup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLookup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lookup, typedOther.lookup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopPriceDropsByCategory_args(");
      boolean first = true;

      sb.append("categoryId:");
      sb.append(this.categoryId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lookup:");
      if (this.lookup == null) {
        sb.append("null");
      } else {
        sb.append(this.lookup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lookup != null) {
        lookup.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopPriceDropsByCategory_argsStandardSchemeFactory implements SchemeFactory {
      public getTopPriceDropsByCategory_argsStandardScheme getScheme() {
        return new getTopPriceDropsByCategory_argsStandardScheme();
      }
    }

    private static class getTopPriceDropsByCategory_argsStandardScheme extends StandardScheme<getTopPriceDropsByCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopPriceDropsByCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.categoryId = iprot.readI32();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOOKUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lookup = new LookupIdx();
                struct.lookup.read(iprot);
                struct.setLookupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopPriceDropsByCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
        oprot.writeI32(struct.categoryId);
        oprot.writeFieldEnd();
        if (struct.lookup != null) {
          oprot.writeFieldBegin(LOOKUP_FIELD_DESC);
          struct.lookup.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopPriceDropsByCategory_argsTupleSchemeFactory implements SchemeFactory {
      public getTopPriceDropsByCategory_argsTupleScheme getScheme() {
        return new getTopPriceDropsByCategory_argsTupleScheme();
      }
    }

    private static class getTopPriceDropsByCategory_argsTupleScheme extends TupleScheme<getTopPriceDropsByCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopPriceDropsByCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCategoryId()) {
          optionals.set(0);
        }
        if (struct.isSetLookup()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCategoryId()) {
          oprot.writeI32(struct.categoryId);
        }
        if (struct.isSetLookup()) {
          struct.lookup.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopPriceDropsByCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.categoryId = iprot.readI32();
          struct.setCategoryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lookup = new LookupIdx();
          struct.lookup.read(iprot);
          struct.setLookupIsSet(true);
        }
      }
    }

  }

  public static class getTopPriceDropsByCategory_result implements org.apache.thrift.TBase<getTopPriceDropsByCategory_result, getTopPriceDropsByCategory_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopPriceDropsByCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopPriceDropsByCategory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopPriceDropsByCategory_resultTupleSchemeFactory());
    }

    public ProductList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopPriceDropsByCategory_result.class, metaDataMap);
    }

    public getTopPriceDropsByCategory_result() {
    }

    public getTopPriceDropsByCategory_result(
      ProductList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopPriceDropsByCategory_result(getTopPriceDropsByCategory_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductList(other.success);
      }
    }

    public getTopPriceDropsByCategory_result deepCopy() {
      return new getTopPriceDropsByCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ProductList getSuccess() {
      return this.success;
    }

    public getTopPriceDropsByCategory_result setSuccess(ProductList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProductList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopPriceDropsByCategory_result)
        return this.equals((getTopPriceDropsByCategory_result)that);
      return false;
    }

    public boolean equals(getTopPriceDropsByCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTopPriceDropsByCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTopPriceDropsByCategory_result typedOther = (getTopPriceDropsByCategory_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopPriceDropsByCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopPriceDropsByCategory_resultStandardSchemeFactory implements SchemeFactory {
      public getTopPriceDropsByCategory_resultStandardScheme getScheme() {
        return new getTopPriceDropsByCategory_resultStandardScheme();
      }
    }

    private static class getTopPriceDropsByCategory_resultStandardScheme extends StandardScheme<getTopPriceDropsByCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopPriceDropsByCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProductList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopPriceDropsByCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopPriceDropsByCategory_resultTupleSchemeFactory implements SchemeFactory {
      public getTopPriceDropsByCategory_resultTupleScheme getScheme() {
        return new getTopPriceDropsByCategory_resultTupleScheme();
      }
    }

    private static class getTopPriceDropsByCategory_resultTupleScheme extends TupleScheme<getTopPriceDropsByCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopPriceDropsByCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopPriceDropsByCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ProductList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTopPriceDropsByRetailer_args implements org.apache.thrift.TBase<getTopPriceDropsByRetailer_args, getTopPriceDropsByRetailer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopPriceDropsByRetailer_args");

    private static final org.apache.thrift.protocol.TField RETAILER_FIELD_DESC = new org.apache.thrift.protocol.TField("retailer", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOOKUP_FIELD_DESC = new org.apache.thrift.protocol.TField("lookup", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopPriceDropsByRetailer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopPriceDropsByRetailer_argsTupleSchemeFactory());
    }

    public String retailer; // required
    public LookupIdx lookup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RETAILER((short)1, "retailer"),
      LOOKUP((short)2, "lookup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RETAILER
            return RETAILER;
          case 2: // LOOKUP
            return LOOKUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RETAILER, new org.apache.thrift.meta_data.FieldMetaData("retailer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOOKUP, new org.apache.thrift.meta_data.FieldMetaData("lookup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LookupIdx.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopPriceDropsByRetailer_args.class, metaDataMap);
    }

    public getTopPriceDropsByRetailer_args() {
    }

    public getTopPriceDropsByRetailer_args(
      String retailer,
      LookupIdx lookup)
    {
      this();
      this.retailer = retailer;
      this.lookup = lookup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopPriceDropsByRetailer_args(getTopPriceDropsByRetailer_args other) {
      if (other.isSetRetailer()) {
        this.retailer = other.retailer;
      }
      if (other.isSetLookup()) {
        this.lookup = new LookupIdx(other.lookup);
      }
    }

    public getTopPriceDropsByRetailer_args deepCopy() {
      return new getTopPriceDropsByRetailer_args(this);
    }

    @Override
    public void clear() {
      this.retailer = null;
      this.lookup = null;
    }

    public String getRetailer() {
      return this.retailer;
    }

    public getTopPriceDropsByRetailer_args setRetailer(String retailer) {
      this.retailer = retailer;
      return this;
    }

    public void unsetRetailer() {
      this.retailer = null;
    }

    /** Returns true if field retailer is set (has been assigned a value) and false otherwise */
    public boolean isSetRetailer() {
      return this.retailer != null;
    }

    public void setRetailerIsSet(boolean value) {
      if (!value) {
        this.retailer = null;
      }
    }

    public LookupIdx getLookup() {
      return this.lookup;
    }

    public getTopPriceDropsByRetailer_args setLookup(LookupIdx lookup) {
      this.lookup = lookup;
      return this;
    }

    public void unsetLookup() {
      this.lookup = null;
    }

    /** Returns true if field lookup is set (has been assigned a value) and false otherwise */
    public boolean isSetLookup() {
      return this.lookup != null;
    }

    public void setLookupIsSet(boolean value) {
      if (!value) {
        this.lookup = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RETAILER:
        if (value == null) {
          unsetRetailer();
        } else {
          setRetailer((String)value);
        }
        break;

      case LOOKUP:
        if (value == null) {
          unsetLookup();
        } else {
          setLookup((LookupIdx)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RETAILER:
        return getRetailer();

      case LOOKUP:
        return getLookup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RETAILER:
        return isSetRetailer();
      case LOOKUP:
        return isSetLookup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopPriceDropsByRetailer_args)
        return this.equals((getTopPriceDropsByRetailer_args)that);
      return false;
    }

    public boolean equals(getTopPriceDropsByRetailer_args that) {
      if (that == null)
        return false;

      boolean this_present_retailer = true && this.isSetRetailer();
      boolean that_present_retailer = true && that.isSetRetailer();
      if (this_present_retailer || that_present_retailer) {
        if (!(this_present_retailer && that_present_retailer))
          return false;
        if (!this.retailer.equals(that.retailer))
          return false;
      }

      boolean this_present_lookup = true && this.isSetLookup();
      boolean that_present_lookup = true && that.isSetLookup();
      if (this_present_lookup || that_present_lookup) {
        if (!(this_present_lookup && that_present_lookup))
          return false;
        if (!this.lookup.equals(that.lookup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTopPriceDropsByRetailer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTopPriceDropsByRetailer_args typedOther = (getTopPriceDropsByRetailer_args)other;

      lastComparison = Boolean.valueOf(isSetRetailer()).compareTo(typedOther.isSetRetailer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRetailer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retailer, typedOther.retailer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLookup()).compareTo(typedOther.isSetLookup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLookup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lookup, typedOther.lookup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopPriceDropsByRetailer_args(");
      boolean first = true;

      sb.append("retailer:");
      if (this.retailer == null) {
        sb.append("null");
      } else {
        sb.append(this.retailer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lookup:");
      if (this.lookup == null) {
        sb.append("null");
      } else {
        sb.append(this.lookup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lookup != null) {
        lookup.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopPriceDropsByRetailer_argsStandardSchemeFactory implements SchemeFactory {
      public getTopPriceDropsByRetailer_argsStandardScheme getScheme() {
        return new getTopPriceDropsByRetailer_argsStandardScheme();
      }
    }

    private static class getTopPriceDropsByRetailer_argsStandardScheme extends StandardScheme<getTopPriceDropsByRetailer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopPriceDropsByRetailer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RETAILER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.retailer = iprot.readString();
                struct.setRetailerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOOKUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lookup = new LookupIdx();
                struct.lookup.read(iprot);
                struct.setLookupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopPriceDropsByRetailer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.retailer != null) {
          oprot.writeFieldBegin(RETAILER_FIELD_DESC);
          oprot.writeString(struct.retailer);
          oprot.writeFieldEnd();
        }
        if (struct.lookup != null) {
          oprot.writeFieldBegin(LOOKUP_FIELD_DESC);
          struct.lookup.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopPriceDropsByRetailer_argsTupleSchemeFactory implements SchemeFactory {
      public getTopPriceDropsByRetailer_argsTupleScheme getScheme() {
        return new getTopPriceDropsByRetailer_argsTupleScheme();
      }
    }

    private static class getTopPriceDropsByRetailer_argsTupleScheme extends TupleScheme<getTopPriceDropsByRetailer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopPriceDropsByRetailer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRetailer()) {
          optionals.set(0);
        }
        if (struct.isSetLookup()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRetailer()) {
          oprot.writeString(struct.retailer);
        }
        if (struct.isSetLookup()) {
          struct.lookup.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopPriceDropsByRetailer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.retailer = iprot.readString();
          struct.setRetailerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lookup = new LookupIdx();
          struct.lookup.read(iprot);
          struct.setLookupIsSet(true);
        }
      }
    }

  }

  public static class getTopPriceDropsByRetailer_result implements org.apache.thrift.TBase<getTopPriceDropsByRetailer_result, getTopPriceDropsByRetailer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopPriceDropsByRetailer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopPriceDropsByRetailer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopPriceDropsByRetailer_resultTupleSchemeFactory());
    }

    public ProductList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopPriceDropsByRetailer_result.class, metaDataMap);
    }

    public getTopPriceDropsByRetailer_result() {
    }

    public getTopPriceDropsByRetailer_result(
      ProductList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopPriceDropsByRetailer_result(getTopPriceDropsByRetailer_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductList(other.success);
      }
    }

    public getTopPriceDropsByRetailer_result deepCopy() {
      return new getTopPriceDropsByRetailer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ProductList getSuccess() {
      return this.success;
    }

    public getTopPriceDropsByRetailer_result setSuccess(ProductList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProductList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopPriceDropsByRetailer_result)
        return this.equals((getTopPriceDropsByRetailer_result)that);
      return false;
    }

    public boolean equals(getTopPriceDropsByRetailer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTopPriceDropsByRetailer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTopPriceDropsByRetailer_result typedOther = (getTopPriceDropsByRetailer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopPriceDropsByRetailer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopPriceDropsByRetailer_resultStandardSchemeFactory implements SchemeFactory {
      public getTopPriceDropsByRetailer_resultStandardScheme getScheme() {
        return new getTopPriceDropsByRetailer_resultStandardScheme();
      }
    }

    private static class getTopPriceDropsByRetailer_resultStandardScheme extends StandardScheme<getTopPriceDropsByRetailer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopPriceDropsByRetailer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProductList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopPriceDropsByRetailer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopPriceDropsByRetailer_resultTupleSchemeFactory implements SchemeFactory {
      public getTopPriceDropsByRetailer_resultTupleScheme getScheme() {
        return new getTopPriceDropsByRetailer_resultTupleScheme();
      }
    }

    private static class getTopPriceDropsByRetailer_resultTupleScheme extends TupleScheme<getTopPriceDropsByRetailer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopPriceDropsByRetailer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopPriceDropsByRetailer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ProductList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPriceDropsByCategory_args implements org.apache.thrift.TBase<getPriceDropsByCategory_args, getPriceDropsByCategory_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPriceDropsByCategory_args");

    private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("max", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPriceDropsByCategory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPriceDropsByCategory_argsTupleSchemeFactory());
    }

    public int categoryId; // required
    public int max; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATEGORY_ID((short)1, "categoryId"),
      MAX((short)2, "max");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY_ID
            return CATEGORY_ID;
          case 2: // MAX
            return MAX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CATEGORYID_ISSET_ID = 0;
    private static final int __MAX_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("max", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPriceDropsByCategory_args.class, metaDataMap);
    }

    public getPriceDropsByCategory_args() {
    }

    public getPriceDropsByCategory_args(
      int categoryId,
      int max)
    {
      this();
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
      this.max = max;
      setMaxIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPriceDropsByCategory_args(getPriceDropsByCategory_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.categoryId = other.categoryId;
      this.max = other.max;
    }

    public getPriceDropsByCategory_args deepCopy() {
      return new getPriceDropsByCategory_args(this);
    }

    @Override
    public void clear() {
      setCategoryIdIsSet(false);
      this.categoryId = 0;
      setMaxIsSet(false);
      this.max = 0;
    }

    public int getCategoryId() {
      return this.categoryId;
    }

    public getPriceDropsByCategory_args setCategoryId(int categoryId) {
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
      return this;
    }

    public void unsetCategoryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryId() {
      return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    public void setCategoryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
    }

    public int getMax() {
      return this.max;
    }

    public getPriceDropsByCategory_args setMax(int max) {
      this.max = max;
      setMaxIsSet(true);
      return this;
    }

    public void unsetMax() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_ISSET_ID);
    }

    /** Returns true if field max is set (has been assigned a value) and false otherwise */
    public boolean isSetMax() {
      return EncodingUtils.testBit(__isset_bitfield, __MAX_ISSET_ID);
    }

    public void setMaxIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CATEGORY_ID:
        if (value == null) {
          unsetCategoryId();
        } else {
          setCategoryId((Integer)value);
        }
        break;

      case MAX:
        if (value == null) {
          unsetMax();
        } else {
          setMax((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY_ID:
        return Integer.valueOf(getCategoryId());

      case MAX:
        return Integer.valueOf(getMax());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY_ID:
        return isSetCategoryId();
      case MAX:
        return isSetMax();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPriceDropsByCategory_args)
        return this.equals((getPriceDropsByCategory_args)that);
      return false;
    }

    public boolean equals(getPriceDropsByCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_categoryId = true;
      boolean that_present_categoryId = true;
      if (this_present_categoryId || that_present_categoryId) {
        if (!(this_present_categoryId && that_present_categoryId))
          return false;
        if (this.categoryId != that.categoryId)
          return false;
      }

      boolean this_present_max = true;
      boolean that_present_max = true;
      if (this_present_max || that_present_max) {
        if (!(this_present_max && that_present_max))
          return false;
        if (this.max != that.max)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPriceDropsByCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPriceDropsByCategory_args typedOther = (getPriceDropsByCategory_args)other;

      lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(typedOther.isSetCategoryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, typedOther.categoryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMax()).compareTo(typedOther.isSetMax());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMax()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max, typedOther.max);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPriceDropsByCategory_args(");
      boolean first = true;

      sb.append("categoryId:");
      sb.append(this.categoryId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("max:");
      sb.append(this.max);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPriceDropsByCategory_argsStandardSchemeFactory implements SchemeFactory {
      public getPriceDropsByCategory_argsStandardScheme getScheme() {
        return new getPriceDropsByCategory_argsStandardScheme();
      }
    }

    private static class getPriceDropsByCategory_argsStandardScheme extends StandardScheme<getPriceDropsByCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPriceDropsByCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.categoryId = iprot.readI32();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MAX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.max = iprot.readI32();
                struct.setMaxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPriceDropsByCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
        oprot.writeI32(struct.categoryId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MAX_FIELD_DESC);
        oprot.writeI32(struct.max);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPriceDropsByCategory_argsTupleSchemeFactory implements SchemeFactory {
      public getPriceDropsByCategory_argsTupleScheme getScheme() {
        return new getPriceDropsByCategory_argsTupleScheme();
      }
    }

    private static class getPriceDropsByCategory_argsTupleScheme extends TupleScheme<getPriceDropsByCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPriceDropsByCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCategoryId()) {
          optionals.set(0);
        }
        if (struct.isSetMax()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCategoryId()) {
          oprot.writeI32(struct.categoryId);
        }
        if (struct.isSetMax()) {
          oprot.writeI32(struct.max);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPriceDropsByCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.categoryId = iprot.readI32();
          struct.setCategoryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.max = iprot.readI32();
          struct.setMaxIsSet(true);
        }
      }
    }

  }

  public static class getPriceDropsByCategory_result implements org.apache.thrift.TBase<getPriceDropsByCategory_result, getPriceDropsByCategory_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPriceDropsByCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPriceDropsByCategory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPriceDropsByCategory_resultTupleSchemeFactory());
    }

    public Map<String,ProductList> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductList.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPriceDropsByCategory_result.class, metaDataMap);
    }

    public getPriceDropsByCategory_result() {
    }

    public getPriceDropsByCategory_result(
      Map<String,ProductList> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPriceDropsByCategory_result(getPriceDropsByCategory_result other) {
      if (other.isSetSuccess()) {
        Map<String,ProductList> __this__success = new HashMap<String,ProductList>();
        for (Map.Entry<String, ProductList> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          ProductList other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          ProductList __this__success_copy_value = new ProductList(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getPriceDropsByCategory_result deepCopy() {
      return new getPriceDropsByCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, ProductList val) {
      if (this.success == null) {
        this.success = new HashMap<String,ProductList>();
      }
      this.success.put(key, val);
    }

    public Map<String,ProductList> getSuccess() {
      return this.success;
    }

    public getPriceDropsByCategory_result setSuccess(Map<String,ProductList> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,ProductList>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPriceDropsByCategory_result)
        return this.equals((getPriceDropsByCategory_result)that);
      return false;
    }

    public boolean equals(getPriceDropsByCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPriceDropsByCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPriceDropsByCategory_result typedOther = (getPriceDropsByCategory_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPriceDropsByCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPriceDropsByCategory_resultStandardSchemeFactory implements SchemeFactory {
      public getPriceDropsByCategory_resultStandardScheme getScheme() {
        return new getPriceDropsByCategory_resultStandardScheme();
      }
    }

    private static class getPriceDropsByCategory_resultStandardScheme extends StandardScheme<getPriceDropsByCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPriceDropsByCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map148 = iprot.readMapBegin();
                  struct.success = new HashMap<String,ProductList>(2*_map148.size);
                  for (int _i149 = 0; _i149 < _map148.size; ++_i149)
                  {
                    String _key150; // required
                    ProductList _val151; // required
                    _key150 = iprot.readString();
                    _val151 = new ProductList();
                    _val151.read(iprot);
                    struct.success.put(_key150, _val151);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPriceDropsByCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, ProductList> _iter152 : struct.success.entrySet())
            {
              oprot.writeString(_iter152.getKey());
              _iter152.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPriceDropsByCategory_resultTupleSchemeFactory implements SchemeFactory {
      public getPriceDropsByCategory_resultTupleScheme getScheme() {
        return new getPriceDropsByCategory_resultTupleScheme();
      }
    }

    private static class getPriceDropsByCategory_resultTupleScheme extends TupleScheme<getPriceDropsByCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPriceDropsByCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, ProductList> _iter153 : struct.success.entrySet())
            {
              oprot.writeString(_iter153.getKey());
              _iter153.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPriceDropsByCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map154 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,ProductList>(2*_map154.size);
            for (int _i155 = 0; _i155 < _map154.size; ++_i155)
            {
              String _key156; // required
              ProductList _val157; // required
              _key156 = iprot.readString();
              _val157 = new ProductList();
              _val157.read(iprot);
              struct.success.put(_key156, _val157);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPriceDropsByRetailer_args implements org.apache.thrift.TBase<getPriceDropsByRetailer_args, getPriceDropsByRetailer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPriceDropsByRetailer_args");

    private static final org.apache.thrift.protocol.TField RETAILER_FIELD_DESC = new org.apache.thrift.protocol.TField("retailer", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("max", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPriceDropsByRetailer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPriceDropsByRetailer_argsTupleSchemeFactory());
    }

    public String retailer; // required
    public int max; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RETAILER((short)1, "retailer"),
      MAX((short)2, "max");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RETAILER
            return RETAILER;
          case 2: // MAX
            return MAX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MAX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RETAILER, new org.apache.thrift.meta_data.FieldMetaData("retailer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("max", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPriceDropsByRetailer_args.class, metaDataMap);
    }

    public getPriceDropsByRetailer_args() {
    }

    public getPriceDropsByRetailer_args(
      String retailer,
      int max)
    {
      this();
      this.retailer = retailer;
      this.max = max;
      setMaxIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPriceDropsByRetailer_args(getPriceDropsByRetailer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRetailer()) {
        this.retailer = other.retailer;
      }
      this.max = other.max;
    }

    public getPriceDropsByRetailer_args deepCopy() {
      return new getPriceDropsByRetailer_args(this);
    }

    @Override
    public void clear() {
      this.retailer = null;
      setMaxIsSet(false);
      this.max = 0;
    }

    public String getRetailer() {
      return this.retailer;
    }

    public getPriceDropsByRetailer_args setRetailer(String retailer) {
      this.retailer = retailer;
      return this;
    }

    public void unsetRetailer() {
      this.retailer = null;
    }

    /** Returns true if field retailer is set (has been assigned a value) and false otherwise */
    public boolean isSetRetailer() {
      return this.retailer != null;
    }

    public void setRetailerIsSet(boolean value) {
      if (!value) {
        this.retailer = null;
      }
    }

    public int getMax() {
      return this.max;
    }

    public getPriceDropsByRetailer_args setMax(int max) {
      this.max = max;
      setMaxIsSet(true);
      return this;
    }

    public void unsetMax() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_ISSET_ID);
    }

    /** Returns true if field max is set (has been assigned a value) and false otherwise */
    public boolean isSetMax() {
      return EncodingUtils.testBit(__isset_bitfield, __MAX_ISSET_ID);
    }

    public void setMaxIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RETAILER:
        if (value == null) {
          unsetRetailer();
        } else {
          setRetailer((String)value);
        }
        break;

      case MAX:
        if (value == null) {
          unsetMax();
        } else {
          setMax((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RETAILER:
        return getRetailer();

      case MAX:
        return Integer.valueOf(getMax());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RETAILER:
        return isSetRetailer();
      case MAX:
        return isSetMax();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPriceDropsByRetailer_args)
        return this.equals((getPriceDropsByRetailer_args)that);
      return false;
    }

    public boolean equals(getPriceDropsByRetailer_args that) {
      if (that == null)
        return false;

      boolean this_present_retailer = true && this.isSetRetailer();
      boolean that_present_retailer = true && that.isSetRetailer();
      if (this_present_retailer || that_present_retailer) {
        if (!(this_present_retailer && that_present_retailer))
          return false;
        if (!this.retailer.equals(that.retailer))
          return false;
      }

      boolean this_present_max = true;
      boolean that_present_max = true;
      if (this_present_max || that_present_max) {
        if (!(this_present_max && that_present_max))
          return false;
        if (this.max != that.max)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPriceDropsByRetailer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPriceDropsByRetailer_args typedOther = (getPriceDropsByRetailer_args)other;

      lastComparison = Boolean.valueOf(isSetRetailer()).compareTo(typedOther.isSetRetailer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRetailer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retailer, typedOther.retailer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMax()).compareTo(typedOther.isSetMax());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMax()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max, typedOther.max);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPriceDropsByRetailer_args(");
      boolean first = true;

      sb.append("retailer:");
      if (this.retailer == null) {
        sb.append("null");
      } else {
        sb.append(this.retailer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("max:");
      sb.append(this.max);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPriceDropsByRetailer_argsStandardSchemeFactory implements SchemeFactory {
      public getPriceDropsByRetailer_argsStandardScheme getScheme() {
        return new getPriceDropsByRetailer_argsStandardScheme();
      }
    }

    private static class getPriceDropsByRetailer_argsStandardScheme extends StandardScheme<getPriceDropsByRetailer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPriceDropsByRetailer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RETAILER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.retailer = iprot.readString();
                struct.setRetailerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MAX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.max = iprot.readI32();
                struct.setMaxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPriceDropsByRetailer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.retailer != null) {
          oprot.writeFieldBegin(RETAILER_FIELD_DESC);
          oprot.writeString(struct.retailer);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MAX_FIELD_DESC);
        oprot.writeI32(struct.max);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPriceDropsByRetailer_argsTupleSchemeFactory implements SchemeFactory {
      public getPriceDropsByRetailer_argsTupleScheme getScheme() {
        return new getPriceDropsByRetailer_argsTupleScheme();
      }
    }

    private static class getPriceDropsByRetailer_argsTupleScheme extends TupleScheme<getPriceDropsByRetailer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPriceDropsByRetailer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRetailer()) {
          optionals.set(0);
        }
        if (struct.isSetMax()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRetailer()) {
          oprot.writeString(struct.retailer);
        }
        if (struct.isSetMax()) {
          oprot.writeI32(struct.max);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPriceDropsByRetailer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.retailer = iprot.readString();
          struct.setRetailerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.max = iprot.readI32();
          struct.setMaxIsSet(true);
        }
      }
    }

  }

  public static class getPriceDropsByRetailer_result implements org.apache.thrift.TBase<getPriceDropsByRetailer_result, getPriceDropsByRetailer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPriceDropsByRetailer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPriceDropsByRetailer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPriceDropsByRetailer_resultTupleSchemeFactory());
    }

    public Map<String,ProductList> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductList.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPriceDropsByRetailer_result.class, metaDataMap);
    }

    public getPriceDropsByRetailer_result() {
    }

    public getPriceDropsByRetailer_result(
      Map<String,ProductList> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPriceDropsByRetailer_result(getPriceDropsByRetailer_result other) {
      if (other.isSetSuccess()) {
        Map<String,ProductList> __this__success = new HashMap<String,ProductList>();
        for (Map.Entry<String, ProductList> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          ProductList other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          ProductList __this__success_copy_value = new ProductList(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getPriceDropsByRetailer_result deepCopy() {
      return new getPriceDropsByRetailer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, ProductList val) {
      if (this.success == null) {
        this.success = new HashMap<String,ProductList>();
      }
      this.success.put(key, val);
    }

    public Map<String,ProductList> getSuccess() {
      return this.success;
    }

    public getPriceDropsByRetailer_result setSuccess(Map<String,ProductList> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,ProductList>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPriceDropsByRetailer_result)
        return this.equals((getPriceDropsByRetailer_result)that);
      return false;
    }

    public boolean equals(getPriceDropsByRetailer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPriceDropsByRetailer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPriceDropsByRetailer_result typedOther = (getPriceDropsByRetailer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPriceDropsByRetailer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPriceDropsByRetailer_resultStandardSchemeFactory implements SchemeFactory {
      public getPriceDropsByRetailer_resultStandardScheme getScheme() {
        return new getPriceDropsByRetailer_resultStandardScheme();
      }
    }

    private static class getPriceDropsByRetailer_resultStandardScheme extends StandardScheme<getPriceDropsByRetailer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPriceDropsByRetailer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map158 = iprot.readMapBegin();
                  struct.success = new HashMap<String,ProductList>(2*_map158.size);
                  for (int _i159 = 0; _i159 < _map158.size; ++_i159)
                  {
                    String _key160; // required
                    ProductList _val161; // required
                    _key160 = iprot.readString();
                    _val161 = new ProductList();
                    _val161.read(iprot);
                    struct.success.put(_key160, _val161);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPriceDropsByRetailer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, ProductList> _iter162 : struct.success.entrySet())
            {
              oprot.writeString(_iter162.getKey());
              _iter162.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPriceDropsByRetailer_resultTupleSchemeFactory implements SchemeFactory {
      public getPriceDropsByRetailer_resultTupleScheme getScheme() {
        return new getPriceDropsByRetailer_resultTupleScheme();
      }
    }

    private static class getPriceDropsByRetailer_resultTupleScheme extends TupleScheme<getPriceDropsByRetailer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPriceDropsByRetailer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, ProductList> _iter163 : struct.success.entrySet())
            {
              oprot.writeString(_iter163.getKey());
              _iter163.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPriceDropsByRetailer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map164 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,ProductList>(2*_map164.size);
            for (int _i165 = 0; _i165 < _map164.size; ++_i165)
            {
              String _key166; // required
              ProductList _val167; // required
              _key166 = iprot.readString();
              _val167 = new ProductList();
              _val167.read(iprot);
              struct.success.put(_key166, _val167);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductsForURLs_args implements org.apache.thrift.TBase<getProductsForURLs_args, getProductsForURLs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductsForURLs_args");

    private static final org.apache.thrift.protocol.TField RETAILER_FIELD_DESC = new org.apache.thrift.protocol.TField("retailer", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("urls", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductsForURLs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductsForURLs_argsTupleSchemeFactory());
    }

    public String retailer; // required
    public List<String> urls; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RETAILER((short)1, "retailer"),
      URLS((short)2, "urls");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RETAILER
            return RETAILER;
          case 2: // URLS
            return URLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RETAILER, new org.apache.thrift.meta_data.FieldMetaData("retailer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.URLS, new org.apache.thrift.meta_data.FieldMetaData("urls", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductsForURLs_args.class, metaDataMap);
    }

    public getProductsForURLs_args() {
    }

    public getProductsForURLs_args(
      String retailer,
      List<String> urls)
    {
      this();
      this.retailer = retailer;
      this.urls = urls;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductsForURLs_args(getProductsForURLs_args other) {
      if (other.isSetRetailer()) {
        this.retailer = other.retailer;
      }
      if (other.isSetUrls()) {
        List<String> __this__urls = new ArrayList<String>();
        for (String other_element : other.urls) {
          __this__urls.add(other_element);
        }
        this.urls = __this__urls;
      }
    }

    public getProductsForURLs_args deepCopy() {
      return new getProductsForURLs_args(this);
    }

    @Override
    public void clear() {
      this.retailer = null;
      this.urls = null;
    }

    public String getRetailer() {
      return this.retailer;
    }

    public getProductsForURLs_args setRetailer(String retailer) {
      this.retailer = retailer;
      return this;
    }

    public void unsetRetailer() {
      this.retailer = null;
    }

    /** Returns true if field retailer is set (has been assigned a value) and false otherwise */
    public boolean isSetRetailer() {
      return this.retailer != null;
    }

    public void setRetailerIsSet(boolean value) {
      if (!value) {
        this.retailer = null;
      }
    }

    public int getUrlsSize() {
      return (this.urls == null) ? 0 : this.urls.size();
    }

    public java.util.Iterator<String> getUrlsIterator() {
      return (this.urls == null) ? null : this.urls.iterator();
    }

    public void addToUrls(String elem) {
      if (this.urls == null) {
        this.urls = new ArrayList<String>();
      }
      this.urls.add(elem);
    }

    public List<String> getUrls() {
      return this.urls;
    }

    public getProductsForURLs_args setUrls(List<String> urls) {
      this.urls = urls;
      return this;
    }

    public void unsetUrls() {
      this.urls = null;
    }

    /** Returns true if field urls is set (has been assigned a value) and false otherwise */
    public boolean isSetUrls() {
      return this.urls != null;
    }

    public void setUrlsIsSet(boolean value) {
      if (!value) {
        this.urls = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RETAILER:
        if (value == null) {
          unsetRetailer();
        } else {
          setRetailer((String)value);
        }
        break;

      case URLS:
        if (value == null) {
          unsetUrls();
        } else {
          setUrls((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RETAILER:
        return getRetailer();

      case URLS:
        return getUrls();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RETAILER:
        return isSetRetailer();
      case URLS:
        return isSetUrls();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductsForURLs_args)
        return this.equals((getProductsForURLs_args)that);
      return false;
    }

    public boolean equals(getProductsForURLs_args that) {
      if (that == null)
        return false;

      boolean this_present_retailer = true && this.isSetRetailer();
      boolean that_present_retailer = true && that.isSetRetailer();
      if (this_present_retailer || that_present_retailer) {
        if (!(this_present_retailer && that_present_retailer))
          return false;
        if (!this.retailer.equals(that.retailer))
          return false;
      }

      boolean this_present_urls = true && this.isSetUrls();
      boolean that_present_urls = true && that.isSetUrls();
      if (this_present_urls || that_present_urls) {
        if (!(this_present_urls && that_present_urls))
          return false;
        if (!this.urls.equals(that.urls))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProductsForURLs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProductsForURLs_args typedOther = (getProductsForURLs_args)other;

      lastComparison = Boolean.valueOf(isSetRetailer()).compareTo(typedOther.isSetRetailer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRetailer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retailer, typedOther.retailer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUrls()).compareTo(typedOther.isSetUrls());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrls()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urls, typedOther.urls);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductsForURLs_args(");
      boolean first = true;

      sb.append("retailer:");
      if (this.retailer == null) {
        sb.append("null");
      } else {
        sb.append(this.retailer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("urls:");
      if (this.urls == null) {
        sb.append("null");
      } else {
        sb.append(this.urls);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductsForURLs_argsStandardSchemeFactory implements SchemeFactory {
      public getProductsForURLs_argsStandardScheme getScheme() {
        return new getProductsForURLs_argsStandardScheme();
      }
    }

    private static class getProductsForURLs_argsStandardScheme extends StandardScheme<getProductsForURLs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductsForURLs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RETAILER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.retailer = iprot.readString();
                struct.setRetailerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URLS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                  struct.urls = new ArrayList<String>(_list168.size);
                  for (int _i169 = 0; _i169 < _list168.size; ++_i169)
                  {
                    String _elem170; // required
                    _elem170 = iprot.readString();
                    struct.urls.add(_elem170);
                  }
                  iprot.readListEnd();
                }
                struct.setUrlsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductsForURLs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.retailer != null) {
          oprot.writeFieldBegin(RETAILER_FIELD_DESC);
          oprot.writeString(struct.retailer);
          oprot.writeFieldEnd();
        }
        if (struct.urls != null) {
          oprot.writeFieldBegin(URLS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.urls.size()));
            for (String _iter171 : struct.urls)
            {
              oprot.writeString(_iter171);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductsForURLs_argsTupleSchemeFactory implements SchemeFactory {
      public getProductsForURLs_argsTupleScheme getScheme() {
        return new getProductsForURLs_argsTupleScheme();
      }
    }

    private static class getProductsForURLs_argsTupleScheme extends TupleScheme<getProductsForURLs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductsForURLs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRetailer()) {
          optionals.set(0);
        }
        if (struct.isSetUrls()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRetailer()) {
          oprot.writeString(struct.retailer);
        }
        if (struct.isSetUrls()) {
          {
            oprot.writeI32(struct.urls.size());
            for (String _iter172 : struct.urls)
            {
              oprot.writeString(_iter172);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductsForURLs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.retailer = iprot.readString();
          struct.setRetailerIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.urls = new ArrayList<String>(_list173.size);
            for (int _i174 = 0; _i174 < _list173.size; ++_i174)
            {
              String _elem175; // required
              _elem175 = iprot.readString();
              struct.urls.add(_elem175);
            }
          }
          struct.setUrlsIsSet(true);
        }
      }
    }

  }

  public static class getProductsForURLs_result implements org.apache.thrift.TBase<getProductsForURLs_result, getProductsForURLs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductsForURLs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductsForURLs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductsForURLs_resultTupleSchemeFactory());
    }

    public Map<String,Product> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Product.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductsForURLs_result.class, metaDataMap);
    }

    public getProductsForURLs_result() {
    }

    public getProductsForURLs_result(
      Map<String,Product> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductsForURLs_result(getProductsForURLs_result other) {
      if (other.isSetSuccess()) {
        Map<String,Product> __this__success = new HashMap<String,Product>();
        for (Map.Entry<String, Product> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Product other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Product __this__success_copy_value = new Product(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getProductsForURLs_result deepCopy() {
      return new getProductsForURLs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Product val) {
      if (this.success == null) {
        this.success = new HashMap<String,Product>();
      }
      this.success.put(key, val);
    }

    public Map<String,Product> getSuccess() {
      return this.success;
    }

    public getProductsForURLs_result setSuccess(Map<String,Product> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Product>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductsForURLs_result)
        return this.equals((getProductsForURLs_result)that);
      return false;
    }

    public boolean equals(getProductsForURLs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProductsForURLs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProductsForURLs_result typedOther = (getProductsForURLs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductsForURLs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductsForURLs_resultStandardSchemeFactory implements SchemeFactory {
      public getProductsForURLs_resultStandardScheme getScheme() {
        return new getProductsForURLs_resultStandardScheme();
      }
    }

    private static class getProductsForURLs_resultStandardScheme extends StandardScheme<getProductsForURLs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductsForURLs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map176 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Product>(2*_map176.size);
                  for (int _i177 = 0; _i177 < _map176.size; ++_i177)
                  {
                    String _key178; // required
                    Product _val179; // required
                    _key178 = iprot.readString();
                    _val179 = new Product();
                    _val179.read(iprot);
                    struct.success.put(_key178, _val179);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductsForURLs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, Product> _iter180 : struct.success.entrySet())
            {
              oprot.writeString(_iter180.getKey());
              _iter180.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductsForURLs_resultTupleSchemeFactory implements SchemeFactory {
      public getProductsForURLs_resultTupleScheme getScheme() {
        return new getProductsForURLs_resultTupleScheme();
      }
    }

    private static class getProductsForURLs_resultTupleScheme extends TupleScheme<getProductsForURLs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductsForURLs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Product> _iter181 : struct.success.entrySet())
            {
              oprot.writeString(_iter181.getKey());
              _iter181.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductsForURLs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map182 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,Product>(2*_map182.size);
            for (int _i183 = 0; _i183 < _map182.size; ++_i183)
            {
              String _key184; // required
              Product _val185; // required
              _key184 = iprot.readString();
              _val185 = new Product();
              _val185.read(iprot);
              struct.success.put(_key184, _val185);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPriceDropsForProductFamily_args implements org.apache.thrift.TBase<getPriceDropsForProductFamily_args, getPriceDropsForProductFamily_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPriceDropsForProductFamily_args");

    private static final org.apache.thrift.protocol.TField RETAILER_FIELD_DESC = new org.apache.thrift.protocol.TField("retailer", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("urls", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("max", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPriceDropsForProductFamily_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPriceDropsForProductFamily_argsTupleSchemeFactory());
    }

    public String retailer; // required
    public List<String> urls; // required
    public int max; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RETAILER((short)1, "retailer"),
      URLS((short)2, "urls"),
      MAX((short)3, "max");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RETAILER
            return RETAILER;
          case 2: // URLS
            return URLS;
          case 3: // MAX
            return MAX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MAX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RETAILER, new org.apache.thrift.meta_data.FieldMetaData("retailer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.URLS, new org.apache.thrift.meta_data.FieldMetaData("urls", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("max", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPriceDropsForProductFamily_args.class, metaDataMap);
    }

    public getPriceDropsForProductFamily_args() {
    }

    public getPriceDropsForProductFamily_args(
      String retailer,
      List<String> urls,
      int max)
    {
      this();
      this.retailer = retailer;
      this.urls = urls;
      this.max = max;
      setMaxIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPriceDropsForProductFamily_args(getPriceDropsForProductFamily_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRetailer()) {
        this.retailer = other.retailer;
      }
      if (other.isSetUrls()) {
        List<String> __this__urls = new ArrayList<String>();
        for (String other_element : other.urls) {
          __this__urls.add(other_element);
        }
        this.urls = __this__urls;
      }
      this.max = other.max;
    }

    public getPriceDropsForProductFamily_args deepCopy() {
      return new getPriceDropsForProductFamily_args(this);
    }

    @Override
    public void clear() {
      this.retailer = null;
      this.urls = null;
      setMaxIsSet(false);
      this.max = 0;
    }

    public String getRetailer() {
      return this.retailer;
    }

    public getPriceDropsForProductFamily_args setRetailer(String retailer) {
      this.retailer = retailer;
      return this;
    }

    public void unsetRetailer() {
      this.retailer = null;
    }

    /** Returns true if field retailer is set (has been assigned a value) and false otherwise */
    public boolean isSetRetailer() {
      return this.retailer != null;
    }

    public void setRetailerIsSet(boolean value) {
      if (!value) {
        this.retailer = null;
      }
    }

    public int getUrlsSize() {
      return (this.urls == null) ? 0 : this.urls.size();
    }

    public java.util.Iterator<String> getUrlsIterator() {
      return (this.urls == null) ? null : this.urls.iterator();
    }

    public void addToUrls(String elem) {
      if (this.urls == null) {
        this.urls = new ArrayList<String>();
      }
      this.urls.add(elem);
    }

    public List<String> getUrls() {
      return this.urls;
    }

    public getPriceDropsForProductFamily_args setUrls(List<String> urls) {
      this.urls = urls;
      return this;
    }

    public void unsetUrls() {
      this.urls = null;
    }

    /** Returns true if field urls is set (has been assigned a value) and false otherwise */
    public boolean isSetUrls() {
      return this.urls != null;
    }

    public void setUrlsIsSet(boolean value) {
      if (!value) {
        this.urls = null;
      }
    }

    public int getMax() {
      return this.max;
    }

    public getPriceDropsForProductFamily_args setMax(int max) {
      this.max = max;
      setMaxIsSet(true);
      return this;
    }

    public void unsetMax() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_ISSET_ID);
    }

    /** Returns true if field max is set (has been assigned a value) and false otherwise */
    public boolean isSetMax() {
      return EncodingUtils.testBit(__isset_bitfield, __MAX_ISSET_ID);
    }

    public void setMaxIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RETAILER:
        if (value == null) {
          unsetRetailer();
        } else {
          setRetailer((String)value);
        }
        break;

      case URLS:
        if (value == null) {
          unsetUrls();
        } else {
          setUrls((List<String>)value);
        }
        break;

      case MAX:
        if (value == null) {
          unsetMax();
        } else {
          setMax((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RETAILER:
        return getRetailer();

      case URLS:
        return getUrls();

      case MAX:
        return Integer.valueOf(getMax());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RETAILER:
        return isSetRetailer();
      case URLS:
        return isSetUrls();
      case MAX:
        return isSetMax();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPriceDropsForProductFamily_args)
        return this.equals((getPriceDropsForProductFamily_args)that);
      return false;
    }

    public boolean equals(getPriceDropsForProductFamily_args that) {
      if (that == null)
        return false;

      boolean this_present_retailer = true && this.isSetRetailer();
      boolean that_present_retailer = true && that.isSetRetailer();
      if (this_present_retailer || that_present_retailer) {
        if (!(this_present_retailer && that_present_retailer))
          return false;
        if (!this.retailer.equals(that.retailer))
          return false;
      }

      boolean this_present_urls = true && this.isSetUrls();
      boolean that_present_urls = true && that.isSetUrls();
      if (this_present_urls || that_present_urls) {
        if (!(this_present_urls && that_present_urls))
          return false;
        if (!this.urls.equals(that.urls))
          return false;
      }

      boolean this_present_max = true;
      boolean that_present_max = true;
      if (this_present_max || that_present_max) {
        if (!(this_present_max && that_present_max))
          return false;
        if (this.max != that.max)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPriceDropsForProductFamily_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPriceDropsForProductFamily_args typedOther = (getPriceDropsForProductFamily_args)other;

      lastComparison = Boolean.valueOf(isSetRetailer()).compareTo(typedOther.isSetRetailer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRetailer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retailer, typedOther.retailer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUrls()).compareTo(typedOther.isSetUrls());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrls()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urls, typedOther.urls);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMax()).compareTo(typedOther.isSetMax());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMax()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max, typedOther.max);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPriceDropsForProductFamily_args(");
      boolean first = true;

      sb.append("retailer:");
      if (this.retailer == null) {
        sb.append("null");
      } else {
        sb.append(this.retailer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("urls:");
      if (this.urls == null) {
        sb.append("null");
      } else {
        sb.append(this.urls);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("max:");
      sb.append(this.max);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPriceDropsForProductFamily_argsStandardSchemeFactory implements SchemeFactory {
      public getPriceDropsForProductFamily_argsStandardScheme getScheme() {
        return new getPriceDropsForProductFamily_argsStandardScheme();
      }
    }

    private static class getPriceDropsForProductFamily_argsStandardScheme extends StandardScheme<getPriceDropsForProductFamily_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPriceDropsForProductFamily_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RETAILER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.retailer = iprot.readString();
                struct.setRetailerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URLS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list186 = iprot.readListBegin();
                  struct.urls = new ArrayList<String>(_list186.size);
                  for (int _i187 = 0; _i187 < _list186.size; ++_i187)
                  {
                    String _elem188; // required
                    _elem188 = iprot.readString();
                    struct.urls.add(_elem188);
                  }
                  iprot.readListEnd();
                }
                struct.setUrlsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MAX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.max = iprot.readI32();
                struct.setMaxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPriceDropsForProductFamily_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.retailer != null) {
          oprot.writeFieldBegin(RETAILER_FIELD_DESC);
          oprot.writeString(struct.retailer);
          oprot.writeFieldEnd();
        }
        if (struct.urls != null) {
          oprot.writeFieldBegin(URLS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.urls.size()));
            for (String _iter189 : struct.urls)
            {
              oprot.writeString(_iter189);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MAX_FIELD_DESC);
        oprot.writeI32(struct.max);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPriceDropsForProductFamily_argsTupleSchemeFactory implements SchemeFactory {
      public getPriceDropsForProductFamily_argsTupleScheme getScheme() {
        return new getPriceDropsForProductFamily_argsTupleScheme();
      }
    }

    private static class getPriceDropsForProductFamily_argsTupleScheme extends TupleScheme<getPriceDropsForProductFamily_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPriceDropsForProductFamily_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRetailer()) {
          optionals.set(0);
        }
        if (struct.isSetUrls()) {
          optionals.set(1);
        }
        if (struct.isSetMax()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRetailer()) {
          oprot.writeString(struct.retailer);
        }
        if (struct.isSetUrls()) {
          {
            oprot.writeI32(struct.urls.size());
            for (String _iter190 : struct.urls)
            {
              oprot.writeString(_iter190);
            }
          }
        }
        if (struct.isSetMax()) {
          oprot.writeI32(struct.max);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPriceDropsForProductFamily_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.retailer = iprot.readString();
          struct.setRetailerIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list191 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.urls = new ArrayList<String>(_list191.size);
            for (int _i192 = 0; _i192 < _list191.size; ++_i192)
            {
              String _elem193; // required
              _elem193 = iprot.readString();
              struct.urls.add(_elem193);
            }
          }
          struct.setUrlsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.max = iprot.readI32();
          struct.setMaxIsSet(true);
        }
      }
    }

  }

  public static class getPriceDropsForProductFamily_result implements org.apache.thrift.TBase<getPriceDropsForProductFamily_result, getPriceDropsForProductFamily_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPriceDropsForProductFamily_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPriceDropsForProductFamily_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPriceDropsForProductFamily_resultTupleSchemeFactory());
    }

    public Map<String,ProductList> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductList.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPriceDropsForProductFamily_result.class, metaDataMap);
    }

    public getPriceDropsForProductFamily_result() {
    }

    public getPriceDropsForProductFamily_result(
      Map<String,ProductList> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPriceDropsForProductFamily_result(getPriceDropsForProductFamily_result other) {
      if (other.isSetSuccess()) {
        Map<String,ProductList> __this__success = new HashMap<String,ProductList>();
        for (Map.Entry<String, ProductList> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          ProductList other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          ProductList __this__success_copy_value = new ProductList(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getPriceDropsForProductFamily_result deepCopy() {
      return new getPriceDropsForProductFamily_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, ProductList val) {
      if (this.success == null) {
        this.success = new HashMap<String,ProductList>();
      }
      this.success.put(key, val);
    }

    public Map<String,ProductList> getSuccess() {
      return this.success;
    }

    public getPriceDropsForProductFamily_result setSuccess(Map<String,ProductList> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,ProductList>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPriceDropsForProductFamily_result)
        return this.equals((getPriceDropsForProductFamily_result)that);
      return false;
    }

    public boolean equals(getPriceDropsForProductFamily_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPriceDropsForProductFamily_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPriceDropsForProductFamily_result typedOther = (getPriceDropsForProductFamily_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPriceDropsForProductFamily_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPriceDropsForProductFamily_resultStandardSchemeFactory implements SchemeFactory {
      public getPriceDropsForProductFamily_resultStandardScheme getScheme() {
        return new getPriceDropsForProductFamily_resultStandardScheme();
      }
    }

    private static class getPriceDropsForProductFamily_resultStandardScheme extends StandardScheme<getPriceDropsForProductFamily_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPriceDropsForProductFamily_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map194 = iprot.readMapBegin();
                  struct.success = new HashMap<String,ProductList>(2*_map194.size);
                  for (int _i195 = 0; _i195 < _map194.size; ++_i195)
                  {
                    String _key196; // required
                    ProductList _val197; // required
                    _key196 = iprot.readString();
                    _val197 = new ProductList();
                    _val197.read(iprot);
                    struct.success.put(_key196, _val197);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPriceDropsForProductFamily_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, ProductList> _iter198 : struct.success.entrySet())
            {
              oprot.writeString(_iter198.getKey());
              _iter198.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPriceDropsForProductFamily_resultTupleSchemeFactory implements SchemeFactory {
      public getPriceDropsForProductFamily_resultTupleScheme getScheme() {
        return new getPriceDropsForProductFamily_resultTupleScheme();
      }
    }

    private static class getPriceDropsForProductFamily_resultTupleScheme extends TupleScheme<getPriceDropsForProductFamily_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPriceDropsForProductFamily_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, ProductList> _iter199 : struct.success.entrySet())
            {
              oprot.writeString(_iter199.getKey());
              _iter199.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPriceDropsForProductFamily_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map200 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,ProductList>(2*_map200.size);
            for (int _i201 = 0; _i201 < _map200.size; ++_i201)
            {
              String _key202; // required
              ProductList _val203; // required
              _key202 = iprot.readString();
              _val203 = new ProductList();
              _val203.read(iprot);
              struct.success.put(_key202, _val203);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductsForReceiptIds_args implements org.apache.thrift.TBase<getProductsForReceiptIds_args, getProductsForReceiptIds_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductsForReceiptIds_args");

    private static final org.apache.thrift.protocol.TField RETAILER_FIELD_DESC = new org.apache.thrift.protocol.TField("retailer", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField RECEIPT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("receiptIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductsForReceiptIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductsForReceiptIds_argsTupleSchemeFactory());
    }

    public String retailer; // required
    public List<String> receiptIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RETAILER((short)1, "retailer"),
      RECEIPT_IDS((short)2, "receiptIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RETAILER
            return RETAILER;
          case 2: // RECEIPT_IDS
            return RECEIPT_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RETAILER, new org.apache.thrift.meta_data.FieldMetaData("retailer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RECEIPT_IDS, new org.apache.thrift.meta_data.FieldMetaData("receiptIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductsForReceiptIds_args.class, metaDataMap);
    }

    public getProductsForReceiptIds_args() {
    }

    public getProductsForReceiptIds_args(
      String retailer,
      List<String> receiptIds)
    {
      this();
      this.retailer = retailer;
      this.receiptIds = receiptIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductsForReceiptIds_args(getProductsForReceiptIds_args other) {
      if (other.isSetRetailer()) {
        this.retailer = other.retailer;
      }
      if (other.isSetReceiptIds()) {
        List<String> __this__receiptIds = new ArrayList<String>();
        for (String other_element : other.receiptIds) {
          __this__receiptIds.add(other_element);
        }
        this.receiptIds = __this__receiptIds;
      }
    }

    public getProductsForReceiptIds_args deepCopy() {
      return new getProductsForReceiptIds_args(this);
    }

    @Override
    public void clear() {
      this.retailer = null;
      this.receiptIds = null;
    }

    public String getRetailer() {
      return this.retailer;
    }

    public getProductsForReceiptIds_args setRetailer(String retailer) {
      this.retailer = retailer;
      return this;
    }

    public void unsetRetailer() {
      this.retailer = null;
    }

    /** Returns true if field retailer is set (has been assigned a value) and false otherwise */
    public boolean isSetRetailer() {
      return this.retailer != null;
    }

    public void setRetailerIsSet(boolean value) {
      if (!value) {
        this.retailer = null;
      }
    }

    public int getReceiptIdsSize() {
      return (this.receiptIds == null) ? 0 : this.receiptIds.size();
    }

    public java.util.Iterator<String> getReceiptIdsIterator() {
      return (this.receiptIds == null) ? null : this.receiptIds.iterator();
    }

    public void addToReceiptIds(String elem) {
      if (this.receiptIds == null) {
        this.receiptIds = new ArrayList<String>();
      }
      this.receiptIds.add(elem);
    }

    public List<String> getReceiptIds() {
      return this.receiptIds;
    }

    public getProductsForReceiptIds_args setReceiptIds(List<String> receiptIds) {
      this.receiptIds = receiptIds;
      return this;
    }

    public void unsetReceiptIds() {
      this.receiptIds = null;
    }

    /** Returns true if field receiptIds is set (has been assigned a value) and false otherwise */
    public boolean isSetReceiptIds() {
      return this.receiptIds != null;
    }

    public void setReceiptIdsIsSet(boolean value) {
      if (!value) {
        this.receiptIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RETAILER:
        if (value == null) {
          unsetRetailer();
        } else {
          setRetailer((String)value);
        }
        break;

      case RECEIPT_IDS:
        if (value == null) {
          unsetReceiptIds();
        } else {
          setReceiptIds((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RETAILER:
        return getRetailer();

      case RECEIPT_IDS:
        return getReceiptIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RETAILER:
        return isSetRetailer();
      case RECEIPT_IDS:
        return isSetReceiptIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductsForReceiptIds_args)
        return this.equals((getProductsForReceiptIds_args)that);
      return false;
    }

    public boolean equals(getProductsForReceiptIds_args that) {
      if (that == null)
        return false;

      boolean this_present_retailer = true && this.isSetRetailer();
      boolean that_present_retailer = true && that.isSetRetailer();
      if (this_present_retailer || that_present_retailer) {
        if (!(this_present_retailer && that_present_retailer))
          return false;
        if (!this.retailer.equals(that.retailer))
          return false;
      }

      boolean this_present_receiptIds = true && this.isSetReceiptIds();
      boolean that_present_receiptIds = true && that.isSetReceiptIds();
      if (this_present_receiptIds || that_present_receiptIds) {
        if (!(this_present_receiptIds && that_present_receiptIds))
          return false;
        if (!this.receiptIds.equals(that.receiptIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProductsForReceiptIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProductsForReceiptIds_args typedOther = (getProductsForReceiptIds_args)other;

      lastComparison = Boolean.valueOf(isSetRetailer()).compareTo(typedOther.isSetRetailer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRetailer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retailer, typedOther.retailer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReceiptIds()).compareTo(typedOther.isSetReceiptIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceiptIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiptIds, typedOther.receiptIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductsForReceiptIds_args(");
      boolean first = true;

      sb.append("retailer:");
      if (this.retailer == null) {
        sb.append("null");
      } else {
        sb.append(this.retailer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("receiptIds:");
      if (this.receiptIds == null) {
        sb.append("null");
      } else {
        sb.append(this.receiptIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductsForReceiptIds_argsStandardSchemeFactory implements SchemeFactory {
      public getProductsForReceiptIds_argsStandardScheme getScheme() {
        return new getProductsForReceiptIds_argsStandardScheme();
      }
    }

    private static class getProductsForReceiptIds_argsStandardScheme extends StandardScheme<getProductsForReceiptIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductsForReceiptIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RETAILER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.retailer = iprot.readString();
                struct.setRetailerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RECEIPT_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list204 = iprot.readListBegin();
                  struct.receiptIds = new ArrayList<String>(_list204.size);
                  for (int _i205 = 0; _i205 < _list204.size; ++_i205)
                  {
                    String _elem206; // required
                    _elem206 = iprot.readString();
                    struct.receiptIds.add(_elem206);
                  }
                  iprot.readListEnd();
                }
                struct.setReceiptIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductsForReceiptIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.retailer != null) {
          oprot.writeFieldBegin(RETAILER_FIELD_DESC);
          oprot.writeString(struct.retailer);
          oprot.writeFieldEnd();
        }
        if (struct.receiptIds != null) {
          oprot.writeFieldBegin(RECEIPT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.receiptIds.size()));
            for (String _iter207 : struct.receiptIds)
            {
              oprot.writeString(_iter207);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductsForReceiptIds_argsTupleSchemeFactory implements SchemeFactory {
      public getProductsForReceiptIds_argsTupleScheme getScheme() {
        return new getProductsForReceiptIds_argsTupleScheme();
      }
    }

    private static class getProductsForReceiptIds_argsTupleScheme extends TupleScheme<getProductsForReceiptIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductsForReceiptIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRetailer()) {
          optionals.set(0);
        }
        if (struct.isSetReceiptIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRetailer()) {
          oprot.writeString(struct.retailer);
        }
        if (struct.isSetReceiptIds()) {
          {
            oprot.writeI32(struct.receiptIds.size());
            for (String _iter208 : struct.receiptIds)
            {
              oprot.writeString(_iter208);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductsForReceiptIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.retailer = iprot.readString();
          struct.setRetailerIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list209 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.receiptIds = new ArrayList<String>(_list209.size);
            for (int _i210 = 0; _i210 < _list209.size; ++_i210)
            {
              String _elem211; // required
              _elem211 = iprot.readString();
              struct.receiptIds.add(_elem211);
            }
          }
          struct.setReceiptIdsIsSet(true);
        }
      }
    }

  }

  public static class getProductsForReceiptIds_result implements org.apache.thrift.TBase<getProductsForReceiptIds_result, getProductsForReceiptIds_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductsForReceiptIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductsForReceiptIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductsForReceiptIds_resultTupleSchemeFactory());
    }

    public Map<String,Product> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Product.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductsForReceiptIds_result.class, metaDataMap);
    }

    public getProductsForReceiptIds_result() {
    }

    public getProductsForReceiptIds_result(
      Map<String,Product> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductsForReceiptIds_result(getProductsForReceiptIds_result other) {
      if (other.isSetSuccess()) {
        Map<String,Product> __this__success = new HashMap<String,Product>();
        for (Map.Entry<String, Product> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Product other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Product __this__success_copy_value = new Product(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getProductsForReceiptIds_result deepCopy() {
      return new getProductsForReceiptIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Product val) {
      if (this.success == null) {
        this.success = new HashMap<String,Product>();
      }
      this.success.put(key, val);
    }

    public Map<String,Product> getSuccess() {
      return this.success;
    }

    public getProductsForReceiptIds_result setSuccess(Map<String,Product> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Product>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductsForReceiptIds_result)
        return this.equals((getProductsForReceiptIds_result)that);
      return false;
    }

    public boolean equals(getProductsForReceiptIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProductsForReceiptIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProductsForReceiptIds_result typedOther = (getProductsForReceiptIds_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductsForReceiptIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductsForReceiptIds_resultStandardSchemeFactory implements SchemeFactory {
      public getProductsForReceiptIds_resultStandardScheme getScheme() {
        return new getProductsForReceiptIds_resultStandardScheme();
      }
    }

    private static class getProductsForReceiptIds_resultStandardScheme extends StandardScheme<getProductsForReceiptIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductsForReceiptIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map212 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Product>(2*_map212.size);
                  for (int _i213 = 0; _i213 < _map212.size; ++_i213)
                  {
                    String _key214; // required
                    Product _val215; // required
                    _key214 = iprot.readString();
                    _val215 = new Product();
                    _val215.read(iprot);
                    struct.success.put(_key214, _val215);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductsForReceiptIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, Product> _iter216 : struct.success.entrySet())
            {
              oprot.writeString(_iter216.getKey());
              _iter216.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductsForReceiptIds_resultTupleSchemeFactory implements SchemeFactory {
      public getProductsForReceiptIds_resultTupleScheme getScheme() {
        return new getProductsForReceiptIds_resultTupleScheme();
      }
    }

    private static class getProductsForReceiptIds_resultTupleScheme extends TupleScheme<getProductsForReceiptIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductsForReceiptIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Product> _iter217 : struct.success.entrySet())
            {
              oprot.writeString(_iter217.getKey());
              _iter217.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductsForReceiptIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map218 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,Product>(2*_map218.size);
            for (int _i219 = 0; _i219 < _map218.size; ++_i219)
            {
              String _key220; // required
              Product _val221; // required
              _key220 = iprot.readString();
              _val221 = new Product();
              _val221.read(iprot);
              struct.success.put(_key220, _val221);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
