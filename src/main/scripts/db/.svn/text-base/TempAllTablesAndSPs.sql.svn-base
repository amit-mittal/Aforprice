CREATE database PRODUCTS;
SHOW databases;
USE products;
drop table RETAILER;
CREATE table RETAILER
( 
	RETAILER_ID VARCHAR(20) NOT NULL,
	RETAILER_NAME VARCHAR(20) NOT NULL,
	URL VARCHAR(500) NOT NULL,
	LOGO BLOB,
	TIME_MODIFIED DATETIME NOT NULL,

	PRIMARY KEY USING HASH (RETAILER_ID)
);
describe retailer;


drop table CATEGORY;
CREATE table CATEGORY
( 
	CATEGORY_ID VARCHAR(100) NOT NULL,
	CATEGORY_NAME VARCHAR(100) NOT NULL,
	GENERIC_CATEGORY_ID VARCHAR(100) NOT NULL,
	PARENT_CATEGORY_ID VARCHAR(100) NOT NULL,
	RETAILER_ID VARCHAR(20) NOT NULL,
	CATEGORY_FETCH_RULE_ID VARCHAR(20),
	URL VARCHAR(500),
	ACTIVE  CHAR(1) NOT NULL,
	PARENT CHAR(1) NOT NULL,
	TIME_MODIFIED DATETIME NOT NULL,

	PRIMARY KEY USING HASH (CATEGORY_ID, RETAILER_ID),
	INDEX GENERIC_CATEGORY_ID_idx using BTREE (GENERIC_CATEGORY_ID),
	INDEX PARENT_CATEGORY_ID_idx using BTREE (PARENT_CATEGORY_ID),
	INDEX RETAILER_ID_idx using BTREE (RETAILER_ID)
	
);
describe CATEGORY;

drop table  GENERIC_CATEGORY;
CREATE table GENERIC_CATEGORY
( 
	GENERIC_CATEGORY_ID VARCHAR(20) NOT NULL,
	GENERIC_CATEGORY_NAME VARCHAR(20) NOT NULL,
	ACTIVE  CHAR(1) NOT NULL,
	TIME_MODIFIED DATETIME NOT NULL,

	PRIMARY KEY USING HASH (GENERIC_CATEGORY_ID)
	
);
describe GENERIC_CATEGORY;

drop table PRODUCT;
CREATE table PRODUCT
( 	
	PRODUCT_NAME VARCHAR(500) NOT NULL,
	RETAILER_ID VARCHAR(20) NOT NULL,
	CATEGORY_ID VARCHAR(100) NOT NULL,	
	GENERIC_PRODUCT_ID VARCHAR(20) NOT NULL,		
	DESCRIPTION VARCHAR(5000),
	IMAGE BLOB,
	IMAGE_URL BLOB,
	START_DATE DATETIME NOT NULL,
	END_DATE DATETIME,
	URL VARCHAR(500),
	ACTIVE CHAR(1) NOT NULL,
	TIME_MODIFIED DATETIME NOT NULL,

	PRIMARY KEY USING BTREE (PRODUCT_NAME, RETAILER_ID),
	INDEX GENERIC_PRODUCT_ID_idx using BTREE (GENERIC_PRODUCT_ID),
	INDEX CATEGORY_ID_idx using BTREE (CATEGORY_ID),
	INDEX RETAILER_ID_idx using BTREE (RETAILER_ID)
	
);
describe PRODUCT;

drop table GENERIC_PRODUCT;
CREATE table GENERIC_PRODUCT
( 
	GENERIC_PRODUCT_ID VARCHAR(20) NOT NULL,
	GENERIC_PRODUCT_NAME VARCHAR(20) NOT NULL,
	ACTIVE  CHAR(1) NOT NULL,
	TIME_MODIFIED DATETIME NOT NULL,

	PRIMARY KEY USING HASH (GENERIC_PRODUCT_ID)
	
);
describe GENERIC_PRODUCT;

drop table PRODUCT_PRICE_HISTORY;
CREATE table PRODUCT_PRICE_HISTORY
( 
	PRODUCT_NAME VARCHAR(200) NOT NULL,
	CATEGORY_ID VARCHAR(100) NOT NULL,
	RETAILER_ID VARCHAR(20) NOT NULL,
	PRICE FLOAT NOT NULL,	
	TIME_MODIFIED DATETIME NOT NULL,

	PRIMARY KEY USING BTREE (PRODUCT_NAME, CATEGORY_ID, RETAILER_ID)
	
);
describe PRODUCT_PRICE_HISTORY;

load data local infile 'd:/ashish/pricehistory/databaseconfiguration/retailer.txt' into table retailer columns terminated by '~'
delete from category;
load data local infile 'd:/ashish/pricehistory/databaseconfiguration/category.txt' into table category columns terminated by '~';
select * from category;


use products;
drop procedure UpdatePrice;
DELIMITER // 
create procedure UpdatePrice(
	IN PRODUCT_ID VARCHAR(20),
	IN PRICE FLOAT,
	IN URL VARCHAR(100),
	IN TIME_MODIFIED DATETIME
)
begin
insert into PRODUCT_PRICE_HISTORY values( PRODUCT_ID, PRICE, URL, TIME_MODIFIED );
end//
DELIMITER ;

use products;
drop procedure UpdateCategory;
DELIMITER // 
create procedure UpdateCategory(
	IN IN_CATEGORY_ID VARCHAR(100),
	IN CATEGORY_NAME VARCHAR(100),
	IN GENERIC_CATEGORY_ID VARCHAR(100),
	IN PARENT_CATEGORY_ID VARCHAR(100),
	IN IN_RETAILER_ID VARCHAR(20),
	IN CATEGORY_FETCH_RULE_ID VARCHAR(20),
	IN URL VARCHAR(500),
	IN ACTIVE  CHAR(1),
	IN PARENT  CHAR(1),
	IN TIME_MODIFIED DATETIME,
	OUT RESULT NUMERIC
)
begin
SET RESULT = 2;
set @category_exists = (select count(*) from category where CATEGORY_ID=IN_CATEGORY_ID and RETAILER_ID=IN_RETAILER_ID);
if not(@category_exists) then
	INSERT into CATEGORY values( IN_CATEGORY_ID, CATEGORY_NAME, GENERIC_CATEGORY_ID, PARENT_CATEGORY_ID, IN_RETAILER_ID, CATEGORY_FETCH_RULE_ID, URL, ACTIVE, PARENT, TIME_MODIFIED );
	SET RESULT = 0;
end if;
end//
DELIMITER ;


call UpdateCategory( "X", "X", "X", "X", "X", "X", "X", "Y", "2012-01-31 08:00", @out1);


notes
category_id in category table can't be unique, primary key should be category_id, retailer_id
category_name length should be longer
UpdatePrice todo: only update if price has changed from previous price



