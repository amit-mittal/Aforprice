<?php
namespace Thrift\Generated\PriceAlert;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class PRICE_ALERT_ERROR_CODE {
  const SYSTEM_ERROR = 0;
  const DUPLICATE_PRICE_ALERT_ON_PRODUCTID = 1;
  const INVALID_ALERTID = 2;
  static public $__names = array(
    0 => 'SYSTEM_ERROR',
    1 => 'DUPLICATE_PRICE_ALERT_ON_PRODUCTID',
    2 => 'INVALID_ALERTID',
  );
}

final class PriceAlertTypeThrift {
  const ALERT_WHEN_AT_PRICE = 0;
  const ALERT_WHEN_PRICE_DROPS = 1;
  static public $__names = array(
    0 => 'ALERT_WHEN_AT_PRICE',
    1 => 'ALERT_WHEN_PRICE_DROPS',
  );
}

class PriceAlertException extends TException {
  static $_TSPEC;

  public $error_code = null;
  public $error_msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error_msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error_code'])) {
        $this->error_code = $vals['error_code'];
      }
      if (isset($vals['error_msg'])) {
        $this->error_msg = $vals['error_msg'];
      }
    }
  }

  public function getName() {
    return 'PriceAlertException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->error_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PriceAlertException');
    if ($this->error_code !== null) {
      $xfer += $output->writeFieldBegin('error_code', TType::I32, 1);
      $xfer += $output->writeI32($this->error_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error_msg !== null) {
      $xfer += $output->writeFieldBegin('error_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->error_msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PriceAlertThrift {
  static $_TSPEC;

  public $emailId = null;
  public $alertId = null;
  public $productId = null;
  public $alertPrice = null;
  public $timeModified = null;
  public $alertCreationDate = null;
  public $alertExpirationDate = null;
  public $alertType = null;
  public $alertActive = null;
  public $retailer = null;
  public $name = null;
  public $url = null;
  public $imageUrl = null;
  public $currPrice = null;
  public $purchasePrice = null;
  public $purchaseDate = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'emailId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'alertId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'productId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'alertPrice',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'timeModified',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'alertCreationDate',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'alertExpirationDate',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'alertType',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'alertActive',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'retailer',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'imageUrl',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'currPrice',
          'type' => TType::DOUBLE,
          ),
        15 => array(
          'var' => 'purchasePrice',
          'type' => TType::DOUBLE,
          ),
        16 => array(
          'var' => 'purchaseDate',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['emailId'])) {
        $this->emailId = $vals['emailId'];
      }
      if (isset($vals['alertId'])) {
        $this->alertId = $vals['alertId'];
      }
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['alertPrice'])) {
        $this->alertPrice = $vals['alertPrice'];
      }
      if (isset($vals['timeModified'])) {
        $this->timeModified = $vals['timeModified'];
      }
      if (isset($vals['alertCreationDate'])) {
        $this->alertCreationDate = $vals['alertCreationDate'];
      }
      if (isset($vals['alertExpirationDate'])) {
        $this->alertExpirationDate = $vals['alertExpirationDate'];
      }
      if (isset($vals['alertType'])) {
        $this->alertType = $vals['alertType'];
      }
      if (isset($vals['alertActive'])) {
        $this->alertActive = $vals['alertActive'];
      }
      if (isset($vals['retailer'])) {
        $this->retailer = $vals['retailer'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['imageUrl'])) {
        $this->imageUrl = $vals['imageUrl'];
      }
      if (isset($vals['currPrice'])) {
        $this->currPrice = $vals['currPrice'];
      }
      if (isset($vals['purchasePrice'])) {
        $this->purchasePrice = $vals['purchasePrice'];
      }
      if (isset($vals['purchaseDate'])) {
        $this->purchaseDate = $vals['purchaseDate'];
      }
    }
  }

  public function getName() {
    return 'PriceAlertThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->emailId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->alertId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->alertPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timeModified);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alertCreationDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alertExpirationDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->alertType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->alertActive);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->retailer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->currPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->purchasePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->purchaseDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PriceAlertThrift');
    if ($this->emailId !== null) {
      $xfer += $output->writeFieldBegin('emailId', TType::STRING, 1);
      $xfer += $output->writeString($this->emailId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alertId !== null) {
      $xfer += $output->writeFieldBegin('alertId', TType::I32, 2);
      $xfer += $output->writeI32($this->alertId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::I32, 3);
      $xfer += $output->writeI32($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alertPrice !== null) {
      $xfer += $output->writeFieldBegin('alertPrice', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->alertPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeModified !== null) {
      $xfer += $output->writeFieldBegin('timeModified', TType::STRING, 5);
      $xfer += $output->writeString($this->timeModified);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alertCreationDate !== null) {
      $xfer += $output->writeFieldBegin('alertCreationDate', TType::STRING, 6);
      $xfer += $output->writeString($this->alertCreationDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alertExpirationDate !== null) {
      $xfer += $output->writeFieldBegin('alertExpirationDate', TType::STRING, 7);
      $xfer += $output->writeString($this->alertExpirationDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alertType !== null) {
      $xfer += $output->writeFieldBegin('alertType', TType::I32, 8);
      $xfer += $output->writeI32($this->alertType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alertActive !== null) {
      $xfer += $output->writeFieldBegin('alertActive', TType::BOOL, 9);
      $xfer += $output->writeBool($this->alertActive);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retailer !== null) {
      $xfer += $output->writeFieldBegin('retailer', TType::STRING, 10);
      $xfer += $output->writeString($this->retailer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 11);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 12);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imageUrl !== null) {
      $xfer += $output->writeFieldBegin('imageUrl', TType::STRING, 13);
      $xfer += $output->writeString($this->imageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currPrice !== null) {
      $xfer += $output->writeFieldBegin('currPrice', TType::DOUBLE, 14);
      $xfer += $output->writeDouble($this->currPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->purchasePrice !== null) {
      $xfer += $output->writeFieldBegin('purchasePrice', TType::DOUBLE, 15);
      $xfer += $output->writeDouble($this->purchasePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->purchaseDate !== null) {
      $xfer += $output->writeFieldBegin('purchaseDate', TType::STRING, 16);
      $xfer += $output->writeString($this->purchaseDate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

$GLOBALS['price_alert_CONSTANTS']['PRICE_ALERT_SERVER_PORT'] = array(
  25001,
  25001,
);


