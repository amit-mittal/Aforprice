<?php
namespace Thrift\Generated\Retailer;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


final class SortCriterion {
  const PRICE_ASC = 0;
  const PRICE_DESC = 1;
  const DROP_PERCENTAGE = 2;
  const BEST_SELLERS = 3;
  const REVIEW_RATINGS = 4;
  static public $__names = array(
    0 => 'PRICE_ASC',
    1 => 'PRICE_DESC',
    2 => 'DROP_PERCENTAGE',
    3 => 'BEST_SELLERS',
    4 => 'REVIEW_RATINGS',
  );
}

final class ProductFilterType {
  const PRICE = 0;
  const REVIEW_RATINGS = 1;
  static public $__names = array(
    0 => 'PRICE',
    1 => 'REVIEW_RATINGS',
  );
}

class Retailer {
  static $_TSPEC;

  public $id = null;
  public $displayName = null;
  public $url = null;
  public $sortsSupported = null;
  public $defaultSort = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'displayName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'sortsSupported',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        5 => array(
          'var' => 'defaultSort',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['sortsSupported'])) {
        $this->sortsSupported = $vals['sortsSupported'];
      }
      if (isset($vals['defaultSort'])) {
        $this->defaultSort = $vals['defaultSort'];
      }
    }
  }

  public function getName() {
    return 'Retailer';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->sortsSupported = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI32($elem5);
              $this->sortsSupported []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->defaultSort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Retailer');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 2);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 3);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sortsSupported !== null) {
      if (!is_array($this->sortsSupported)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sortsSupported', TType::LST, 4);
      {
        $output->writeListBegin(TType::I32, count($this->sortsSupported));
        {
          foreach ($this->sortsSupported as $iter6)
          {
            $xfer += $output->writeI32($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->defaultSort !== null) {
      $xfer += $output->writeFieldBegin('defaultSort', TType::I32, 5);
      $xfer += $output->writeI32($this->defaultSort);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Category {
  static $_TSPEC;

  public $categoryId = null;
  public $categoryName = null;
  public $retailerId = null;
  public $parentCategoryId = null;
  public $parentCategoryName = null;
  public $url = null;
  public $parent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'categoryId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'categoryName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'retailerId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parentCategoryId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'parentCategoryName',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parent',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['categoryId'])) {
        $this->categoryId = $vals['categoryId'];
      }
      if (isset($vals['categoryName'])) {
        $this->categoryName = $vals['categoryName'];
      }
      if (isset($vals['retailerId'])) {
        $this->retailerId = $vals['retailerId'];
      }
      if (isset($vals['parentCategoryId'])) {
        $this->parentCategoryId = $vals['parentCategoryId'];
      }
      if (isset($vals['parentCategoryName'])) {
        $this->parentCategoryName = $vals['parentCategoryName'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['parent'])) {
        $this->parent = $vals['parent'];
      }
    }
  }

  public function getName() {
    return 'Category';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->categoryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->categoryName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->retailerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parentCategoryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parentCategoryName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->parent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Category');
    if ($this->categoryId !== null) {
      $xfer += $output->writeFieldBegin('categoryId', TType::I32, 1);
      $xfer += $output->writeI32($this->categoryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->categoryName !== null) {
      $xfer += $output->writeFieldBegin('categoryName', TType::STRING, 2);
      $xfer += $output->writeString($this->categoryName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retailerId !== null) {
      $xfer += $output->writeFieldBegin('retailerId', TType::STRING, 3);
      $xfer += $output->writeString($this->retailerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parentCategoryId !== null) {
      $xfer += $output->writeFieldBegin('parentCategoryId', TType::I32, 4);
      $xfer += $output->writeI32($this->parentCategoryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parentCategoryName !== null) {
      $xfer += $output->writeFieldBegin('parentCategoryName', TType::STRING, 5);
      $xfer += $output->writeString($this->parentCategoryName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 6);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parent !== null) {
      $xfer += $output->writeFieldBegin('parent', TType::BOOL, 7);
      $xfer += $output->writeBool($this->parent);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PriceDrop {
  static $_TSPEC;

  public $categoryId = null;
  public $productId = null;
  public $url = null;
  public $name = null;
  public $imageUrl = null;
  public $currentPrice = null;
  public $previousPrice = null;
  public $averagePrice = null;
  public $maxPrice = null;
  public $reviewStars = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'categoryId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'productId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'imageUrl',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'currentPrice',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'previousPrice',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'averagePrice',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'maxPrice',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'reviewStars',
          'type' => TType::BYTE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['categoryId'])) {
        $this->categoryId = $vals['categoryId'];
      }
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['imageUrl'])) {
        $this->imageUrl = $vals['imageUrl'];
      }
      if (isset($vals['currentPrice'])) {
        $this->currentPrice = $vals['currentPrice'];
      }
      if (isset($vals['previousPrice'])) {
        $this->previousPrice = $vals['previousPrice'];
      }
      if (isset($vals['averagePrice'])) {
        $this->averagePrice = $vals['averagePrice'];
      }
      if (isset($vals['maxPrice'])) {
        $this->maxPrice = $vals['maxPrice'];
      }
      if (isset($vals['reviewStars'])) {
        $this->reviewStars = $vals['reviewStars'];
      }
    }
  }

  public function getName() {
    return 'PriceDrop';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->categoryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->currentPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->previousPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->averagePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->maxPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->reviewStars);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PriceDrop');
    if ($this->categoryId !== null) {
      $xfer += $output->writeFieldBegin('categoryId', TType::I32, 1);
      $xfer += $output->writeI32($this->categoryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::I32, 2);
      $xfer += $output->writeI32($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 3);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imageUrl !== null) {
      $xfer += $output->writeFieldBegin('imageUrl', TType::STRING, 5);
      $xfer += $output->writeString($this->imageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentPrice !== null) {
      $xfer += $output->writeFieldBegin('currentPrice', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->currentPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->previousPrice !== null) {
      $xfer += $output->writeFieldBegin('previousPrice', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->previousPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->averagePrice !== null) {
      $xfer += $output->writeFieldBegin('averagePrice', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->averagePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxPrice !== null) {
      $xfer += $output->writeFieldBegin('maxPrice', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->maxPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reviewStars !== null) {
      $xfer += $output->writeFieldBegin('reviewStars', TType::BYTE, 10);
      $xfer += $output->writeByte($this->reviewStars);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PriceDropByCategory {
  static $_TSPEC;

  public $categoryId = null;
  public $categoryName = null;
  public $priceDrops = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'categoryId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'categoryName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'priceDrops',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Generated\Retailer\PriceDrop',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['categoryId'])) {
        $this->categoryId = $vals['categoryId'];
      }
      if (isset($vals['categoryName'])) {
        $this->categoryName = $vals['categoryName'];
      }
      if (isset($vals['priceDrops'])) {
        $this->priceDrops = $vals['priceDrops'];
      }
    }
  }

  public function getName() {
    return 'PriceDropByCategory';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->categoryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->categoryName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->priceDrops = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \Thrift\Generated\Retailer\PriceDrop();
              $xfer += $elem12->read($input);
              $this->priceDrops []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PriceDropByCategory');
    if ($this->categoryId !== null) {
      $xfer += $output->writeFieldBegin('categoryId', TType::I32, 1);
      $xfer += $output->writeI32($this->categoryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->categoryName !== null) {
      $xfer += $output->writeFieldBegin('categoryName', TType::STRING, 2);
      $xfer += $output->writeString($this->categoryName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceDrops !== null) {
      if (!is_array($this->priceDrops)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('priceDrops', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->priceDrops));
        {
          foreach ($this->priceDrops as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tick {
  static $_TSPEC;

  public $time = null;
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'time',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
    }
  }

  public function getName() {
    return 'Tick';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tick');
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::I64, 1);
      $xfer += $output->writeI64($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PriceHistory {
  static $_TSPEC;

  public $priceTicks = null;
  public $currPrice = null;
  public $maxPrice = null;
  public $minPrice = null;
  public $currPriceFromTime = null;
  public $minPriceFromTime = null;
  public $minPriceToTime = null;
  public $maxPriceFromTime = null;
  public $maxPriceToTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'priceTicks',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Generated\Retailer\Tick',
            ),
          ),
        2 => array(
          'var' => 'currPrice',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'maxPrice',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'minPrice',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'currPriceFromTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'minPriceFromTime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'minPriceToTime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'maxPriceFromTime',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'maxPriceToTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['priceTicks'])) {
        $this->priceTicks = $vals['priceTicks'];
      }
      if (isset($vals['currPrice'])) {
        $this->currPrice = $vals['currPrice'];
      }
      if (isset($vals['maxPrice'])) {
        $this->maxPrice = $vals['maxPrice'];
      }
      if (isset($vals['minPrice'])) {
        $this->minPrice = $vals['minPrice'];
      }
      if (isset($vals['currPriceFromTime'])) {
        $this->currPriceFromTime = $vals['currPriceFromTime'];
      }
      if (isset($vals['minPriceFromTime'])) {
        $this->minPriceFromTime = $vals['minPriceFromTime'];
      }
      if (isset($vals['minPriceToTime'])) {
        $this->minPriceToTime = $vals['minPriceToTime'];
      }
      if (isset($vals['maxPriceFromTime'])) {
        $this->maxPriceFromTime = $vals['maxPriceFromTime'];
      }
      if (isset($vals['maxPriceToTime'])) {
        $this->maxPriceToTime = $vals['maxPriceToTime'];
      }
    }
  }

  public function getName() {
    return 'PriceHistory';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->priceTicks = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \Thrift\Generated\Retailer\Tick();
              $xfer += $elem19->read($input);
              $this->priceTicks []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->currPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->maxPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->minPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->currPriceFromTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->minPriceFromTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->minPriceToTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->maxPriceFromTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->maxPriceToTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PriceHistory');
    if ($this->priceTicks !== null) {
      if (!is_array($this->priceTicks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('priceTicks', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->priceTicks));
        {
          foreach ($this->priceTicks as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currPrice !== null) {
      $xfer += $output->writeFieldBegin('currPrice', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->currPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxPrice !== null) {
      $xfer += $output->writeFieldBegin('maxPrice', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->maxPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minPrice !== null) {
      $xfer += $output->writeFieldBegin('minPrice', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->minPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currPriceFromTime !== null) {
      $xfer += $output->writeFieldBegin('currPriceFromTime', TType::I64, 5);
      $xfer += $output->writeI64($this->currPriceFromTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minPriceFromTime !== null) {
      $xfer += $output->writeFieldBegin('minPriceFromTime', TType::I64, 6);
      $xfer += $output->writeI64($this->minPriceFromTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minPriceToTime !== null) {
      $xfer += $output->writeFieldBegin('minPriceToTime', TType::I64, 7);
      $xfer += $output->writeI64($this->minPriceToTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxPriceFromTime !== null) {
      $xfer += $output->writeFieldBegin('maxPriceFromTime', TType::I64, 8);
      $xfer += $output->writeI64($this->maxPriceFromTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxPriceToTime !== null) {
      $xfer += $output->writeFieldBegin('maxPriceToTime', TType::I64, 9);
      $xfer += $output->writeI64($this->maxPriceToTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Review {
  static $_TSPEC;

  public $time = null;
  public $reviewRating = null;
  public $numReviews = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'time',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'reviewRating',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'numReviews',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['reviewRating'])) {
        $this->reviewRating = $vals['reviewRating'];
      }
      if (isset($vals['numReviews'])) {
        $this->numReviews = $vals['numReviews'];
      }
    }
  }

  public function getName() {
    return 'Review';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->reviewRating);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->numReviews);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Review');
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::I64, 1);
      $xfer += $output->writeI64($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reviewRating !== null) {
      $xfer += $output->writeFieldBegin('reviewRating', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->reviewRating);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numReviews !== null) {
      $xfer += $output->writeFieldBegin('numReviews', TType::I32, 3);
      $xfer += $output->writeI32($this->numReviews);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LookupIdx {
  static $_TSPEC;

  public $startIdx = null;
  public $endIdx = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'startIdx',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'endIdx',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['startIdx'])) {
        $this->startIdx = $vals['startIdx'];
      }
      if (isset($vals['endIdx'])) {
        $this->endIdx = $vals['endIdx'];
      }
    }
  }

  public function getName() {
    return 'LookupIdx';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->startIdx);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->endIdx);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LookupIdx');
    if ($this->startIdx !== null) {
      $xfer += $output->writeFieldBegin('startIdx', TType::I32, 1);
      $xfer += $output->writeI32($this->startIdx);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endIdx !== null) {
      $xfer += $output->writeFieldBegin('endIdx', TType::I32, 2);
      $xfer += $output->writeI32($this->endIdx);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Product {
  static $_TSPEC;

  public $productId = null;
  public $name = null;
  public $modelNo = null;
  public $imageUrl = null;
  public $url = null;
  public $priceHistory = null;
  public $sellRankHistory = null;
  public $reviewHistory = null;
  public $uid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'productId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'modelNo',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'imageUrl',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'priceHistory',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Generated\Retailer\PriceHistory',
          ),
        7 => array(
          'var' => 'sellRankHistory',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Generated\Retailer\Tick',
            ),
          ),
        8 => array(
          'var' => 'reviewHistory',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Generated\Retailer\Review',
            ),
          ),
        9 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['modelNo'])) {
        $this->modelNo = $vals['modelNo'];
      }
      if (isset($vals['imageUrl'])) {
        $this->imageUrl = $vals['imageUrl'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['priceHistory'])) {
        $this->priceHistory = $vals['priceHistory'];
      }
      if (isset($vals['sellRankHistory'])) {
        $this->sellRankHistory = $vals['sellRankHistory'];
      }
      if (isset($vals['reviewHistory'])) {
        $this->reviewHistory = $vals['reviewHistory'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
    }
  }

  public function getName() {
    return 'Product';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->modelNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->priceHistory = new \Thrift\Generated\Retailer\PriceHistory();
            $xfer += $this->priceHistory->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->sellRankHistory = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \Thrift\Generated\Retailer\Tick();
              $xfer += $elem26->read($input);
              $this->sellRankHistory []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->reviewHistory = array();
            $_size27 = 0;
            $_etype30 = 0;
            $xfer += $input->readListBegin($_etype30, $_size27);
            for ($_i31 = 0; $_i31 < $_size27; ++$_i31)
            {
              $elem32 = null;
              $elem32 = new \Thrift\Generated\Retailer\Review();
              $xfer += $elem32->read($input);
              $this->reviewHistory []= $elem32;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Product');
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::I32, 1);
      $xfer += $output->writeI32($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->modelNo !== null) {
      $xfer += $output->writeFieldBegin('modelNo', TType::STRING, 3);
      $xfer += $output->writeString($this->modelNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imageUrl !== null) {
      $xfer += $output->writeFieldBegin('imageUrl', TType::STRING, 4);
      $xfer += $output->writeString($this->imageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 5);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceHistory !== null) {
      if (!is_object($this->priceHistory)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('priceHistory', TType::STRUCT, 6);
      $xfer += $this->priceHistory->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sellRankHistory !== null) {
      if (!is_array($this->sellRankHistory)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sellRankHistory', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->sellRankHistory));
        {
          foreach ($this->sellRankHistory as $iter33)
          {
            $xfer += $iter33->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reviewHistory !== null) {
      if (!is_array($this->reviewHistory)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('reviewHistory', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->reviewHistory));
        {
          foreach ($this->reviewHistory as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 9);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProductList {
  static $_TSPEC;

  public $products = null;
  public $totalCount = null;
  public $priceFilterToNumProdMap = null;
  public $reviewFilterToNumProdMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'products',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Generated\Retailer\Product',
            ),
          ),
        2 => array(
          'var' => 'totalCount',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'priceFilterToNumProdMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        4 => array(
          'var' => 'reviewFilterToNumProdMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['products'])) {
        $this->products = $vals['products'];
      }
      if (isset($vals['totalCount'])) {
        $this->totalCount = $vals['totalCount'];
      }
      if (isset($vals['priceFilterToNumProdMap'])) {
        $this->priceFilterToNumProdMap = $vals['priceFilterToNumProdMap'];
      }
      if (isset($vals['reviewFilterToNumProdMap'])) {
        $this->reviewFilterToNumProdMap = $vals['reviewFilterToNumProdMap'];
      }
    }
  }

  public function getName() {
    return 'ProductList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->products = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \Thrift\Generated\Retailer\Product();
              $xfer += $elem40->read($input);
              $this->products []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->priceFilterToNumProdMap = array();
            $_size41 = 0;
            $_ktype42 = 0;
            $_vtype43 = 0;
            $xfer += $input->readMapBegin($_ktype42, $_vtype43, $_size41);
            for ($_i45 = 0; $_i45 < $_size41; ++$_i45)
            {
              $key46 = '';
              $val47 = 0;
              $xfer += $input->readString($key46);
              $xfer += $input->readI32($val47);
              $this->priceFilterToNumProdMap[$key46] = $val47;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->reviewFilterToNumProdMap = array();
            $_size48 = 0;
            $_ktype49 = 0;
            $_vtype50 = 0;
            $xfer += $input->readMapBegin($_ktype49, $_vtype50, $_size48);
            for ($_i52 = 0; $_i52 < $_size48; ++$_i52)
            {
              $key53 = '';
              $val54 = 0;
              $xfer += $input->readString($key53);
              $xfer += $input->readI32($val54);
              $this->reviewFilterToNumProdMap[$key53] = $val54;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProductList');
    if ($this->products !== null) {
      if (!is_array($this->products)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('products', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->products));
        {
          foreach ($this->products as $iter55)
          {
            $xfer += $iter55->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalCount !== null) {
      $xfer += $output->writeFieldBegin('totalCount', TType::I32, 2);
      $xfer += $output->writeI32($this->totalCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceFilterToNumProdMap !== null) {
      if (!is_array($this->priceFilterToNumProdMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('priceFilterToNumProdMap', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->priceFilterToNumProdMap));
        {
          foreach ($this->priceFilterToNumProdMap as $kiter56 => $viter57)
          {
            $xfer += $output->writeString($kiter56);
            $xfer += $output->writeI32($viter57);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reviewFilterToNumProdMap !== null) {
      if (!is_array($this->reviewFilterToNumProdMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('reviewFilterToNumProdMap', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->reviewFilterToNumProdMap));
        {
          foreach ($this->reviewFilterToNumProdMap as $kiter58 => $viter59)
          {
            $xfer += $output->writeString($kiter58);
            $xfer += $output->writeI32($viter59);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProductFilter {
  static $_TSPEC;

  public $type = null;
  public $from = null;
  public $to = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'from',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'to',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['from'])) {
        $this->from = $vals['from'];
      }
      if (isset($vals['to'])) {
        $this->to = $vals['to'];
      }
    }
  }

  public function getName() {
    return 'ProductFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->from);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->to);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProductFilter');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from !== null) {
      $xfer += $output->writeFieldBegin('from', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->from);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->to !== null) {
      $xfer += $output->writeFieldBegin('to', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->to);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

$GLOBALS['retailer_CONSTANTS']['RETAILER_SERVER_PORT'] = array(
  1 => array(
    28001,
    28001,
  ),
  2 => array(
    28002,
    28002,
  ),
  3 => array(
    28003,
    28003,
  ),
  4 => array(
    28004,
    28004,
  ),
  5 => array(
    28005,
    28005,
  ),
  6 => array(
    28006,
    28006,
  ),
);

$GLOBALS['retailer_CONSTANTS']['RETAILERS'] = array(
  "bananarepublic" => 1,
  "bjs" => 1,
  "bestbuy" => 1,
  "costco" => 1,
  "cvs" => 1,
  "gap" => 1,
  "homedepot" => 1,
  "jcpenny" => 1,
  "testretailer" => 1,
  "kohls" => 2,
  "lowes" => 2,
  "macys" => 2,
  "nordstrom" => 2,
  "oldnavy" => 2,
  "riteaid" => 2,
  "sears" => 2,
  "samsclub" => 2,
  "staples" => 2,
  "walgreens" => 2,
  "testretailer2" => 2,
  "walmart" => 3,
  "target" => 4,
  "amazon" => 5,
  "amazonbs" => 5,
  "babysrus" => 6,
  "toysrus" => 6,
);


