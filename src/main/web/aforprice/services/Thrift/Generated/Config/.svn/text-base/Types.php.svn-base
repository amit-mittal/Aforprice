<?php
namespace Thrift\Generated\Config;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/* chirag: Included as this was giving TType class missing error */
chdir(dirname(__FILE__));
require_once '../../Type/TType.php';

use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


class DateObj {
  static $_TSPEC;

  public $date = null;
  public $month = null;
  public $year = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'date',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'month',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'year',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['month'])) {
        $this->month = $vals['month'];
      }
      if (isset($vals['year'])) {
        $this->year = $vals['year'];
      }
    }
  }

  public function getName() {
    return 'DateObj';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->month);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->year);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DateObj');
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::I16, 1);
      $xfer += $output->writeI16($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->month !== null) {
      $xfer += $output->writeFieldBegin('month', TType::I16, 2);
      $xfer += $output->writeI16($this->month);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->year !== null) {
      $xfer += $output->writeFieldBegin('year', TType::I16, 3);
      $xfer += $output->writeI16($this->year);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Event {
  static $_TSPEC;

  public $eventDate = null;
  public $description = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'eventDate',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Generated\Config\DateObj',
          ),
        2 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['eventDate'])) {
        $this->eventDate = $vals['eventDate'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
    }
  }

  public function getName() {
    return 'Event';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->eventDate = new \Thrift\Generated\Config\DateObj();
            $xfer += $this->eventDate->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Event');
    if ($this->eventDate !== null) {
      if (!is_object($this->eventDate)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('eventDate', TType::STRUCT, 1);
      $xfer += $this->eventDate->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 2);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

$GLOBALS['config_CONSTANTS']['CONFIG_SERVER_PORT'] = array(
  27001,
  27001,
);

$GLOBALS['config_CONSTANTS']['EVENTS'] = array(
  new \Thrift\Generated\Config\Event(array(
    "eventDate" => new \Thrift\Generated\Config\DateObj(array(
      "date" => 1,
      "month" => 1,
      "year" => 2013,
    )),
    "description" => "New Year's Day",
  )),
  new \Thrift\Generated\Config\Event(array(
    "eventDate" => new \Thrift\Generated\Config\DateObj(array(
      "date" => 21,
      "month" => 1,
      "year" => 2013,
    )),
    "description" => "Martin Luther King Day",
  )),
  new \Thrift\Generated\Config\Event(array(
    "eventDate" => new \Thrift\Generated\Config\DateObj(array(
      "date" => 14,
      "month" => 2,
      "year" => 2013,
    )),
    "description" => "Valentine's Day",
  )),
  new \Thrift\Generated\Config\Event(array(
    "eventDate" => new \Thrift\Generated\Config\DateObj(array(
      "date" => 18,
      "month" => 2,
      "year" => 2013,
    )),
    "description" => "Presidents' Day (Washington's Birthday)",
  )),
  new \Thrift\Generated\Config\Event(array(
    "eventDate" => new \Thrift\Generated\Config\DateObj(array(
      "date" => 12,
      "month" => 5,
      "year" => 2013,
    )),
    "description" => "Mother's Day",
  )),
  new \Thrift\Generated\Config\Event(array(
    "eventDate" => new \Thrift\Generated\Config\DateObj(array(
      "date" => 27,
      "month" => 5,
      "year" => 2013,
    )),
    "description" => "Memorial Day",
  )),
  new \Thrift\Generated\Config\Event(array(
    "eventDate" => new \Thrift\Generated\Config\DateObj(array(
      "date" => 16,
      "month" => 6,
      "year" => 2013,
    )),
    "description" => "Father's Day",
  )),
  new \Thrift\Generated\Config\Event(array(
    "eventDate" => new \Thrift\Generated\Config\DateObj(array(
      "date" => 4,
      "month" => 7,
      "year" => 2013,
    )),
    "description" => "Independence Day",
  )),
  new \Thrift\Generated\Config\Event(array(
    "eventDate" => new \Thrift\Generated\Config\DateObj(array(
      "date" => 2,
      "month" => 9,
      "year" => 2013,
    )),
    "description" => "Labor Day",
  )),
  new \Thrift\Generated\Config\Event(array(
    "eventDate" => new \Thrift\Generated\Config\DateObj(array(
      "date" => 14,
      "month" => 10,
      "year" => 2013,
    )),
    "description" => "Columbus Day",
  )),
  new \Thrift\Generated\Config\Event(array(
    "eventDate" => new \Thrift\Generated\Config\DateObj(array(
      "date" => 31,
      "month" => 10,
      "year" => 2013,
    )),
    "description" => "Halloween",
  )),
  new \Thrift\Generated\Config\Event(array(
    "eventDate" => new \Thrift\Generated\Config\DateObj(array(
      "date" => 11,
      "month" => 11,
      "year" => 2013,
    )),
    "description" => "Veterans Day",
  )),
  new \Thrift\Generated\Config\Event(array(
    "eventDate" => new \Thrift\Generated\Config\DateObj(array(
      "date" => 28,
      "month" => 11,
      "year" => 2013,
    )),
    "description" => "Thanksgiving Day",
  )),
  new \Thrift\Generated\Config\Event(array(
    "eventDate" => new \Thrift\Generated\Config\DateObj(array(
      "date" => 24,
      "month" => 12,
      "year" => 2013,
    )),
    "description" => "Christmas Eve",
  )),
  new \Thrift\Generated\Config\Event(array(
    "eventDate" => new \Thrift\Generated\Config\DateObj(array(
      "date" => 25,
      "month" => 12,
      "year" => 2013,
    )),
    "description" => "Christmas Day",
  )),
  new \Thrift\Generated\Config\Event(array(
    "eventDate" => new \Thrift\Generated\Config\DateObj(array(
      "date" => 31,
      "month" => 12,
      "year" => 2013,
    )),
    "description" => "New Year's Eve",
  )),
);


